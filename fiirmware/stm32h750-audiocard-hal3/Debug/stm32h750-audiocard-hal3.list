
stm32h750-audiocard-hal3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054a4  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  0800573c  0800573c  0001573c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005b8c  08005b8c  00015b8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005b90  08005b90  00015b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000184  24000000  08005b94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00003778  240001a0  08005d18  000201a0  2**5
                  ALLOC
  7 ._user_heap_stack 00000600  24003918  08005d18  00023918  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
  9 .debug_info   0002e53e  00000000  00000000  000201b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00005a50  00000000  00000000  0004e6f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0000c924  00000000  00000000  00054140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001028  00000000  00000000  00060a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000ff0  00000000  00000000  00061a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a178  00000000  00000000  00062a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001b8d5  00000000  00000000  0009cbf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00156866  00000000  00000000  000b84cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0020ed33  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000027e0  00000000  00000000  0020ed88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240001a0 	.word	0x240001a0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08005724 	.word	0x08005724

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240001a4 	.word	0x240001a4
 80002d4:	08005724 	.word	0x08005724

080002d8 <system_init>:


#include <drv/clock.h>

void system_init() {
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, FLASH_ACR_LATENCY_4WS);
 80002d8:	4a52      	ldr	r2, [pc, #328]	; (8000424 <system_init+0x14c>)
 80002da:	6813      	ldr	r3, [r2, #0]
 80002dc:	f023 030f 	bic.w	r3, r3, #15
 80002e0:	f043 0304 	orr.w	r3, r3, #4
 80002e4:	6013      	str	r3, [r2, #0]
	WAITVAL(FLASH->ACR, FLASH_ACR_LATENCY, FLASH_ACR_LATENCY_4WS);
 80002e6:	4b4f      	ldr	r3, [pc, #316]	; (8000424 <system_init+0x14c>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	f003 030f 	and.w	r3, r3, #15
 80002ee:	2b04      	cmp	r3, #4
 80002f0:	d1f9      	bne.n	80002e6 <system_init+0xe>
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002f2:	494d      	ldr	r1, [pc, #308]	; (8000428 <system_init+0x150>)
 80002f4:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002f6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80002fa:	0412      	lsls	r2, r2, #16
 80002fc:	0c12      	lsrs	r2, r2, #16
  reg_value  =  (reg_value                                   |
 80002fe:	4b4b      	ldr	r3, [pc, #300]	; (800042c <system_init+0x154>)
 8000300:	4313      	orrs	r3, r2
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 8000302:	60cb      	str	r3, [r1, #12]
	NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);

	MODIFY_REG(PWR->CR3, (PWR_CR3_SCUEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS), PWR_CR3_LDOEN);
 8000304:	4a4a      	ldr	r2, [pc, #296]	; (8000430 <system_init+0x158>)
 8000306:	68d3      	ldr	r3, [r2, #12]
 8000308:	f023 0307 	bic.w	r3, r3, #7
 800030c:	f043 0302 	orr.w	r3, r3, #2
 8000310:	60d3      	str	r3, [r2, #12]
	#if defined (PWR_CPUCR_PDDS_D2)
		MODIFY_REG(PWR->D3CR, PWR_D3CR_VOS, 0b11 << PWR_D3CR_VOS_Pos);
 8000312:	6993      	ldr	r3, [r2, #24]
 8000314:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000318:	6193      	str	r3, [r2, #24]
	#else
		#error "Voltage scaling not set!"
		//MODIFY_REG(PWR->SRDCR, PWR_SRDCR_VOS, VoltageScaling);
	#endif /* PWR_CPUCR_PDDS_D2 */

	RCC->CR |= RCC_CR_HSEON;
 800031a:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 800031e:	6813      	ldr	r3, [r2, #0]
 8000320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000324:	6013      	str	r3, [r2, #0]
	WAITBIT(RCC->CR, RCC_CR_HSERDY);
 8000326:	4b43      	ldr	r3, [pc, #268]	; (8000434 <system_init+0x15c>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800032e:	d0fa      	beq.n	8000326 <system_init+0x4e>

	RCC->CR |= RCC_CR_HSION;
 8000330:	4a40      	ldr	r2, [pc, #256]	; (8000434 <system_init+0x15c>)
 8000332:	6813      	ldr	r3, [r2, #0]
 8000334:	f043 0301 	orr.w	r3, r3, #1
 8000338:	6013      	str	r3, [r2, #0]
	WAITBIT(RCC->CR, RCC_CR_HSIRDY);
 800033a:	4b3e      	ldr	r3, [pc, #248]	; (8000434 <system_init+0x15c>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	f013 0f04 	tst.w	r3, #4
 8000342:	d0fa      	beq.n	800033a <system_init+0x62>

	MODIFY_REG(RCC->PLLCKSELR, RCC_PLLCKSELR_PLLSRC, RCC_PLLCKSELR_PLLSRC_HSE);
 8000344:	4b3b      	ldr	r3, [pc, #236]	; (8000434 <system_init+0x15c>)
 8000346:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000348:	f022 0203 	bic.w	r2, r2, #3
 800034c:	f042 0202 	orr.w	r2, r2, #2
 8000350:	629a      	str	r2, [r3, #40]	; 0x28

	RCC->PLLCFGR |= RCC_PLLCFGR_DIVP1EN | RCC_PLLCFGR_DIVR1EN | RCC_PLLCFGR_DIVQ1EN;
 8000352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000354:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
 8000358:	62da      	str	r2, [r3, #44]	; 0x2c
	MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLL1RGE, 0b11 << RCC_PLLCFGR_PLL1RGE_Pos);			// VCO Input range 8-16 MHz for 0b11, p. 401
 800035a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800035c:	f042 020c 	orr.w	r2, r2, #12
 8000360:	62da      	str	r2, [r3, #44]	; 0x2c
	MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLL1VCOSEL, 0b0 << RCC_PLLCFGR_PLL1VCOSEL_Pos);	// Wide VCO range: 192 to 960 MHz, p. 401
 8000362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000364:	f022 0202 	bic.w	r2, r2, #2
 8000368:	62da      	str	r2, [r3, #44]	; 0x2c

	// 480Mhz from 24Mhz
	MODIFY_REG(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM1, 2 << RCC_PLLCKSELR_DIVM1_Pos);	// M /2
 800036a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800036c:	f422 727c 	bic.w	r2, r2, #1008	; 0x3f0
 8000370:	f042 0220 	orr.w	r2, r2, #32
 8000374:	629a      	str	r2, [r3, #40]	; 0x28
	MODIFY_REG(RCC->PLL1DIVR, RCC_PLL1DIVR_N1, (76-1UL) << RCC_PLL1DIVR_N1_Pos);   	// N 80
 8000376:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000378:	4a2f      	ldr	r2, [pc, #188]	; (8000438 <system_init+0x160>)
 800037a:	400a      	ands	r2, r1
 800037c:	f042 024b 	orr.w	r2, r2, #75	; 0x4b
 8000380:	631a      	str	r2, [r3, #48]	; 0x30
	MODIFY_REG(RCC->PLL1DIVR, RCC_PLL1DIVR_P1, (2-1UL) << RCC_PLL1DIVR_P1_Pos);		// P 2
 8000382:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000384:	f422 427e 	bic.w	r2, r2, #65024	; 0xfe00
 8000388:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800038c:	631a      	str	r2, [r3, #48]	; 0x30
	MODIFY_REG(RCC->PLL1DIVR, RCC_PLL1DIVR_Q1, (12-1UL) << RCC_PLL1DIVR_Q1_Pos);	// Q 12 (For QSPI)
 800038e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000390:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000394:	f442 2230 	orr.w	r2, r2, #720896	; 0xb0000
 8000398:	631a      	str	r2, [r3, #48]	; 0x30
	MODIFY_REG(RCC->PLL1DIVR, RCC_PLL1DIVR_R1, (2-1UL) << RCC_PLL1DIVR_R1_Pos);		// R 2
 800039a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800039c:	f022 42fe 	bic.w	r2, r2, #2130706432	; 0x7f000000
 80003a0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80003a4:	631a      	str	r2, [r3, #48]	; 0x30
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80003a6:	f3bf 8f4f 	dsb	sy
	__DSB();

	RCC->CR |= RCC_CR_PLL1ON;
 80003aa:	681a      	ldr	r2, [r3, #0]
 80003ac:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80003b0:	601a      	str	r2, [r3, #0]
	WAITBIT(RCC->CR, RCC_CR_PLL1RDY);
 80003b2:	4b20      	ldr	r3, [pc, #128]	; (8000434 <system_init+0x15c>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80003ba:	d0fa      	beq.n	80003b2 <system_init+0xda>

	// Set HPRE to /2
	#if defined(RCC_D1CFGR_HPRE)
		MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_D1CFGR_HPRE_DIV2);
 80003bc:	4b1d      	ldr	r3, [pc, #116]	; (8000434 <system_init+0x15c>)
 80003be:	699a      	ldr	r2, [r3, #24]
 80003c0:	f022 020f 	bic.w	r2, r2, #15
 80003c4:	f042 0208 	orr.w	r2, r2, #8
 80003c8:	619a      	str	r2, [r3, #24]
	#else
		#error "RCC_D1CFGR_HPRE Not set!"
	#endif /* RCC_D1CFGR_HPRE */

	MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_CFGR_SW_PLL1);
 80003ca:	691a      	ldr	r2, [r3, #16]
 80003cc:	f022 0207 	bic.w	r2, r2, #7
 80003d0:	f042 0203 	orr.w	r2, r2, #3
 80003d4:	611a      	str	r2, [r3, #16]
	MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_D1CFGR_D1CPRE_DIV1); // Systick prescaler
 80003d6:	699a      	ldr	r2, [r3, #24]
 80003d8:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 80003dc:	619a      	str	r2, [r3, #24]
	MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, RCC_D2CFGR_D2PPRE1_DIV2);
 80003de:	69da      	ldr	r2, [r3, #28]
 80003e0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80003e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80003e8:	61da      	str	r2, [r3, #28]
	MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, RCC_D2CFGR_D2PPRE2_DIV2);
 80003ea:	69da      	ldr	r2, [r3, #28]
 80003ec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80003f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80003f4:	61da      	str	r2, [r3, #28]
	MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_D1CFGR_D1PPRE_DIV2);
 80003f6:	699a      	ldr	r2, [r3, #24]
 80003f8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80003fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000400:	619a      	str	r2, [r3, #24]
	MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, RCC_D3CFGR_D3PPRE_DIV2);
 8000402:	6a1a      	ldr	r2, [r3, #32]
 8000404:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000408:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800040c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800040e:	b672      	cpsid	i

	// Systick init
	__disable_irq();
	SysTick->LOAD = (uint32_t)(480000 + 1);
 8000410:	4b0a      	ldr	r3, [pc, #40]	; (800043c <system_init+0x164>)
 8000412:	4a0b      	ldr	r2, [pc, #44]	; (8000440 <system_init+0x168>)
 8000414:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
 8000416:	2205      	movs	r2, #5
 8000418:	601a      	str	r2, [r3, #0]
	SysTick->VAL = 0UL;
 800041a:	2200      	movs	r2, #0
 800041c:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 800041e:	b662      	cpsie	i
	__enable_irq();
}
 8000420:	4770      	bx	lr
 8000422:	bf00      	nop
 8000424:	52002000 	.word	0x52002000
 8000428:	e000ed00 	.word	0xe000ed00
 800042c:	05fa0300 	.word	0x05fa0300
 8000430:	58024800 	.word	0x58024800
 8000434:	58024400 	.word	0x58024400
 8000438:	fffffe00 	.word	0xfffffe00
 800043c:	e000e010 	.word	0xe000e010
 8000440:	00075301 	.word	0x00075301

08000444 <_delayMs>:

void _delayMs(uint32_t del) {
	SysTick->VAL = 0;
 8000444:	4b05      	ldr	r3, [pc, #20]	; (800045c <_delayMs+0x18>)
 8000446:	2200      	movs	r2, #0
 8000448:	609a      	str	r2, [r3, #8]
	while (del) {
 800044a:	b130      	cbz	r0, 800045a <_delayMs+0x16>
		if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 800044c:	4b03      	ldr	r3, [pc, #12]	; (800045c <_delayMs+0x18>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000454:	d0f9      	beq.n	800044a <_delayMs+0x6>
		{
			del--;
 8000456:	3801      	subs	r0, #1
 8000458:	e7f7      	b.n	800044a <_delayMs+0x6>
	    }
	}
}
 800045a:	4770      	bx	lr
 800045c:	e000e010 	.word	0xe000e010

08000460 <usb_clock_init>:

void usb_clock_init() {
	RCC->CR |= RCC_CR_HSI48ON;
 8000460:	4a13      	ldr	r2, [pc, #76]	; (80004b0 <usb_clock_init+0x50>)
 8000462:	6813      	ldr	r3, [r2, #0]
 8000464:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000468:	6013      	str	r3, [r2, #0]
	WAITBIT(RCC->CR, RCC_CR_HSI48RDY);
 800046a:	4b11      	ldr	r3, [pc, #68]	; (80004b0 <usb_clock_init+0x50>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8000472:	d0fa      	beq.n	800046a <usb_clock_init+0xa>

	RCC->AHB4ENR |= RCC_AHB4ENR_GPIOAEN;
 8000474:	490e      	ldr	r1, [pc, #56]	; (80004b0 <usb_clock_init+0x50>)
 8000476:	f8d1 30e0 	ldr.w	r3, [r1, #224]	; 0xe0
 800047a:	f043 0301 	orr.w	r3, r3, #1
 800047e:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
	MODIFY_REG(GPIOA->MODER, GPIO_MODER_MODE8_Msk, 0b10 << GPIO_MODER_MODE8_Pos);
 8000482:	4b0c      	ldr	r3, [pc, #48]	; (80004b4 <usb_clock_init+0x54>)
 8000484:	681a      	ldr	r2, [r3, #0]
 8000486:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800048a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800048e:	601a      	str	r2, [r3, #0]
	MODIFY_REG(GPIOA->OSPEEDR, GPIO_OSPEEDR_OSPEED8_Msk, 0b11 << GPIO_OSPEEDR_OSPEED8_Pos);
 8000490:	689a      	ldr	r2, [r3, #8]
 8000492:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8000496:	609a      	str	r2, [r3, #8]
	MODIFY_REG(GPIOA->AFR[1], GPIO_AFRH_AFSEL8_Msk, 0 << GPIO_AFRH_AFSEL8_Pos);
 8000498:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800049a:	f022 020f 	bic.w	r2, r2, #15
 800049e:	625a      	str	r2, [r3, #36]	; 0x24

	MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), ((0b010 << RCC_CFGR_MCO1_Pos) | (1 << RCC_CFGR_MCO1PRE_Pos)));
 80004a0:	690b      	ldr	r3, [r1, #16]
 80004a2:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 80004a6:	f443 0304 	orr.w	r3, r3, #8650752	; 0x840000
 80004aa:	610b      	str	r3, [r1, #16]
}
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop
 80004b0:	58024400 	.word	0x58024400
 80004b4:	58020000 	.word	0x58020000

080004b8 <es8388_set_output_volume>:

	i2c1_writeRegister8(ES8388_ADDR + index, 2, 0x00); // Full DAC power-up, no ADC

}

void es8388_set_output_volume(uint8_t index, uint8_t chan, es_lr_t lr, float vol) {
 80004b8:	b508      	push	{r3, lr}
	vol = (vol + 45) / 1.5;
 80004ba:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80004f8 <es8388_set_output_volume+0x40>
 80004be:	ee30 0a27 	vadd.f32	s0, s0, s15
 80004c2:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80004c6:	eec0 7a07 	vdiv.f32	s15, s0, s14
	int16_t v = (int16_t) vol;
 80004ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80004ce:	ee17 3a90 	vmov	r3, s15
 80004d2:	b21b      	sxth	r3, r3
	if(v < 0) {v = 0;}
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	db03      	blt.n	80004e0 <es8388_set_output_volume+0x28>
	if(v > 0b100001) {v = 0b100001;}
 80004d8:	2b21      	cmp	r3, #33	; 0x21
 80004da:	dd02      	ble.n	80004e2 <es8388_set_output_volume+0x2a>
 80004dc:	2321      	movs	r3, #33	; 0x21
 80004de:	e000      	b.n	80004e2 <es8388_set_output_volume+0x2a>
	if(v < 0) {v = 0;}
 80004e0:	2300      	movs	r3, #0
	i2c1_writeRegister8(ES8388_ADDR + index, 46 + chan + lr, v);
 80004e2:	4411      	add	r1, r2
 80004e4:	b2c9      	uxtb	r1, r1
 80004e6:	312e      	adds	r1, #46	; 0x2e
 80004e8:	3010      	adds	r0, #16
 80004ea:	b2da      	uxtb	r2, r3
 80004ec:	b2c9      	uxtb	r1, r1
 80004ee:	b2c0      	uxtb	r0, r0
 80004f0:	f000 fac2 	bl	8000a78 <i2c1_writeRegister8>
}
 80004f4:	bd08      	pop	{r3, pc}
 80004f6:	bf00      	nop
 80004f8:	42340000 	.word	0x42340000

080004fc <es8388_set_dac_attenuation>:

void es8388_set_dac_attenuation(uint8_t index, es_lr_t lr, float atten) {
 80004fc:	b508      	push	{r3, lr}
	atten = (atten + 96) / 0.5;
 80004fe:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8000538 <es8388_set_dac_attenuation+0x3c>
 8000502:	ee30 0a27 	vadd.f32	s0, s0, s15
 8000506:	ee30 0a00 	vadd.f32	s0, s0, s0
	int16_t v = (int16_t) atten;
 800050a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800050e:	ee10 3a10 	vmov	r3, s0
 8000512:	b21a      	sxth	r2, r3
	if(v < 0) {v = 0;}
 8000514:	2a00      	cmp	r2, #0
 8000516:	db03      	blt.n	8000520 <es8388_set_dac_attenuation+0x24>
	if(v > 192) {v = 192;}
 8000518:	2ac0      	cmp	r2, #192	; 0xc0
 800051a:	dd02      	ble.n	8000522 <es8388_set_dac_attenuation+0x26>
 800051c:	22c0      	movs	r2, #192	; 0xc0
 800051e:	e000      	b.n	8000522 <es8388_set_dac_attenuation+0x26>
	if(v < 0) {v = 0;}
 8000520:	2200      	movs	r2, #0
	v = 192 - v;
 8000522:	f1c2 02c0 	rsb	r2, r2, #192	; 0xc0
	i2c1_writeRegister8(ES8388_ADDR + index, 26 + lr, v);
 8000526:	311a      	adds	r1, #26
 8000528:	3010      	adds	r0, #16
 800052a:	b2d2      	uxtb	r2, r2
 800052c:	b2c9      	uxtb	r1, r1
 800052e:	b2c0      	uxtb	r0, r0
 8000530:	f000 faa2 	bl	8000a78 <i2c1_writeRegister8>
}
 8000534:	bd08      	pop	{r3, pc}
 8000536:	bf00      	nop
 8000538:	42c00000 	.word	0x42c00000

0800053c <es8388_set_dac_gain>:

void es8388_set_dac_gain(uint8_t index, es_dac_vspd_t vspd, es_dac_mute_t mute) {
 800053c:	b508      	push	{r3, lr}
	uint8_t reg = 0;
	reg |= (mute << 1);
 800053e:	0052      	lsls	r2, r2, #1
 8000540:	b253      	sxtb	r3, r2
 8000542:	b2d2      	uxtb	r2, r2
	if(vspd != ES_DAC_VSPD_DIS) {
 8000544:	2904      	cmp	r1, #4
 8000546:	d004      	beq.n	8000552 <es8388_set_dac_gain+0x16>
		reg |= vspd << 6;
 8000548:	ea43 1281 	orr.w	r2, r3, r1, lsl #6
 800054c:	b2d2      	uxtb	r2, r2
		reg |= 1 << 5; // enable vspd
 800054e:	f042 0220 	orr.w	r2, r2, #32
	}
	// DACLeR always 0
	i2c1_writeRegister8(ES8388_ADDR + index, 25, reg);
 8000552:	3010      	adds	r0, #16
 8000554:	2119      	movs	r1, #25
 8000556:	b2c0      	uxtb	r0, r0
 8000558:	f000 fa8e 	bl	8000a78 <i2c1_writeRegister8>
}
 800055c:	bd08      	pop	{r3, pc}
	...

08000560 <es8388_set_output_mixer>:

void es8388_set_output_mixer(uint8_t index, es_lr_t lr, es_out_dac_t dac, es_out_in_t in, float volume) {
 8000560:	b510      	push	{r4, lr}
	volume = (6 - volume) * (1/3);
 8000562:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
 8000566:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800056a:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 80005a8 <es8388_set_output_mixer+0x48>
 800056e:	ee67 7a80 	vmul.f32	s15, s15, s0
	int16_t v = (int16_t) volume;
 8000572:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000576:	ee17 4a90 	vmov	r4, s15
 800057a:	b224      	sxth	r4, r4
	if(v < 0) {v = 0;}
 800057c:	2c00      	cmp	r4, #0
 800057e:	db03      	blt.n	8000588 <es8388_set_output_mixer+0x28>
	if(v > 7) {v = 7;}
 8000580:	2c07      	cmp	r4, #7
 8000582:	dd02      	ble.n	800058a <es8388_set_output_mixer+0x2a>
 8000584:	2407      	movs	r4, #7
 8000586:	e000      	b.n	800058a <es8388_set_output_mixer+0x2a>
	if(v < 0) {v = 0;}
 8000588:	2400      	movs	r4, #0
	uint8_t reg = v;
	reg |= (dac << 7) | (in << 6);
 800058a:	019b      	lsls	r3, r3, #6
 800058c:	ea43 12c2 	orr.w	r2, r3, r2, lsl #7
 8000590:	b252      	sxtb	r2, r2
 8000592:	4322      	orrs	r2, r4
 8000594:	b2d2      	uxtb	r2, r2
	i2c1_writeRegister8(ES8388_ADDR + index, lr ? 39 : 42, reg);
 8000596:	3010      	adds	r0, #16
 8000598:	b2c0      	uxtb	r0, r0
 800059a:	b119      	cbz	r1, 80005a4 <es8388_set_output_mixer+0x44>
 800059c:	2127      	movs	r1, #39	; 0x27
 800059e:	f000 fa6b 	bl	8000a78 <i2c1_writeRegister8>
}
 80005a2:	bd10      	pop	{r4, pc}
	i2c1_writeRegister8(ES8388_ADDR + index, lr ? 39 : 42, reg);
 80005a4:	212a      	movs	r1, #42	; 0x2a
 80005a6:	e7fa      	b.n	800059e <es8388_set_output_mixer+0x3e>
 80005a8:	00000000 	.word	0x00000000

080005ac <es8388_set_pga_gain_both>:
	if(reg != initial_reg) {
		i2c1_writeRegister8(ES8388_ADDR + index, 9, reg);
	}
}

void es8388_set_pga_gain_both(uint8_t index, float gain_left, float gain_right) {
 80005ac:	b508      	push	{r3, lr}
	gain_left /= 3;
 80005ae:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80005b2:	eec0 7a07 	vdiv.f32	s15, s0, s14
	int16_t vl = (int16_t)gain_left;
 80005b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80005ba:	ee17 3a90 	vmov	r3, s15
 80005be:	b21b      	sxth	r3, r3
	if (vl < 0) {vl = 0;}
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	db03      	blt.n	80005cc <es8388_set_pga_gain_both+0x20>
	if (vl > 8) {vl = 8;}
 80005c4:	2b08      	cmp	r3, #8
 80005c6:	dd02      	ble.n	80005ce <es8388_set_pga_gain_both+0x22>
 80005c8:	2308      	movs	r3, #8
 80005ca:	e000      	b.n	80005ce <es8388_set_pga_gain_both+0x22>
	if (vl < 0) {vl = 0;}
 80005cc:	2300      	movs	r3, #0

	gain_right /= 3;
 80005ce:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80005d2:	eec0 7a87 	vdiv.f32	s15, s1, s14
	int16_t vr = (int16_t)gain_right;
 80005d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80005da:	ee17 2a90 	vmov	r2, s15
 80005de:	b212      	sxth	r2, r2
	if (vr < 0) {vr = 0;}
 80005e0:	2a00      	cmp	r2, #0
 80005e2:	db03      	blt.n	80005ec <es8388_set_pga_gain_both+0x40>
	if (vr > 8) {vr = 8;}
 80005e4:	2a08      	cmp	r2, #8
 80005e6:	dd02      	ble.n	80005ee <es8388_set_pga_gain_both+0x42>
 80005e8:	2208      	movs	r2, #8
 80005ea:	e000      	b.n	80005ee <es8388_set_pga_gain_both+0x42>
	if (vr < 0) {vr = 0;}
 80005ec:	2200      	movs	r2, #0

	i2c1_writeRegister8(ES8388_ADDR + index, 9, (vl << 4) | vr);
 80005ee:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
 80005f2:	3010      	adds	r0, #16
 80005f4:	b2d2      	uxtb	r2, r2
 80005f6:	2109      	movs	r1, #9
 80005f8:	b2c0      	uxtb	r0, r0
 80005fa:	f000 fa3d 	bl	8000a78 <i2c1_writeRegister8>
}
 80005fe:	bd08      	pop	{r3, pc}

08000600 <es8388_set_input>:

void es8388_set_input(uint8_t index, es_input_t in) {
 8000600:	b508      	push	{r3, lr}
	i2c1_writeRegister8(ES8388_ADDR + index, 10, (in << 6) | (in << 4) | (1 << 3));
 8000602:	010a      	lsls	r2, r1, #4
 8000604:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 8000608:	b252      	sxtb	r2, r2
 800060a:	f042 0208 	orr.w	r2, r2, #8
 800060e:	3010      	adds	r0, #16
 8000610:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8000614:	210a      	movs	r1, #10
 8000616:	b2c0      	uxtb	r0, r0
 8000618:	f000 fa2e 	bl	8000a78 <i2c1_writeRegister8>
}
 800061c:	bd08      	pop	{r3, pc}
	...

08000620 <es8388_set_adc_attenuation>:

void es8388_set_adc_attenuation(uint8_t index, es_lr_t lr, float atten) {
 8000620:	b508      	push	{r3, lr}
	atten = (atten + 96) / 0.5;
 8000622:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800065c <es8388_set_adc_attenuation+0x3c>
 8000626:	ee30 0a27 	vadd.f32	s0, s0, s15
 800062a:	ee30 0a00 	vadd.f32	s0, s0, s0
	int16_t v = (int16_t) atten;
 800062e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8000632:	ee10 3a10 	vmov	r3, s0
 8000636:	b21a      	sxth	r2, r3
	if(v < 0) {v = 0;}
 8000638:	2a00      	cmp	r2, #0
 800063a:	db03      	blt.n	8000644 <es8388_set_adc_attenuation+0x24>
	if(v > 192) {v = 192;}
 800063c:	2ac0      	cmp	r2, #192	; 0xc0
 800063e:	dd02      	ble.n	8000646 <es8388_set_adc_attenuation+0x26>
 8000640:	22c0      	movs	r2, #192	; 0xc0
 8000642:	e000      	b.n	8000646 <es8388_set_adc_attenuation+0x26>
	if(v < 0) {v = 0;}
 8000644:	2200      	movs	r2, #0
	v = 192 - v;
 8000646:	f1c2 02c0 	rsb	r2, r2, #192	; 0xc0
	i2c1_writeRegister8(ES8388_ADDR + index, 16 + lr, v);
 800064a:	3110      	adds	r1, #16
 800064c:	3010      	adds	r0, #16
 800064e:	b2d2      	uxtb	r2, r2
 8000650:	b2c9      	uxtb	r1, r1
 8000652:	b2c0      	uxtb	r0, r0
 8000654:	f000 fa10 	bl	8000a78 <i2c1_writeRegister8>
}
 8000658:	bd08      	pop	{r3, pc}
 800065a:	bf00      	nop
 800065c:	42c00000 	.word	0x42c00000

08000660 <es8388_init>:
void es8388_init(uint8_t index) {
 8000660:	b538      	push	{r3, r4, r5, lr}
 8000662:	ed2d 8b02 	vpush	{d8}
 8000666:	4605      	mov	r5, r0
	es8388_set_dac_gain(index, ES_DAC_VSPD_DIS, ES_DAC_GAIN_MUTE);
 8000668:	2201      	movs	r2, #1
 800066a:	2104      	movs	r1, #4
 800066c:	f7ff ff66 	bl	800053c <es8388_set_dac_gain>
	i2c1_writeRegister8(ES8388_ADDR + index, 8, 0x00); // Slave mode. Do not touch.
 8000670:	f105 0410 	add.w	r4, r5, #16
 8000674:	b2e4      	uxtb	r4, r4
 8000676:	2200      	movs	r2, #0
 8000678:	2108      	movs	r1, #8
 800067a:	4620      	mov	r0, r4
 800067c:	f000 f9fc 	bl	8000a78 <i2c1_writeRegister8>
	i2c1_writeRegister8(ES8388_ADDR + index, 2, 0xF3); // Full reset, ADC/DAC reference power down
 8000680:	22f3      	movs	r2, #243	; 0xf3
 8000682:	2102      	movs	r1, #2
 8000684:	4620      	mov	r0, r4
 8000686:	f000 f9f7 	bl	8000a78 <i2c1_writeRegister8>
	_delayMs(1);
 800068a:	2001      	movs	r0, #1
 800068c:	f7ff feda 	bl	8000444 <_delayMs>
	i2c1_writeRegister8(ES8388_ADDR + index, 2, 0x00);
 8000690:	2200      	movs	r2, #0
 8000692:	2102      	movs	r1, #2
 8000694:	4620      	mov	r0, r4
 8000696:	f000 f9ef 	bl	8000a78 <i2c1_writeRegister8>
	i2c1_writeRegister8(ES8388_ADDR + index, 43, 0x80); // Same LRCLK for ADC and DAC. Do not touch.
 800069a:	2280      	movs	r2, #128	; 0x80
 800069c:	212b      	movs	r1, #43	; 0x2b
 800069e:	4620      	mov	r0, r4
 80006a0:	f000 f9ea 	bl	8000a78 <i2c1_writeRegister8>
	i2c1_writeRegister8(ES8388_ADDR + index, 0, 0b01111110); // Enable VMID, Enable divider
 80006a4:	227e      	movs	r2, #126	; 0x7e
 80006a6:	2100      	movs	r1, #0
 80006a8:	4620      	mov	r0, r4
 80006aa:	f000 f9e5 	bl	8000a78 <i2c1_writeRegister8>
	i2c1_writeRegister8(ES8388_ADDR + index, 1, 0x40); // Power up sequence enable, No low-power mode
 80006ae:	2240      	movs	r2, #64	; 0x40
 80006b0:	2101      	movs	r1, #1
 80006b2:	4620      	mov	r0, r4
 80006b4:	f000 f9e0 	bl	8000a78 <i2c1_writeRegister8>
	i2c1_writeRegister8(ES8388_ADDR + index, 4, 0x3C); // OUT1, OUT2 enable
 80006b8:	223c      	movs	r2, #60	; 0x3c
 80006ba:	2104      	movs	r1, #4
 80006bc:	4620      	mov	r0, r4
 80006be:	f000 f9db 	bl	8000a78 <i2c1_writeRegister8>
	i2c1_writeRegister8(ES8388_ADDR + index, 23, 0b100000); // 24-bit I2S, no LRCLK clock inversion or data swap
 80006c2:	2220      	movs	r2, #32
 80006c4:	2117      	movs	r1, #23
 80006c6:	4620      	mov	r0, r4
 80006c8:	f000 f9d6 	bl	8000a78 <i2c1_writeRegister8>
	i2c1_writeRegister8(ES8388_ADDR + index, 24, 0x02); // fs*256 MCLK
 80006cc:	2202      	movs	r2, #2
 80006ce:	2118      	movs	r1, #24
 80006d0:	4620      	mov	r0, r4
 80006d2:	f000 f9d1 	bl	8000a78 <i2c1_writeRegister8>
	es8388_set_dac_attenuation(index, ES_LEFT, 0);
 80006d6:	ed9f 8a40 	vldr	s16, [pc, #256]	; 80007d8 <es8388_init+0x178>
 80006da:	eeb0 0a48 	vmov.f32	s0, s16
 80006de:	2100      	movs	r1, #0
 80006e0:	4628      	mov	r0, r5
 80006e2:	f7ff ff0b 	bl	80004fc <es8388_set_dac_attenuation>
	es8388_set_dac_attenuation(index, ES_RIGHT, 0);
 80006e6:	eeb0 0a48 	vmov.f32	s0, s16
 80006ea:	2101      	movs	r1, #1
 80006ec:	4628      	mov	r0, r5
 80006ee:	f7ff ff05 	bl	80004fc <es8388_set_dac_attenuation>
	es8388_set_dac_gain(index, ES_DAC_VSPD_DIS, ES_DAC_GAIN_NORM); // Unmute
 80006f2:	2200      	movs	r2, #0
 80006f4:	2104      	movs	r1, #4
 80006f6:	4628      	mov	r0, r5
 80006f8:	f7ff ff20 	bl	800053c <es8388_set_dac_gain>
	i2c1_writeRegister8(ES8388_ADDR + index, 38, 0b011011); 		// Left/Right 1 after PGA at LMIX/RMIX sel
 80006fc:	221b      	movs	r2, #27
 80006fe:	2126      	movs	r1, #38	; 0x26
 8000700:	4620      	mov	r0, r4
 8000702:	f000 f9b9 	bl	8000a78 <i2c1_writeRegister8>
	es8388_set_output_mixer(index, ES_LEFT, ES_OUTPUT_DAC, ES_OUTPUT_NO_IN, -15);
 8000706:	eeba 0a0e 	vmov.f32	s0, #174	; 0xc1700000 -15.0
 800070a:	2300      	movs	r3, #0
 800070c:	2201      	movs	r2, #1
 800070e:	4619      	mov	r1, r3
 8000710:	4628      	mov	r0, r5
 8000712:	f7ff ff25 	bl	8000560 <es8388_set_output_mixer>
	es8388_set_output_mixer(index, ES_RIGHT, ES_OUTPUT_DAC, ES_OUTPUT_NO_IN, -15);
 8000716:	eeba 0a0e 	vmov.f32	s0, #174	; 0xc1700000 -15.0
 800071a:	2300      	movs	r3, #0
 800071c:	2201      	movs	r2, #1
 800071e:	4611      	mov	r1, r2
 8000720:	4628      	mov	r0, r5
 8000722:	f7ff ff1d 	bl	8000560 <es8388_set_output_mixer>
	es8388_set_output_volume(index, 0, ES_LEFT, 0);
 8000726:	eeb0 0a48 	vmov.f32	s0, s16
 800072a:	2200      	movs	r2, #0
 800072c:	4611      	mov	r1, r2
 800072e:	4628      	mov	r0, r5
 8000730:	f7ff fec2 	bl	80004b8 <es8388_set_output_volume>
	es8388_set_output_volume(index, 0, ES_RIGHT, 0);
 8000734:	eeb0 0a48 	vmov.f32	s0, s16
 8000738:	2201      	movs	r2, #1
 800073a:	2100      	movs	r1, #0
 800073c:	4628      	mov	r0, r5
 800073e:	f7ff febb 	bl	80004b8 <es8388_set_output_volume>
	es8388_set_output_volume(index, 1, ES_LEFT, 0);
 8000742:	eeb0 0a48 	vmov.f32	s0, s16
 8000746:	2200      	movs	r2, #0
 8000748:	2101      	movs	r1, #1
 800074a:	4628      	mov	r0, r5
 800074c:	f7ff feb4 	bl	80004b8 <es8388_set_output_volume>
	es8388_set_output_volume(index, 1, ES_RIGHT, 0);
 8000750:	eeb0 0a48 	vmov.f32	s0, s16
 8000754:	2201      	movs	r2, #1
 8000756:	4611      	mov	r1, r2
 8000758:	4628      	mov	r0, r5
 800075a:	f7ff fead 	bl	80004b8 <es8388_set_output_volume>
	i2c1_writeRegister8(ES8388_ADDR + index, 3, 0xFF);
 800075e:	22ff      	movs	r2, #255	; 0xff
 8000760:	2103      	movs	r1, #3
 8000762:	4620      	mov	r0, r4
 8000764:	f000 f988 	bl	8000a78 <i2c1_writeRegister8>
	es8388_set_pga_gain_both(index, 0, 0);
 8000768:	eef0 0a48 	vmov.f32	s1, s16
 800076c:	eeb0 0a48 	vmov.f32	s0, s16
 8000770:	4628      	mov	r0, r5
 8000772:	f7ff ff1b 	bl	80005ac <es8388_set_pga_gain_both>
	es8388_set_input(index, ES_INPUT_1);
 8000776:	2100      	movs	r1, #0
 8000778:	4628      	mov	r0, r5
 800077a:	f7ff ff41 	bl	8000600 <es8388_set_input>
    i2c1_writeRegister8(ES8388_ADDR + index, 11, 0x82);
 800077e:	2282      	movs	r2, #130	; 0x82
 8000780:	210b      	movs	r1, #11
 8000782:	4620      	mov	r0, r4
 8000784:	f000 f978 	bl	8000a78 <i2c1_writeRegister8>
    i2c1_writeRegister8(ES8388_ADDR + index, 12, 0b10000); // 24-bit
 8000788:	2210      	movs	r2, #16
 800078a:	210c      	movs	r1, #12
 800078c:	4620      	mov	r0, r4
 800078e:	f000 f973 	bl	8000a78 <i2c1_writeRegister8>
    i2c1_writeRegister8(ES8388_ADDR + index, 13, 0x02); // ADCFsMode,single SPEED,RATIO=256, do not touch!
 8000792:	2202      	movs	r2, #2
 8000794:	210d      	movs	r1, #13
 8000796:	4620      	mov	r0, r4
 8000798:	f000 f96e 	bl	8000a78 <i2c1_writeRegister8>
    es8388_set_adc_attenuation(index, ES_LEFT, 0);
 800079c:	eeb0 0a48 	vmov.f32	s0, s16
 80007a0:	2100      	movs	r1, #0
 80007a2:	4628      	mov	r0, r5
 80007a4:	f7ff ff3c 	bl	8000620 <es8388_set_adc_attenuation>
    es8388_set_adc_attenuation(index, ES_RIGHT, 0);
 80007a8:	eeb0 0a48 	vmov.f32	s0, s16
 80007ac:	2101      	movs	r1, #1
 80007ae:	4628      	mov	r0, r5
 80007b0:	f7ff ff36 	bl	8000620 <es8388_set_adc_attenuation>
    i2c1_writeRegister8(ES8388_ADDR + index, 17, 0x00);
 80007b4:	2200      	movs	r2, #0
 80007b6:	2111      	movs	r1, #17
 80007b8:	4620      	mov	r0, r4
 80007ba:	f000 f95d 	bl	8000a78 <i2c1_writeRegister8>
	i2c1_writeRegister8(ES8388_ADDR + index, 3, 0x09); // ADC power up, input power up, mic down, adc bias up, not low power
 80007be:	2209      	movs	r2, #9
 80007c0:	2103      	movs	r1, #3
 80007c2:	4620      	mov	r0, r4
 80007c4:	f000 f958 	bl	8000a78 <i2c1_writeRegister8>
	i2c1_writeRegister8(ES8388_ADDR + index, 2, 0x00); // Full DAC power-up, no ADC
 80007c8:	2200      	movs	r2, #0
 80007ca:	2102      	movs	r1, #2
 80007cc:	4620      	mov	r0, r4
 80007ce:	f000 f953 	bl	8000a78 <i2c1_writeRegister8>
}
 80007d2:	ecbd 8b02 	vpop	{d8}
 80007d6:	bd38      	pop	{r3, r4, r5, pc}
 80007d8:	00000000 	.word	0x00000000

080007dc <i2c1_init>:
void i2c1_nack_clear() {
	I2C1->ICR |= I2C_ICR_NACKCF;
}

// I2C init
void i2c1_init() {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
	_i2c1_error = 0;
 80007e2:	4b48      	ldr	r3, [pc, #288]	; (8000904 <i2c1_init+0x128>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]

	// I2C @ pins PC9, PA8
	RCC->AHB4ENR |= RCC_AHB4ENR_GPIOBEN;
 80007e8:	4b47      	ldr	r3, [pc, #284]	; (8000908 <i2c1_init+0x12c>)
 80007ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ee:	4a46      	ldr	r2, [pc, #280]	; (8000908 <i2c1_init+0x12c>)
 80007f0:	f043 0302 	orr.w	r3, r3, #2
 80007f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	MODIFY_REG(GPIOB->MODER, GPIO_MODER_MODE6_Msk, 0b10 << GPIO_MODER_MODE6_Pos);
 80007f8:	4b44      	ldr	r3, [pc, #272]	; (800090c <i2c1_init+0x130>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000800:	4a42      	ldr	r2, [pc, #264]	; (800090c <i2c1_init+0x130>)
 8000802:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000806:	6013      	str	r3, [r2, #0]
	MODIFY_REG(GPIOB->MODER, GPIO_MODER_MODE7_Msk, 0b10 << GPIO_MODER_MODE7_Pos);
 8000808:	4b40      	ldr	r3, [pc, #256]	; (800090c <i2c1_init+0x130>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000810:	4a3e      	ldr	r2, [pc, #248]	; (800090c <i2c1_init+0x130>)
 8000812:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000816:	6013      	str	r3, [r2, #0]
	MODIFY_REG(GPIOB->OTYPER, GPIO_OTYPER_OT6_Msk, 0b1 << GPIO_OTYPER_OT6_Pos);
 8000818:	4b3c      	ldr	r3, [pc, #240]	; (800090c <i2c1_init+0x130>)
 800081a:	685b      	ldr	r3, [r3, #4]
 800081c:	4a3b      	ldr	r2, [pc, #236]	; (800090c <i2c1_init+0x130>)
 800081e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000822:	6053      	str	r3, [r2, #4]
	MODIFY_REG(GPIOB->OTYPER, GPIO_OTYPER_OT7_Msk, 0b1 << GPIO_OTYPER_OT7_Pos);
 8000824:	4b39      	ldr	r3, [pc, #228]	; (800090c <i2c1_init+0x130>)
 8000826:	685b      	ldr	r3, [r3, #4]
 8000828:	4a38      	ldr	r2, [pc, #224]	; (800090c <i2c1_init+0x130>)
 800082a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800082e:	6053      	str	r3, [r2, #4]
	MODIFY_REG(GPIOB->OSPEEDR, GPIO_OSPEEDR_OSPEED6_Msk, 0b11 << GPIO_OSPEEDR_OSPEED6_Pos);
 8000830:	4b36      	ldr	r3, [pc, #216]	; (800090c <i2c1_init+0x130>)
 8000832:	689b      	ldr	r3, [r3, #8]
 8000834:	4a35      	ldr	r2, [pc, #212]	; (800090c <i2c1_init+0x130>)
 8000836:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800083a:	6093      	str	r3, [r2, #8]
	MODIFY_REG(GPIOB->OSPEEDR, GPIO_OSPEEDR_OSPEED7_Msk, 0b11 << GPIO_OSPEEDR_OSPEED7_Pos);
 800083c:	4b33      	ldr	r3, [pc, #204]	; (800090c <i2c1_init+0x130>)
 800083e:	689b      	ldr	r3, [r3, #8]
 8000840:	4a32      	ldr	r2, [pc, #200]	; (800090c <i2c1_init+0x130>)
 8000842:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000846:	6093      	str	r3, [r2, #8]
	MODIFY_REG(GPIOB->AFR[0], GPIO_AFRL_AFSEL6_Msk, 4 << GPIO_AFRL_AFSEL6_Pos);
 8000848:	4b30      	ldr	r3, [pc, #192]	; (800090c <i2c1_init+0x130>)
 800084a:	6a1b      	ldr	r3, [r3, #32]
 800084c:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000850:	4a2e      	ldr	r2, [pc, #184]	; (800090c <i2c1_init+0x130>)
 8000852:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000856:	6213      	str	r3, [r2, #32]
	MODIFY_REG(GPIOB->AFR[0], GPIO_AFRL_AFSEL7_Msk, 4 << GPIO_AFRL_AFSEL7_Pos);
 8000858:	4b2c      	ldr	r3, [pc, #176]	; (800090c <i2c1_init+0x130>)
 800085a:	6a1b      	ldr	r3, [r3, #32]
 800085c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000860:	4a2a      	ldr	r2, [pc, #168]	; (800090c <i2c1_init+0x130>)
 8000862:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000866:	6213      	str	r3, [r2, #32]

	//NVIC_SetPriority(I2C1_ER_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 1));
	//NVIC_EnableIRQ(I2C1_ER_IRQn);

	// Enable I2C clock
	RCC->APB1LENR |= RCC_APB1LENR_I2C1EN;
 8000868:	4b27      	ldr	r3, [pc, #156]	; (8000908 <i2c1_init+0x12c>)
 800086a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800086e:	4a26      	ldr	r2, [pc, #152]	; (8000908 <i2c1_init+0x12c>)
 8000870:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000874:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
	RCC->APB1LRSTR |= RCC_APB1LRSTR_I2C1RST;
 8000878:	4b23      	ldr	r3, [pc, #140]	; (8000908 <i2c1_init+0x12c>)
 800087a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800087e:	4a22      	ldr	r2, [pc, #136]	; (8000908 <i2c1_init+0x12c>)
 8000880:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000884:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	_delayMs(1);
 8000888:	2001      	movs	r0, #1
 800088a:	f7ff fddb 	bl	8000444 <_delayMs>
	RCC->APB1LRSTR &= ~RCC_APB1LRSTR_I2C1RST;
 800088e:	4b1e      	ldr	r3, [pc, #120]	; (8000908 <i2c1_init+0x12c>)
 8000890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000894:	4a1c      	ldr	r2, [pc, #112]	; (8000908 <i2c1_init+0x12c>)
 8000896:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800089a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	I2C1->OAR2 &= ~I2C_OAR2_OA2EN; // Disable dual address
 800089e:	4b1c      	ldr	r3, [pc, #112]	; (8000910 <i2c1_init+0x134>)
 80008a0:	68db      	ldr	r3, [r3, #12]
 80008a2:	4a1b      	ldr	r2, [pc, #108]	; (8000910 <i2c1_init+0x134>)
 80008a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80008a8:	60d3      	str	r3, [r2, #12]
	// No global call, enable clock stretch, disable I2C, enable analog filter
	MODIFY_REG(I2C1->CR1, I2C_CR1_GCEN | I2C_CR1_NOSTRETCH | I2C_CR1_PE | I2C_CR1_ANFOFF, 0);
 80008aa:	4b19      	ldr	r3, [pc, #100]	; (8000910 <i2c1_init+0x134>)
 80008ac:	681a      	ldr	r2, [r3, #0]
 80008ae:	4918      	ldr	r1, [pc, #96]	; (8000910 <i2c1_init+0x134>)
 80008b0:	4b18      	ldr	r3, [pc, #96]	; (8000914 <i2c1_init+0x138>)
 80008b2:	4013      	ands	r3, r2
 80008b4:	600b      	str	r3, [r1, #0]
	I2C1->TIMINGR = 0x307076AD; // 0x00B03FD8 for fast mode (400 kHz)
 80008b6:	4b16      	ldr	r3, [pc, #88]	; (8000910 <i2c1_init+0x134>)
 80008b8:	4a17      	ldr	r2, [pc, #92]	; (8000918 <i2c1_init+0x13c>)
 80008ba:	611a      	str	r2, [r3, #16]

	I2C1->OAR1 = 0;
 80008bc:	4b14      	ldr	r3, [pc, #80]	; (8000910 <i2c1_init+0x134>)
 80008be:	2200      	movs	r2, #0
 80008c0:	609a      	str	r2, [r3, #8]
	I2C1->CR1 |= I2C_CR1_PE;
 80008c2:	4b13      	ldr	r3, [pc, #76]	; (8000910 <i2c1_init+0x134>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4a12      	ldr	r2, [pc, #72]	; (8000910 <i2c1_init+0x134>)
 80008c8:	f043 0301 	orr.w	r3, r3, #1
 80008cc:	6013      	str	r3, [r2, #0]
	I2C1->CR2 &= ~I2C_CR2_NACK;
 80008ce:	4b10      	ldr	r3, [pc, #64]	; (8000910 <i2c1_init+0x134>)
 80008d0:	685b      	ldr	r3, [r3, #4]
 80008d2:	4a0f      	ldr	r2, [pc, #60]	; (8000910 <i2c1_init+0x134>)
 80008d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80008d8:	6053      	str	r3, [r2, #4]

	I2C1->CR1 |= (I2C_CR1_NACKIE | I2C_CR1_ERRIE);
 80008da:	4b0d      	ldr	r3, [pc, #52]	; (8000910 <i2c1_init+0x134>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4a0c      	ldr	r2, [pc, #48]	; (8000910 <i2c1_init+0x134>)
 80008e0:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80008e4:	6013      	str	r3, [r2, #0]
	for(uint8_t i = 0; i < 0xFE; i++) {}
 80008e6:	2300      	movs	r3, #0
 80008e8:	71fb      	strb	r3, [r7, #7]
 80008ea:	e002      	b.n	80008f2 <i2c1_init+0x116>
 80008ec:	79fb      	ldrb	r3, [r7, #7]
 80008ee:	3301      	adds	r3, #1
 80008f0:	71fb      	strb	r3, [r7, #7]
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	2bfd      	cmp	r3, #253	; 0xfd
 80008f6:	d9f9      	bls.n	80008ec <i2c1_init+0x110>
}
 80008f8:	bf00      	nop
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	240001bc 	.word	0x240001bc
 8000908:	58024400 	.word	0x58024400
 800090c:	58020400 	.word	0x58020400
 8000910:	40005400 	.word	0x40005400
 8000914:	fff5effe 	.word	0xfff5effe
 8000918:	307076ad 	.word	0x307076ad

0800091c <I2C1_ER_IRQHandler>:
#pragma GCC pop_options

// I2C Error IRQ
void I2C1_ER_IRQHandler(void)
{
	_i2c1_error |= (I2C1->ISR) & (I2C_ISR_BERR | I2C_ISR_ARLO | I2C_ISR_OVR | I2C_ISR_TIMEOUT | I2C_ISR_PECERR);
 800091c:	4b06      	ldr	r3, [pc, #24]	; (8000938 <I2C1_ER_IRQHandler+0x1c>)
 800091e:	6999      	ldr	r1, [r3, #24]
 8000920:	f401 51f8 	and.w	r1, r1, #7936	; 0x1f00
 8000924:	4805      	ldr	r0, [pc, #20]	; (800093c <I2C1_ER_IRQHandler+0x20>)
 8000926:	6802      	ldr	r2, [r0, #0]
 8000928:	430a      	orrs	r2, r1
 800092a:	6002      	str	r2, [r0, #0]
	// SmBus errors are just ignored
	I2C1->ICR |= I2C_ICR_BERRCF | I2C_ICR_ARLOCF | I2C_ICR_OVRCF | I2C_ICR_PECCF | I2C_ICR_TIMOUTCF | I2C_ICR_NACKCF;
 800092c:	69d9      	ldr	r1, [r3, #28]
 800092e:	f641 7210 	movw	r2, #7952	; 0x1f10
 8000932:	430a      	orrs	r2, r1
 8000934:	61da      	str	r2, [r3, #28]
}
 8000936:	4770      	bx	lr
 8000938:	40005400 	.word	0x40005400
 800093c:	240001bc 	.word	0x240001bc

08000940 <i2c1_waitBit>:
}

// Waits for a certain bit in I2C1->SR1 with a timeout
uint32_t i2c1_waitBit(uint32_t bit) {
	//_i2c1_error = 0;
	uint32_t timeOut = 0;
 8000940:	2300      	movs	r3, #0
	while(((I2C1->ISR) & bit) != bit) {
 8000942:	4a0b      	ldr	r2, [pc, #44]	; (8000970 <i2c1_waitBit+0x30>)
 8000944:	6992      	ldr	r2, [r2, #24]
 8000946:	ea30 0202 	bics.w	r2, r0, r2
 800094a:	d00d      	beq.n	8000968 <i2c1_waitBit+0x28>
		if(_i2c1_error != 0) {break;}
 800094c:	4a09      	ldr	r2, [pc, #36]	; (8000974 <i2c1_waitBit+0x34>)
 800094e:	6812      	ldr	r2, [r2, #0]
 8000950:	b952      	cbnz	r2, 8000968 <i2c1_waitBit+0x28>
		if((timeOut++ > I2C1_TMO_VAL) && (I2C1_TMO_VAL != 0)) {
 8000952:	1c59      	adds	r1, r3, #1
 8000954:	4a08      	ldr	r2, [pc, #32]	; (8000978 <i2c1_waitBit+0x38>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d801      	bhi.n	800095e <i2c1_waitBit+0x1e>
 800095a:	460b      	mov	r3, r1
 800095c:	e7f1      	b.n	8000942 <i2c1_waitBit+0x2>
			_i2c1_error |= I2C_ERR_TMO;
 800095e:	4a05      	ldr	r2, [pc, #20]	; (8000974 <i2c1_waitBit+0x34>)
 8000960:	6813      	ldr	r3, [r2, #0]
 8000962:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000966:	6013      	str	r3, [r2, #0]
			break;
		}
	}
	return _i2c1_error;
 8000968:	4b02      	ldr	r3, [pc, #8]	; (8000974 <i2c1_waitBit+0x34>)
 800096a:	6818      	ldr	r0, [r3, #0]
}
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	40005400 	.word	0x40005400
 8000974:	240001bc 	.word	0x240001bc
 8000978:	000927c0 	.word	0x000927c0

0800097c <i2c1_transmission_start>:

// Manual transmission functions
uint8_t i2c1_transmission_busy() {
	return ((I2C1->ISR) & I2C_ISR_BUSY) == I2C_ISR_BUSY ? 1 : 0;
}
uint32_t i2c1_transmission_start(uint8_t addr, _i2c_wrmode mode, uint16_t busy_timeout, uint8_t nbytes) {
 800097c:	b410      	push	{r4}
	// Return if any error occurred earlier immediately, wait while I2C is busy
	if(_i2c1_error != 0) {return _i2c1_error;}
 800097e:	4c22      	ldr	r4, [pc, #136]	; (8000a08 <i2c1_transmission_start+0x8c>)
 8000980:	6824      	ldr	r4, [r4, #0]
 8000982:	b944      	cbnz	r4, 8000996 <i2c1_transmission_start+0x1a>
	uint16_t tmo_busy = busy_timeout;
	while((((I2C1->ISR) & I2C_ISR_BUSY) == I2C_ISR_BUSY) && (tmo_busy > 0)) {tmo_busy--;}
 8000984:	4c21      	ldr	r4, [pc, #132]	; (8000a0c <i2c1_transmission_start+0x90>)
 8000986:	69a4      	ldr	r4, [r4, #24]
 8000988:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 800098c:	d006      	beq.n	800099c <i2c1_transmission_start+0x20>
 800098e:	b12a      	cbz	r2, 800099c <i2c1_transmission_start+0x20>
 8000990:	3a01      	subs	r2, #1
 8000992:	b292      	uxth	r2, r2
 8000994:	e7f6      	b.n	8000984 <i2c1_transmission_start+0x8>
	if(_i2c1_error != 0) {return _i2c1_error;}
 8000996:	4b1c      	ldr	r3, [pc, #112]	; (8000a08 <i2c1_transmission_start+0x8c>)
 8000998:	6818      	ldr	r0, [r3, #0]
 800099a:	e029      	b.n	80009f0 <i2c1_transmission_start+0x74>
	if(tmo_busy == 0) {_i2c1_error |= I2C_ERR_BUSY;}
 800099c:	b922      	cbnz	r2, 80009a8 <i2c1_transmission_start+0x2c>
 800099e:	4c1a      	ldr	r4, [pc, #104]	; (8000a08 <i2c1_transmission_start+0x8c>)
 80009a0:	6822      	ldr	r2, [r4, #0]
 80009a2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80009a6:	6022      	str	r2, [r4, #0]

	if(_i2c1_error != 0) {return _i2c1_error;}
 80009a8:	4a17      	ldr	r2, [pc, #92]	; (8000a08 <i2c1_transmission_start+0x8c>)
 80009aa:	6812      	ldr	r2, [r2, #0]
 80009ac:	bb1a      	cbnz	r2, 80009f6 <i2c1_transmission_start+0x7a>
	// Enable ACK
	//MODIFY_REG(I2C1->CR1, I2C_CR1_POS | I2C_CR1_ACK, I2C_CR1_ACK);

	// Config the I2C
	MODIFY_REG(I2C1->CR2, I2C_CR2_NBYTES_Msk, (nbytes) << I2C_CR2_NBYTES_Pos);
 80009ae:	4a17      	ldr	r2, [pc, #92]	; (8000a0c <i2c1_transmission_start+0x90>)
 80009b0:	6854      	ldr	r4, [r2, #4]
 80009b2:	f424 047f 	bic.w	r4, r4, #16711680	; 0xff0000
 80009b6:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80009ba:	6053      	str	r3, [r2, #4]
	I2C1->CR2 |= I2C_CR2_AUTOEND;
 80009bc:	6853      	ldr	r3, [r2, #4]
 80009be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009c2:	6053      	str	r3, [r2, #4]
	addr <<= 1; // Last bit is don't care
 80009c4:	0040      	lsls	r0, r0, #1
 80009c6:	b2c0      	uxtb	r0, r0
	MODIFY_REG(I2C1->CR2, I2C_CR2_SADD_Msk, addr << I2C_CR2_SADD_Pos);
 80009c8:	6854      	ldr	r4, [r2, #4]
 80009ca:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <i2c1_transmission_start+0x94>)
 80009cc:	4023      	ands	r3, r4
 80009ce:	4318      	orrs	r0, r3
 80009d0:	6050      	str	r0, [r2, #4]
	if(mode == I2C_READ) {I2C1->CR2 |= I2C_CR2_RD_WRN;}
 80009d2:	2901      	cmp	r1, #1
 80009d4:	d012      	beq.n	80009fc <i2c1_transmission_start+0x80>
	else {I2C1->CR2 &= ~I2C_CR2_RD_WRN;}
 80009d6:	4a0d      	ldr	r2, [pc, #52]	; (8000a0c <i2c1_transmission_start+0x90>)
 80009d8:	6853      	ldr	r3, [r2, #4]
 80009da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80009de:	6053      	str	r3, [r2, #4]


	// Send start condition
	I2C1->CR2 |= I2C_CR2_START;
 80009e0:	4b0a      	ldr	r3, [pc, #40]	; (8000a0c <i2c1_transmission_start+0x90>)
 80009e2:	685a      	ldr	r2, [r3, #4]
 80009e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80009e8:	605a      	str	r2, [r3, #4]
	(void) I2C1->ISR;
 80009ea:	699b      	ldr	r3, [r3, #24]
	return _i2c1_error;
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <i2c1_transmission_start+0x8c>)
 80009ee:	6818      	ldr	r0, [r3, #0]
}
 80009f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80009f4:	4770      	bx	lr
	if(_i2c1_error != 0) {return _i2c1_error;}
 80009f6:	4b04      	ldr	r3, [pc, #16]	; (8000a08 <i2c1_transmission_start+0x8c>)
 80009f8:	6818      	ldr	r0, [r3, #0]
 80009fa:	e7f9      	b.n	80009f0 <i2c1_transmission_start+0x74>
	if(mode == I2C_READ) {I2C1->CR2 |= I2C_CR2_RD_WRN;}
 80009fc:	6853      	ldr	r3, [r2, #4]
 80009fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a02:	6053      	str	r3, [r2, #4]
 8000a04:	e7ec      	b.n	80009e0 <i2c1_transmission_start+0x64>
 8000a06:	bf00      	nop
 8000a08:	240001bc 	.word	0x240001bc
 8000a0c:	40005400 	.word	0x40005400
 8000a10:	fffffc00 	.word	0xfffffc00

08000a14 <i2c1_transmission_end>:
uint32_t i2c1_transmission_end(_i2c_wrmode mode) {
 8000a14:	b508      	push	{r3, lr}
	//RETERR(i2c1_waitBit(I2C_ISR_TC), _i2c1_error);
	//I2C1->CR2 |= I2C_CR2_STOP;
	return i2c1_waitBit(I2C_ISR_STOPF);
 8000a16:	2020      	movs	r0, #32
 8000a18:	f7ff ff92 	bl	8000940 <i2c1_waitBit>
}
 8000a1c:	bd08      	pop	{r3, pc}
	...

08000a20 <i2c1_transmission_write8>:
uint32_t i2c1_transmission_write8(uint8_t byte) {
 8000a20:	b510      	push	{r4, lr}
 8000a22:	4604      	mov	r4, r0
	i2c1_waitBit(I2C_ISR_TXIS);
 8000a24:	2002      	movs	r0, #2
 8000a26:	f7ff ff8b 	bl	8000940 <i2c1_waitBit>
	I2C1->TXDR = byte;
 8000a2a:	4b02      	ldr	r3, [pc, #8]	; (8000a34 <i2c1_transmission_write8+0x14>)
 8000a2c:	629c      	str	r4, [r3, #40]	; 0x28
	return 0;
}
 8000a2e:	2000      	movs	r0, #0
 8000a30:	bd10      	pop	{r4, pc}
 8000a32:	bf00      	nop
 8000a34:	40005400 	.word	0x40005400

08000a38 <i2c1_write_blocking>:
void i2c1_transmission_ack_disable() {
	//MODIFY_REG(I2C1->CR1, I2C_CR1_POS | I2C_CR1_ACK, 0);
}

// Main write function
uint32_t i2c1_write_blocking(uint8_t addr, uint16_t sz, const volatile uint8_t* buf, uint16_t busy_timeout) {
 8000a38:	b570      	push	{r4, r5, r6, lr}
 8000a3a:	460d      	mov	r5, r1
 8000a3c:	4616      	mov	r6, r2
 8000a3e:	461a      	mov	r2, r3
	// Transmission start
	RETERR(i2c1_transmission_start(addr, I2C_WRITE, busy_timeout, sz), _i2c1_error);
 8000a40:	b2cb      	uxtb	r3, r1
 8000a42:	2100      	movs	r1, #0
 8000a44:	f7ff ff9a 	bl	800097c <i2c1_transmission_start>
 8000a48:	b948      	cbnz	r0, 8000a5e <i2c1_write_blocking+0x26>

	// Send data
	for(uint16_t i = 0; i < sz; i++) {
 8000a4a:	2400      	movs	r4, #0
 8000a4c:	42ac      	cmp	r4, r5
 8000a4e:	d20c      	bcs.n	8000a6a <i2c1_write_blocking+0x32>
		RETERR(i2c1_transmission_write8(buf[i]), _i2c1_error);
 8000a50:	5d30      	ldrb	r0, [r6, r4]
 8000a52:	f7ff ffe5 	bl	8000a20 <i2c1_transmission_write8>
 8000a56:	b928      	cbnz	r0, 8000a64 <i2c1_write_blocking+0x2c>
	for(uint16_t i = 0; i < sz; i++) {
 8000a58:	3401      	adds	r4, #1
 8000a5a:	b2a4      	uxth	r4, r4
 8000a5c:	e7f6      	b.n	8000a4c <i2c1_write_blocking+0x14>
	RETERR(i2c1_transmission_start(addr, I2C_WRITE, busy_timeout, sz), _i2c1_error);
 8000a5e:	4b05      	ldr	r3, [pc, #20]	; (8000a74 <i2c1_write_blocking+0x3c>)
 8000a60:	6818      	ldr	r0, [r3, #0]
	}

	return i2c1_transmission_end(I2C_WRITE);
}
 8000a62:	bd70      	pop	{r4, r5, r6, pc}
		RETERR(i2c1_transmission_write8(buf[i]), _i2c1_error);
 8000a64:	4b03      	ldr	r3, [pc, #12]	; (8000a74 <i2c1_write_blocking+0x3c>)
 8000a66:	6818      	ldr	r0, [r3, #0]
 8000a68:	e7fb      	b.n	8000a62 <i2c1_write_blocking+0x2a>
	return i2c1_transmission_end(I2C_WRITE);
 8000a6a:	2000      	movs	r0, #0
 8000a6c:	f7ff ffd2 	bl	8000a14 <i2c1_transmission_end>
 8000a70:	e7f7      	b.n	8000a62 <i2c1_write_blocking+0x2a>
 8000a72:	bf00      	nop
 8000a74:	240001bc 	.word	0x240001bc

08000a78 <i2c1_writeRegister8>:
	RETERR(i2c1_write8(addr, reg), _i2c1_error);
	//for(uint8_t i = 0; i < 0xFF; i++) {}
	return i2c1_read8(addr);
}

uint32_t i2c1_writeRegister8(uint8_t addr, uint8_t reg, uint8_t val) {
 8000a78:	b500      	push	{lr}
 8000a7a:	b083      	sub	sp, #12
	uint8_t sndBuf[] = {reg, val};
 8000a7c:	f88d 1004 	strb.w	r1, [sp, #4]
 8000a80:	f88d 2005 	strb.w	r2, [sp, #5]
	return i2c1_write_blocking(addr, 2, sndBuf, 5000);
 8000a84:	f241 3388 	movw	r3, #5000	; 0x1388
 8000a88:	aa01      	add	r2, sp, #4
 8000a8a:	2102      	movs	r1, #2
 8000a8c:	f7ff ffd4 	bl	8000a38 <i2c1_write_blocking>
}
 8000a90:	b003      	add	sp, #12
 8000a92:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000a98 <i2sclock_init>:
#include <main.h>
#include <drv/i2s_clock.h>
#include <drv/sai.h>

void i2sclock_init() {
	RCC->AHB4ENR |= RCC_AHB4ENR_GPIOCEN;
 8000a98:	4a1f      	ldr	r2, [pc, #124]	; (8000b18 <i2sclock_init+0x80>)
 8000a9a:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
 8000a9e:	f043 0304 	orr.w	r3, r3, #4
 8000aa2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	MODIFY_REG(GPIOC->MODER, GPIO_MODER_MODE9_Msk, 0b10 << GPIO_MODER_MODE9_Pos);
 8000aa6:	4b1d      	ldr	r3, [pc, #116]	; (8000b1c <i2sclock_init+0x84>)
 8000aa8:	6819      	ldr	r1, [r3, #0]
 8000aaa:	f421 2140 	bic.w	r1, r1, #786432	; 0xc0000
 8000aae:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
 8000ab2:	6019      	str	r1, [r3, #0]
	MODIFY_REG(GPIOC->OTYPER, GPIO_OTYPER_OT9_Msk, 0b0 << GPIO_OTYPER_OT9_Pos);
 8000ab4:	6859      	ldr	r1, [r3, #4]
 8000ab6:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8000aba:	6059      	str	r1, [r3, #4]
	MODIFY_REG(GPIOC->OSPEEDR, GPIO_OSPEEDR_OSPEED9_Msk, 0b11 << GPIO_OSPEEDR_OSPEED9_Pos);
 8000abc:	6899      	ldr	r1, [r3, #8]
 8000abe:	f441 2140 	orr.w	r1, r1, #786432	; 0xc0000
 8000ac2:	6099      	str	r1, [r3, #8]
	MODIFY_REG(GPIOC->AFR[1], GPIO_AFRH_AFSEL9_Msk, 5 << GPIO_AFRH_AFSEL9_Pos);
 8000ac4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000ac6:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 8000aca:	f041 0150 	orr.w	r1, r1, #80	; 0x50
 8000ace:	6259      	str	r1, [r3, #36]	; 0x24

	MODIFY_REG(GPIOC->MODER, GPIO_MODER_MODE8_Msk, 0b01 << GPIO_MODER_MODE8_Pos);
 8000ad0:	6819      	ldr	r1, [r3, #0]
 8000ad2:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 8000ad6:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8000ada:	6019      	str	r1, [r3, #0]
	MODIFY_REG(GPIOC->OTYPER, GPIO_OTYPER_OT8_Msk, 0b0 << GPIO_OTYPER_OT8_Pos);
 8000adc:	6859      	ldr	r1, [r3, #4]
 8000ade:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8000ae2:	6059      	str	r1, [r3, #4]
	MODIFY_REG(GPIOC->OSPEEDR, GPIO_OSPEEDR_OSPEED8_Msk, 0b11 << GPIO_OSPEEDR_OSPEED8_Pos);
 8000ae4:	6899      	ldr	r1, [r3, #8]
 8000ae6:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
 8000aea:	6099      	str	r1, [r3, #8]

	GPIOC->BSRR |= GPIO_BSRR_BS8;
 8000aec:	6999      	ldr	r1, [r3, #24]
 8000aee:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8000af2:	6199      	str	r1, [r3, #24]

	RCC->D2CCIP1R |= 0b011 << RCC_D2CCIP1R_SAI1SEL_Pos;
 8000af4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8000af6:	f043 0303 	orr.w	r3, r3, #3
 8000afa:	6513      	str	r3, [r2, #80]	; 0x50
	RCC->D2CCIP1R |= 0b011 << RCC_D2CCIP1R_SAI23SEL_Pos;
 8000afc:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8000afe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000b02:	6513      	str	r3, [r2, #80]	; 0x50
	RCC->D3CCIPR |= 0b011 << RCC_D3CCIPR_SAI4ASEL_Pos;
 8000b04:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8000b06:	f443 03c0 	orr.w	r3, r3, #6291456	; 0x600000
 8000b0a:	6593      	str	r3, [r2, #88]	; 0x58
	RCC->D3CCIPR |= 0b011 << RCC_D3CCIPR_SAI4BSEL_Pos;
 8000b0c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8000b0e:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8000b12:	6593      	str	r3, [r2, #88]	; 0x58
}
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	58024400 	.word	0x58024400
 8000b1c:	58020800 	.word	0x58020800

08000b20 <i2sclock_select>:
void i2sclock_select(uint32_t freq) {
 8000b20:	b538      	push	{r3, r4, r5, lr}
	uint8_t div = 4;
	if (freq < 11025 || freq > 192000) {return;}
 8000b22:	4b3b      	ldr	r3, [pc, #236]	; (8000c10 <i2sclock_select+0xf0>)
 8000b24:	4403      	add	r3, r0
 8000b26:	4a3b      	ldr	r2, [pc, #236]	; (8000c14 <i2sclock_select+0xf4>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d854      	bhi.n	8000bd6 <i2sclock_select+0xb6>
	if(freq % 12000 == 0) {
 8000b2c:	4b3a      	ldr	r3, [pc, #232]	; (8000c18 <i2sclock_select+0xf8>)
 8000b2e:	fba3 2300 	umull	r2, r3, r3, r0
 8000b32:	0a1b      	lsrs	r3, r3, #8
 8000b34:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8000b38:	fb02 0313 	mls	r3, r2, r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d14b      	bne.n	8000bd8 <i2sclock_select+0xb8>
		GPIOC->BSRR |= GPIO_BSRR_BS8;
 8000b40:	4a36      	ldr	r2, [pc, #216]	; (8000c1c <i2sclock_select+0xfc>)
 8000b42:	6993      	ldr	r3, [r2, #24]
 8000b44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b48:	6193      	str	r3, [r2, #24]
		div = 192000 / freq;
 8000b4a:	4c35      	ldr	r4, [pc, #212]	; (8000c20 <i2sclock_select+0x100>)
 8000b4c:	fbb4 f4f0 	udiv	r4, r4, r0
 8000b50:	b2e4      	uxtb	r4, r4
		div = 176400 / freq;
	} else {
		return;
	}

	if(div == 1) {div = 0;}
 8000b52:	2c01      	cmp	r4, #1
 8000b54:	d054      	beq.n	8000c00 <i2sclock_select+0xe0>
	//else {div -= 1;}

	//HAL_SAI_InitProtocol(hsai, protocol, datasize, nbslot)

	uint8_t sai_enabled = SAI1_Block_A->CR1 & SAI_xCR1_SAIEN ? 1 : 0;
 8000b56:	4b33      	ldr	r3, [pc, #204]	; (8000c24 <i2sclock_select+0x104>)
 8000b58:	681d      	ldr	r5, [r3, #0]
	if (sai_enabled) {sai_disable();}
 8000b5a:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
 8000b5e:	d151      	bne.n	8000c04 <i2sclock_select+0xe4>
	MODIFY_REG(SAI1_Block_A->CR1, SAI_xCR1_MCKDIV_Msk, div << SAI_xCR1_MCKDIV_Pos);
 8000b60:	4a30      	ldr	r2, [pc, #192]	; (8000c24 <i2sclock_select+0x104>)
 8000b62:	6813      	ldr	r3, [r2, #0]
 8000b64:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8000b68:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
 8000b6c:	6013      	str	r3, [r2, #0]
	MODIFY_REG(SAI1_Block_B->CR1, SAI_xCR1_MCKDIV_Msk, div << SAI_xCR1_MCKDIV_Pos);
 8000b6e:	3220      	adds	r2, #32
 8000b70:	6813      	ldr	r3, [r2, #0]
 8000b72:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8000b76:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
 8000b7a:	6013      	str	r3, [r2, #0]
	MODIFY_REG(SAI2_Block_A->CR1, SAI_xCR1_MCKDIV_Msk, div << SAI_xCR1_MCKDIV_Pos);
 8000b7c:	f502 7278 	add.w	r2, r2, #992	; 0x3e0
 8000b80:	6813      	ldr	r3, [r2, #0]
 8000b82:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8000b86:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
 8000b8a:	6013      	str	r3, [r2, #0]
	MODIFY_REG(SAI2_Block_B->CR1, SAI_xCR1_MCKDIV_Msk, div << SAI_xCR1_MCKDIV_Pos);
 8000b8c:	3220      	adds	r2, #32
 8000b8e:	6813      	ldr	r3, [r2, #0]
 8000b90:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8000b94:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
 8000b98:	6013      	str	r3, [r2, #0]
	MODIFY_REG(SAI3_Block_A->CR1, SAI_xCR1_MCKDIV_Msk, div << SAI_xCR1_MCKDIV_Pos);
 8000b9a:	f502 7278 	add.w	r2, r2, #992	; 0x3e0
 8000b9e:	6813      	ldr	r3, [r2, #0]
 8000ba0:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8000ba4:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
 8000ba8:	6013      	str	r3, [r2, #0]
	MODIFY_REG(SAI3_Block_B->CR1, SAI_xCR1_MCKDIV_Msk, div << SAI_xCR1_MCKDIV_Pos);
 8000baa:	3220      	adds	r2, #32
 8000bac:	6813      	ldr	r3, [r2, #0]
 8000bae:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8000bb2:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
 8000bb6:	6013      	str	r3, [r2, #0]
	MODIFY_REG(SAI4_Block_A->CR1, SAI_xCR1_MCKDIV_Msk, div << SAI_xCR1_MCKDIV_Pos);
 8000bb8:	4a1b      	ldr	r2, [pc, #108]	; (8000c28 <i2sclock_select+0x108>)
 8000bba:	6813      	ldr	r3, [r2, #0]
 8000bbc:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8000bc0:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
 8000bc4:	6013      	str	r3, [r2, #0]
	MODIFY_REG(SAI4_Block_B->CR1, SAI_xCR1_MCKDIV_Msk, div << SAI_xCR1_MCKDIV_Pos);
 8000bc6:	3220      	adds	r2, #32
 8000bc8:	6813      	ldr	r3, [r2, #0]
 8000bca:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8000bce:	ea43 5404 	orr.w	r4, r3, r4, lsl #20
 8000bd2:	6014      	str	r4, [r2, #0]
	if(sai_enabled) {sai_enable();}
 8000bd4:	b9cd      	cbnz	r5, 8000c0a <i2sclock_select+0xea>
}
 8000bd6:	bd38      	pop	{r3, r4, r5, pc}
	} else if (freq % 11025 == 0) {
 8000bd8:	4b14      	ldr	r3, [pc, #80]	; (8000c2c <i2sclock_select+0x10c>)
 8000bda:	fba3 2300 	umull	r2, r3, r3, r0
 8000bde:	0b5b      	lsrs	r3, r3, #13
 8000be0:	f642 3211 	movw	r2, #11025	; 0x2b11
 8000be4:	fb02 0313 	mls	r3, r2, r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d1f4      	bne.n	8000bd6 <i2sclock_select+0xb6>
		GPIOC->BSRR |= GPIO_BSRR_BR8;
 8000bec:	4a0b      	ldr	r2, [pc, #44]	; (8000c1c <i2sclock_select+0xfc>)
 8000bee:	6993      	ldr	r3, [r2, #24]
 8000bf0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000bf4:	6193      	str	r3, [r2, #24]
		div = 176400 / freq;
 8000bf6:	4c0e      	ldr	r4, [pc, #56]	; (8000c30 <i2sclock_select+0x110>)
 8000bf8:	fbb4 f4f0 	udiv	r4, r4, r0
 8000bfc:	b2e4      	uxtb	r4, r4
 8000bfe:	e7a8      	b.n	8000b52 <i2sclock_select+0x32>
	if(div == 1) {div = 0;}
 8000c00:	2400      	movs	r4, #0
 8000c02:	e7a8      	b.n	8000b56 <i2sclock_select+0x36>
	if (sai_enabled) {sai_disable();}
 8000c04:	f000 f9b0 	bl	8000f68 <sai_disable>
 8000c08:	e7aa      	b.n	8000b60 <i2sclock_select+0x40>
	if(sai_enabled) {sai_enable();}
 8000c0a:	f000 f99f 	bl	8000f4c <sai_enable>
 8000c0e:	e7e2      	b.n	8000bd6 <i2sclock_select+0xb6>
 8000c10:	ffffd4ef 	.word	0xffffd4ef
 8000c14:	0002c2ef 	.word	0x0002c2ef
 8000c18:	057619f1 	.word	0x057619f1
 8000c1c:	58020800 	.word	0x58020800
 8000c20:	0002ee00 	.word	0x0002ee00
 8000c24:	40015804 	.word	0x40015804
 8000c28:	58005404 	.word	0x58005404
 8000c2c:	be37c63b 	.word	0xbe37c63b
 8000c30:	0002b110 	.word	0x0002b110

08000c34 <mpu_init>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000c34:	f3bf 8f5f 	dmb	sy

#include <drv/mpu.h>

void mpu_init() {
	__DMB();
	MPU->CTRL = 0;
 8000c38:	4b09      	ldr	r3, [pc, #36]	; (8000c60 <mpu_init+0x2c>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	605a      	str	r2, [r3, #4]

	MPU->RNR = 0;
 8000c3e:	609a      	str	r2, [r3, #8]
	MPU->RBAR = 0x30000000 & 0xFFFFFFE0U;
 8000c40:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
 8000c44:	60d9      	str	r1, [r3, #12]

	// 4KB Size
	MPU->RASR = (11 << MPU_RASR_SIZE_Pos) | (0b00 << MPU_RASR_SRD_Pos) | (0b1 << MPU_RASR_S_Pos) | (0b0 << MPU_RASR_B_Pos) | (0b0 << MPU_RASR_C_Pos) | (0b001 << MPU_RASR_TEX_Pos) | (0b011 << MPU_RASR_AP_Pos) | (0b1 << MPU_RASR_XN_Pos);
 8000c46:	4907      	ldr	r1, [pc, #28]	; (8000c64 <mpu_init+0x30>)
 8000c48:	6119      	str	r1, [r3, #16]
	MPU->RNR = 0;
 8000c4a:	609a      	str	r2, [r3, #8]
	MPU->RASR |= MPU_RASR_ENABLE_Msk;
 8000c4c:	691a      	ldr	r2, [r3, #16]
 8000c4e:	f042 0201 	orr.w	r2, r2, #1
 8000c52:	611a      	str	r2, [r3, #16]

	MPU->CTRL |= MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
 8000c54:	685a      	ldr	r2, [r3, #4]
 8000c56:	f042 0205 	orr.w	r2, r2, #5
 8000c5a:	605a      	str	r2, [r3, #4]
}
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	e000ed90 	.word	0xe000ed90
 8000c64:	130c0016 	.word	0x130c0016

08000c68 <sai_global_init>:
//	sai_global_init(SAI3); sai_block_init(SAI3_Block_A); sai_block_init(SAI3_Block_B);
//	sai_global_init(SAI4); sai_block_init(SAI4_Block_A); sai_block_init(SAI4_Block_B);
}

void sai_global_init(SAI_TypeDef* sai) {
	if (sai == SAI1) {
 8000c68:	4b24      	ldr	r3, [pc, #144]	; (8000cfc <sai_global_init+0x94>)
 8000c6a:	4298      	cmp	r0, r3
 8000c6c:	d028      	beq.n	8000cc0 <sai_global_init+0x58>
		RCC->APB2ENR |= RCC_APB2ENR_SAI1EN;
		volatile uint32_t tmp = (RCC->APB2ENR);
		(void) tmp;
	} else if (sai == SAI2) {
 8000c6e:	4b24      	ldr	r3, [pc, #144]	; (8000d00 <sai_global_init+0x98>)
 8000c70:	4298      	cmp	r0, r3
 8000c72:	d011      	beq.n	8000c98 <sai_global_init+0x30>
		RCC->APB2ENR |= RCC_APB2ENR_SAI2EN;
		(void) (RCC->APB2ENR);
	} else if (sai == SAI3) {
 8000c74:	4b23      	ldr	r3, [pc, #140]	; (8000d04 <sai_global_init+0x9c>)
 8000c76:	4298      	cmp	r0, r3
 8000c78:	d018      	beq.n	8000cac <sai_global_init+0x44>
		RCC->APB2ENR |= RCC_APB2ENR_SAI3EN;
		(void) (RCC->APB2ENR);
	} else {
		RCC->APB4ENR |= RCC_APB4ENR_SAI4EN;
 8000c7a:	4b23      	ldr	r3, [pc, #140]	; (8000d08 <sai_global_init+0xa0>)
 8000c7c:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8000c80:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8000c84:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
		(void) (RCC->APB4ENR);
 8000c88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
	}

	if(sai == SAI1) {
 8000c8c:	4b1b      	ldr	r3, [pc, #108]	; (8000cfc <sai_global_init+0x94>)
 8000c8e:	4298      	cmp	r0, r3
 8000c90:	d02e      	beq.n	8000cf0 <sai_global_init+0x88>
		sai->GCR |= 0b01 << SAI_GCR_SYNCOUT_Pos;
	} else {
		sai->GCR |= 0b00 << SAI_GCR_SYNCIN_Pos;
 8000c92:	6803      	ldr	r3, [r0, #0]
 8000c94:	6003      	str	r3, [r0, #0]
 8000c96:	4770      	bx	lr
		RCC->APB2ENR |= RCC_APB2ENR_SAI2EN;
 8000c98:	4b1b      	ldr	r3, [pc, #108]	; (8000d08 <sai_global_init+0xa0>)
 8000c9a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8000c9e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000ca2:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
		(void) (RCC->APB2ENR);
 8000ca6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000caa:	e7ef      	b.n	8000c8c <sai_global_init+0x24>
		RCC->APB2ENR |= RCC_APB2ENR_SAI3EN;
 8000cac:	4b16      	ldr	r3, [pc, #88]	; (8000d08 <sai_global_init+0xa0>)
 8000cae:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8000cb2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000cb6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
		(void) (RCC->APB2ENR);
 8000cba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000cbe:	e7e5      	b.n	8000c8c <sai_global_init+0x24>
void sai_global_init(SAI_TypeDef* sai) {
 8000cc0:	b082      	sub	sp, #8
		RCC->APB2ENR |= RCC_APB2ENR_SAI1EN;
 8000cc2:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <sai_global_init+0xa0>)
 8000cc4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8000cc8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000ccc:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
		volatile uint32_t tmp = (RCC->APB2ENR);
 8000cd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000cd4:	9301      	str	r3, [sp, #4]
		(void) tmp;
 8000cd6:	9b01      	ldr	r3, [sp, #4]
	if(sai == SAI1) {
 8000cd8:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <sai_global_init+0x94>)
 8000cda:	4298      	cmp	r0, r3
 8000cdc:	d003      	beq.n	8000ce6 <sai_global_init+0x7e>
		sai->GCR |= 0b00 << SAI_GCR_SYNCIN_Pos;
 8000cde:	6803      	ldr	r3, [r0, #0]
 8000ce0:	6003      	str	r3, [r0, #0]
	}
}
 8000ce2:	b002      	add	sp, #8
 8000ce4:	4770      	bx	lr
		sai->GCR |= 0b01 << SAI_GCR_SYNCOUT_Pos;
 8000ce6:	6803      	ldr	r3, [r0, #0]
 8000ce8:	f043 0310 	orr.w	r3, r3, #16
 8000cec:	6003      	str	r3, [r0, #0]
 8000cee:	e7f8      	b.n	8000ce2 <sai_global_init+0x7a>
 8000cf0:	6803      	ldr	r3, [r0, #0]
 8000cf2:	f043 0310 	orr.w	r3, r3, #16
 8000cf6:	6003      	str	r3, [r0, #0]
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	40015800 	.word	0x40015800
 8000d00:	40015c00 	.word	0x40015c00
 8000d04:	40016000 	.word	0x40016000
 8000d08:	58024400 	.word	0x58024400

08000d0c <sai_block_init>:
void sai_block_init(SAI_Block_TypeDef* block) {
 8000d0c:	b410      	push	{r4}
	// Syncen
	uint32_t sync_mode = 0;
	uint32_t tr_mode = 0;

	if(block == SAI1_Block_A) {
 8000d0e:	4b2d      	ldr	r3, [pc, #180]	; (8000dc4 <sai_block_init+0xb8>)
 8000d10:	4298      	cmp	r0, r3
 8000d12:	d019      	beq.n	8000d48 <sai_block_init+0x3c>
		// Async master
		sync_mode = 0b00 << SAI_xCR1_SYNCEN_Pos;
	} else if (block == SAI1_Block_B) {
 8000d14:	3320      	adds	r3, #32
 8000d16:	4298      	cmp	r0, r3
 8000d18:	d013      	beq.n	8000d42 <sai_block_init+0x36>
		// Sync with other part
		sync_mode = 0b01 << SAI_xCR1_SYNCEN_Pos;
	} else {
		// Sync with SAI1A
		sync_mode = 0b10 << SAI_xCR1_SYNCEN_Pos;
 8000d1a:	f44f 6200 	mov.w	r2, #2048	; 0x800
	}

	// Mode
	if(block == SAI1_Block_A) {
 8000d1e:	4b29      	ldr	r3, [pc, #164]	; (8000dc4 <sai_block_init+0xb8>)
 8000d20:	4298      	cmp	r0, r3
 8000d22:	d015      	beq.n	8000d50 <sai_block_init+0x44>
		// Master transmit
		tr_mode = 0b00 << SAI_xCR1_MODE_Pos;

	} else if (block == SAI2_Block_A || block == SAI3_Block_A || block == SAI4_Block_A) {
 8000d24:	4928      	ldr	r1, [pc, #160]	; (8000dc8 <sai_block_init+0xbc>)
 8000d26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000d2a:	4298      	cmp	r0, r3
 8000d2c:	bf18      	it	ne
 8000d2e:	4288      	cmpne	r0, r1
 8000d30:	d010      	beq.n	8000d54 <sai_block_init+0x48>
 8000d32:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 8000d36:	f5a3 3386 	sub.w	r3, r3, #68608	; 0x10c00
 8000d3a:	4298      	cmp	r0, r3
 8000d3c:	d006      	beq.n	8000d4c <sai_block_init+0x40>
		// Slave transmit
		tr_mode = 0b10 << SAI_xCR1_MODE_Pos;
	} else {
		// Slave receive
		tr_mode = 0b11 << SAI_xCR1_MODE_Pos;
 8000d3e:	2403      	movs	r4, #3
 8000d40:	e009      	b.n	8000d56 <sai_block_init+0x4a>
		sync_mode = 0b01 << SAI_xCR1_SYNCEN_Pos;
 8000d42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d46:	e7ea      	b.n	8000d1e <sai_block_init+0x12>
		sync_mode = 0b00 << SAI_xCR1_SYNCEN_Pos;
 8000d48:	2200      	movs	r2, #0
 8000d4a:	e7e8      	b.n	8000d1e <sai_block_init+0x12>
		tr_mode = 0b10 << SAI_xCR1_MODE_Pos;
 8000d4c:	2402      	movs	r4, #2
 8000d4e:	e002      	b.n	8000d56 <sai_block_init+0x4a>
		tr_mode = 0b00 << SAI_xCR1_MODE_Pos;
 8000d50:	2400      	movs	r4, #0
 8000d52:	e000      	b.n	8000d56 <sai_block_init+0x4a>
		tr_mode = 0b10 << SAI_xCR1_MODE_Pos;
 8000d54:	2402      	movs	r4, #2
	}

	block->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS | SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR | SAI_xCR1_MCKEN);
 8000d56:	6803      	ldr	r3, [r0, #0]
 8000d58:	491c      	ldr	r1, [pc, #112]	; (8000dcc <sai_block_init+0xc0>)
 8000d5a:	4019      	ands	r1, r3
 8000d5c:	6001      	str	r1, [r0, #0]
	block->CR1 |= tr_mode | sync_mode | 0b1 << SAI_xCR1_CKSTR_Pos | 0b00 << SAI_xCR1_PRTCFG_Pos | 0b111 << SAI_xCR1_DS_Pos | 0 << SAI_xCR1_LSBFIRST_Pos/* | SAI_xCR1_MCKEN*/;
 8000d5e:	6803      	ldr	r3, [r0, #0]
 8000d60:	4322      	orrs	r2, r4
 8000d62:	4313      	orrs	r3, r2
 8000d64:	f443 7338 	orr.w	r3, r3, #736	; 0x2e0
 8000d68:	6003      	str	r3, [r0, #0]

	block->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8000d6a:	6842      	ldr	r2, [r0, #4]
 8000d6c:	4b18      	ldr	r3, [pc, #96]	; (8000dd0 <sai_block_init+0xc4>)
 8000d6e:	4013      	ands	r3, r2
 8000d70:	6043      	str	r3, [r0, #4]

	block->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
 8000d72:	6882      	ldr	r2, [r0, #8]
 8000d74:	4b17      	ldr	r3, [pc, #92]	; (8000dd4 <sai_block_init+0xc8>)
 8000d76:	4013      	ands	r3, r2
 8000d78:	6083      	str	r3, [r0, #8]
	block->FRCR |= SAI_xFRCR_FSOFF;
 8000d7a:	6883      	ldr	r3, [r0, #8]
 8000d7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d80:	6083      	str	r3, [r0, #8]
	block->FRCR |= SAI_xFRCR_FSDEF;
 8000d82:	6883      	ldr	r3, [r0, #8]
 8000d84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d88:	6083      	str	r3, [r0, #8]
	block->FRCR |= (32-1) << SAI_xFRCR_FSALL_Pos | (64-1) << SAI_xFRCR_FRL_Pos;
 8000d8a:	6882      	ldr	r2, [r0, #8]
 8000d8c:	f641 733f 	movw	r3, #7999	; 0x1f3f
 8000d90:	4313      	orrs	r3, r2
 8000d92:	6083      	str	r3, [r0, #8]

	block->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ | SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));
 8000d94:	68c3      	ldr	r3, [r0, #12]
 8000d96:	f423 637d 	bic.w	r3, r3, #4048	; 0xfd0
 8000d9a:	f023 030f 	bic.w	r3, r3, #15
 8000d9e:	041b      	lsls	r3, r3, #16
 8000da0:	0c1b      	lsrs	r3, r3, #16
 8000da2:	60c3      	str	r3, [r0, #12]
	block->SLOTR |= 0b10 << SAI_xSLOTR_SLOTSZ_Pos;
 8000da4:	68c3      	ldr	r3, [r0, #12]
 8000da6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000daa:	60c3      	str	r3, [r0, #12]
	block->SLOTR |= (2-1) << SAI_xSLOTR_NBSLOT_Pos;
 8000dac:	68c3      	ldr	r3, [r0, #12]
 8000dae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000db2:	60c3      	str	r3, [r0, #12]
	block->SLOTR |= 0xFFFF << SAI_xSLOTR_SLOTEN_Pos;
 8000db4:	68c2      	ldr	r2, [r0, #12]
 8000db6:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <sai_block_init+0xcc>)
 8000db8:	4313      	orrs	r3, r2
 8000dba:	60c3      	str	r3, [r0, #12]
}
 8000dbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	40015804 	.word	0x40015804
 8000dc8:	40015c04 	.word	0x40015c04
 8000dcc:	f005c010 	.word	0xf005c010
 8000dd0:	ffff1ff0 	.word	0xffff1ff0
 8000dd4:	fff88000 	.word	0xfff88000
 8000dd8:	ffff0000 	.word	0xffff0000

08000ddc <sai_init_pins>:
void sai_init_pins(SAI_TypeDef* sai) {
	if(sai == SAI1) {
 8000ddc:	4b53      	ldr	r3, [pc, #332]	; (8000f2c <sai_init_pins+0x150>)
 8000dde:	4298      	cmp	r0, r3
 8000de0:	d00a      	beq.n	8000df8 <sai_init_pins+0x1c>
		GPIOE->AFR[0] |= 6 << GPIO_AFRL_AFSEL2_Pos;
		GPIOE->AFR[0] |= 6 << GPIO_AFRL_AFSEL3_Pos;
		GPIOE->AFR[0] |= 6 << GPIO_AFRL_AFSEL4_Pos;
		GPIOE->AFR[0] |= 6 << GPIO_AFRL_AFSEL5_Pos;
		GPIOE->AFR[0] |= 6 << GPIO_AFRL_AFSEL6_Pos;
	} else if (sai == SAI2) {
 8000de2:	4b53      	ldr	r3, [pc, #332]	; (8000f30 <sai_init_pins+0x154>)
 8000de4:	4298      	cmp	r0, r3
 8000de6:	d042      	beq.n	8000e6e <sai_init_pins+0x92>
		GPIOD->OSPEEDR |= 0b11 << GPIO_OSPEEDR_OSPEED11_Pos;
		GPIOE->OSPEEDR |= 0b11 << GPIO_OSPEEDR_OSPEED11_Pos;
		// AF10
		GPIOD->AFR[1] |= 10 << GPIO_AFRH_AFSEL11_Pos;
		GPIOE->AFR[1] |= 10 << GPIO_AFRH_AFSEL11_Pos;
	} else if (sai == SAI3) {
 8000de8:	4b52      	ldr	r3, [pc, #328]	; (8000f34 <sai_init_pins+0x158>)
 8000dea:	4298      	cmp	r0, r3
 8000dec:	d067      	beq.n	8000ebe <sai_init_pins+0xe2>
		GPIOD->OSPEEDR |= 0b11 << GPIO_OSPEEDR_OSPEED1_Pos;
		GPIOD->OSPEEDR |= 0b11 << GPIO_OSPEEDR_OSPEED9_Pos;
		// AF6
		GPIOD->AFR[0] |= 6 << GPIO_AFRL_AFSEL1_Pos;
		GPIOD->AFR[1] |= 6 << GPIO_AFRH_AFSEL9_Pos;
	} else if (sai == SAI4) {
 8000dee:	4b52      	ldr	r3, [pc, #328]	; (8000f38 <sai_init_pins+0x15c>)
 8000df0:	4298      	cmp	r0, r3
 8000df2:	f000 8085 	beq.w	8000f00 <sai_init_pins+0x124>
		//GPIOF->OSPEEDR |= 0b11 << GPIO_OSPEEDR_OSPEED6_Pos;
		// AF6
		GPIOC->AFR[0] |= 8 << GPIO_AFRL_AFSEL1_Pos;
		//GPIOF->AFR[0] |= 6 << GPIO_AFRL_AFSEL6_Pos;
	}
}
 8000df6:	4770      	bx	lr
		RCC->AHB4ENR |= RCC_AHB4ENR_GPIOEEN;
 8000df8:	4a50      	ldr	r2, [pc, #320]	; (8000f3c <sai_init_pins+0x160>)
 8000dfa:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
 8000dfe:	f043 0310 	orr.w	r3, r3, #16
 8000e02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
		MODIFY_REG(GPIOE->MODER, GPIO_MODER_MODE2_Msk, 0b10 << GPIO_MODER_MODE2_Pos);
 8000e06:	4b4e      	ldr	r3, [pc, #312]	; (8000f40 <sai_init_pins+0x164>)
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8000e0e:	f042 0220 	orr.w	r2, r2, #32
 8000e12:	601a      	str	r2, [r3, #0]
		MODIFY_REG(GPIOE->MODER, GPIO_MODER_MODE3_Msk, 0b10 << GPIO_MODER_MODE3_Pos);
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8000e1a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e1e:	601a      	str	r2, [r3, #0]
		MODIFY_REG(GPIOE->MODER, GPIO_MODER_MODE4_Msk, 0b10 << GPIO_MODER_MODE4_Pos);
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000e26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000e2a:	601a      	str	r2, [r3, #0]
		MODIFY_REG(GPIOE->MODER, GPIO_MODER_MODE5_Msk, 0b10 << GPIO_MODER_MODE5_Pos);
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8000e32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000e36:	601a      	str	r2, [r3, #0]
		MODIFY_REG(GPIOE->MODER, GPIO_MODER_MODE6_Msk, 0b10 << GPIO_MODER_MODE6_Pos);
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000e3e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000e42:	601a      	str	r2, [r3, #0]
		GPIOE->AFR[0] |= 6 << GPIO_AFRL_AFSEL2_Pos;
 8000e44:	6a1a      	ldr	r2, [r3, #32]
 8000e46:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
 8000e4a:	621a      	str	r2, [r3, #32]
		GPIOE->AFR[0] |= 6 << GPIO_AFRL_AFSEL3_Pos;
 8000e4c:	6a1a      	ldr	r2, [r3, #32]
 8000e4e:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8000e52:	621a      	str	r2, [r3, #32]
		GPIOE->AFR[0] |= 6 << GPIO_AFRL_AFSEL4_Pos;
 8000e54:	6a1a      	ldr	r2, [r3, #32]
 8000e56:	f442 22c0 	orr.w	r2, r2, #393216	; 0x60000
 8000e5a:	621a      	str	r2, [r3, #32]
		GPIOE->AFR[0] |= 6 << GPIO_AFRL_AFSEL5_Pos;
 8000e5c:	6a1a      	ldr	r2, [r3, #32]
 8000e5e:	f442 02c0 	orr.w	r2, r2, #6291456	; 0x600000
 8000e62:	621a      	str	r2, [r3, #32]
		GPIOE->AFR[0] |= 6 << GPIO_AFRL_AFSEL6_Pos;
 8000e64:	6a1a      	ldr	r2, [r3, #32]
 8000e66:	f042 62c0 	orr.w	r2, r2, #100663296	; 0x6000000
 8000e6a:	621a      	str	r2, [r3, #32]
 8000e6c:	4770      	bx	lr
		RCC->AHB4ENR |= RCC_AHB4ENR_GPIODEN;
 8000e6e:	4b33      	ldr	r3, [pc, #204]	; (8000f3c <sai_init_pins+0x160>)
 8000e70:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000e74:	f042 0208 	orr.w	r2, r2, #8
 8000e78:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
		RCC->AHB4ENR |= RCC_AHB4ENR_GPIOEEN;
 8000e7c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000e80:	f042 0210 	orr.w	r2, r2, #16
 8000e84:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
		GPIOD->MODER |= 0b10 << GPIO_MODER_MODE11_Pos;
 8000e88:	4a2e      	ldr	r2, [pc, #184]	; (8000f44 <sai_init_pins+0x168>)
 8000e8a:	6813      	ldr	r3, [r2, #0]
 8000e8c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e90:	6013      	str	r3, [r2, #0]
		GPIOE->MODER |= 0b10 << GPIO_MODER_MODE11_Pos;
 8000e92:	4b2b      	ldr	r3, [pc, #172]	; (8000f40 <sai_init_pins+0x164>)
 8000e94:	6819      	ldr	r1, [r3, #0]
 8000e96:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000e9a:	6019      	str	r1, [r3, #0]
		GPIOD->OSPEEDR |= 0b11 << GPIO_OSPEEDR_OSPEED11_Pos;
 8000e9c:	6891      	ldr	r1, [r2, #8]
 8000e9e:	f441 0140 	orr.w	r1, r1, #12582912	; 0xc00000
 8000ea2:	6091      	str	r1, [r2, #8]
		GPIOE->OSPEEDR |= 0b11 << GPIO_OSPEEDR_OSPEED11_Pos;
 8000ea4:	6899      	ldr	r1, [r3, #8]
 8000ea6:	f441 0140 	orr.w	r1, r1, #12582912	; 0xc00000
 8000eaa:	6099      	str	r1, [r3, #8]
		GPIOD->AFR[1] |= 10 << GPIO_AFRH_AFSEL11_Pos;
 8000eac:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8000eae:	f441 4120 	orr.w	r1, r1, #40960	; 0xa000
 8000eb2:	6251      	str	r1, [r2, #36]	; 0x24
		GPIOE->AFR[1] |= 10 << GPIO_AFRH_AFSEL11_Pos;
 8000eb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000eb6:	f442 4220 	orr.w	r2, r2, #40960	; 0xa000
 8000eba:	625a      	str	r2, [r3, #36]	; 0x24
 8000ebc:	4770      	bx	lr
		RCC->AHB4ENR |= RCC_AHB4ENR_GPIODEN;
 8000ebe:	4a1f      	ldr	r2, [pc, #124]	; (8000f3c <sai_init_pins+0x160>)
 8000ec0:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
 8000ec4:	f043 0308 	orr.w	r3, r3, #8
 8000ec8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
		GPIOD->MODER |= 0b10 << GPIO_MODER_MODE1_Pos;
 8000ecc:	4b1d      	ldr	r3, [pc, #116]	; (8000f44 <sai_init_pins+0x168>)
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	f042 0208 	orr.w	r2, r2, #8
 8000ed4:	601a      	str	r2, [r3, #0]
		GPIOD->MODER |= 0b10 << GPIO_MODER_MODE9_Pos;
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000edc:	601a      	str	r2, [r3, #0]
		GPIOD->OSPEEDR |= 0b11 << GPIO_OSPEEDR_OSPEED1_Pos;
 8000ede:	689a      	ldr	r2, [r3, #8]
 8000ee0:	f042 020c 	orr.w	r2, r2, #12
 8000ee4:	609a      	str	r2, [r3, #8]
		GPIOD->OSPEEDR |= 0b11 << GPIO_OSPEEDR_OSPEED9_Pos;
 8000ee6:	689a      	ldr	r2, [r3, #8]
 8000ee8:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
 8000eec:	609a      	str	r2, [r3, #8]
		GPIOD->AFR[0] |= 6 << GPIO_AFRL_AFSEL1_Pos;
 8000eee:	6a1a      	ldr	r2, [r3, #32]
 8000ef0:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8000ef4:	621a      	str	r2, [r3, #32]
		GPIOD->AFR[1] |= 6 << GPIO_AFRH_AFSEL9_Pos;
 8000ef6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ef8:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8000efc:	625a      	str	r2, [r3, #36]	; 0x24
 8000efe:	4770      	bx	lr
		RCC->AHB4ENR |= RCC_AHB4ENR_GPIOCEN;
 8000f00:	4a0e      	ldr	r2, [pc, #56]	; (8000f3c <sai_init_pins+0x160>)
 8000f02:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
 8000f06:	f043 0304 	orr.w	r3, r3, #4
 8000f0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
		GPIOC->MODER |= 0b10 << GPIO_MODER_MODE1_Pos;
 8000f0e:	4b0e      	ldr	r3, [pc, #56]	; (8000f48 <sai_init_pins+0x16c>)
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	f042 0208 	orr.w	r2, r2, #8
 8000f16:	601a      	str	r2, [r3, #0]
		GPIOC->OSPEEDR |= 0b11 << GPIO_OSPEEDR_OSPEED1_Pos;
 8000f18:	689a      	ldr	r2, [r3, #8]
 8000f1a:	f042 020c 	orr.w	r2, r2, #12
 8000f1e:	609a      	str	r2, [r3, #8]
		GPIOC->AFR[0] |= 8 << GPIO_AFRL_AFSEL1_Pos;
 8000f20:	6a1a      	ldr	r2, [r3, #32]
 8000f22:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f26:	621a      	str	r2, [r3, #32]
}
 8000f28:	e765      	b.n	8000df6 <sai_init_pins+0x1a>
 8000f2a:	bf00      	nop
 8000f2c:	40015800 	.word	0x40015800
 8000f30:	40015c00 	.word	0x40015c00
 8000f34:	40016000 	.word	0x40016000
 8000f38:	58005400 	.word	0x58005400
 8000f3c:	58024400 	.word	0x58024400
 8000f40:	58021000 	.word	0x58021000
 8000f44:	58020c00 	.word	0x58020c00
 8000f48:	58020800 	.word	0x58020800

08000f4c <sai_enable>:

void sai_enable() {
	SAI1_Block_A->CR1 |= SAI_xCR1_SAIEN;
 8000f4c:	4a05      	ldr	r2, [pc, #20]	; (8000f64 <sai_enable+0x18>)
 8000f4e:	6813      	ldr	r3, [r2, #0]
 8000f50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f54:	6013      	str	r3, [r2, #0]
	SAI1_Block_B->CR1 |= SAI_xCR1_SAIEN;
 8000f56:	3220      	adds	r2, #32
 8000f58:	6813      	ldr	r3, [r2, #0]
 8000f5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f5e:	6013      	str	r3, [r2, #0]
	//SAI2_Block_B->CR1 |= SAI_xCR1_SAIEN;
	//SAI3_Block_A->CR1 |= SAI_xCR1_SAIEN;
	//SAI3_Block_B->CR1 |= SAI_xCR1_SAIEN;
	//SAI4_Block_A->CR1 |= SAI_xCR1_SAIEN;
	//SAI4_Block_B->CR1 |= SAI_xCR1_SAIEN;
}
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	40015804 	.word	0x40015804

08000f68 <sai_disable>:
void sai_disable() {
	SAI1_Block_A->CR1 &= ~SAI_xCR1_SAIEN; WAITNBIT(SAI1_Block_A->CR1, SAI_xCR1_SAIEN);
 8000f68:	4a0a      	ldr	r2, [pc, #40]	; (8000f94 <sai_disable+0x2c>)
 8000f6a:	6813      	ldr	r3, [r2, #0]
 8000f6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f70:	6013      	str	r3, [r2, #0]
 8000f72:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <sai_disable+0x2c>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000f7a:	d1fa      	bne.n	8000f72 <sai_disable+0xa>
	SAI1_Block_B->CR1 &= ~SAI_xCR1_SAIEN; WAITNBIT(SAI1_Block_B->CR1, SAI_xCR1_SAIEN);
 8000f7c:	4a06      	ldr	r2, [pc, #24]	; (8000f98 <sai_disable+0x30>)
 8000f7e:	6813      	ldr	r3, [r2, #0]
 8000f80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f84:	6013      	str	r3, [r2, #0]
 8000f86:	4b04      	ldr	r3, [pc, #16]	; (8000f98 <sai_disable+0x30>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000f8e:	d1fa      	bne.n	8000f86 <sai_disable+0x1e>
	//SAI2_Block_B->CR1 &= ~SAI_xCR1_SAIEN;
	//SAI3_Block_A->CR1 &= ~SAI_xCR1_SAIEN;
	//SAI3_Block_B->CR1 &= ~SAI_xCR1_SAIEN;
	//SAI4_Block_A->CR1 &= ~SAI_xCR1_SAIEN;
	//SAI4_Block_B->CR1 &= ~SAI_xCR1_SAIEN;
}
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	40015804 	.word	0x40015804
 8000f98:	40015824 	.word	0x40015824

08000f9c <sai_init>:
void sai_init() {
 8000f9c:	b538      	push	{r3, r4, r5, lr}
	sai_init_pins(SAI1);
 8000f9e:	4d0e      	ldr	r5, [pc, #56]	; (8000fd8 <sai_init+0x3c>)
 8000fa0:	4628      	mov	r0, r5
 8000fa2:	f7ff ff1b 	bl	8000ddc <sai_init_pins>
	sai_init_pins(SAI2);
 8000fa6:	4c0d      	ldr	r4, [pc, #52]	; (8000fdc <sai_init+0x40>)
 8000fa8:	4620      	mov	r0, r4
 8000faa:	f7ff ff17 	bl	8000ddc <sai_init_pins>
	sai_disable();
 8000fae:	f7ff ffdb 	bl	8000f68 <sai_disable>
	sai_global_init(SAI1); sai_block_init(SAI1_Block_A); sai_block_init(SAI1_Block_B);
 8000fb2:	4628      	mov	r0, r5
 8000fb4:	f7ff fe58 	bl	8000c68 <sai_global_init>
 8000fb8:	4809      	ldr	r0, [pc, #36]	; (8000fe0 <sai_init+0x44>)
 8000fba:	f7ff fea7 	bl	8000d0c <sai_block_init>
 8000fbe:	4809      	ldr	r0, [pc, #36]	; (8000fe4 <sai_init+0x48>)
 8000fc0:	f7ff fea4 	bl	8000d0c <sai_block_init>
	sai_global_init(SAI2); sai_block_init(SAI2_Block_A); sai_block_init(SAI2_Block_B);
 8000fc4:	4620      	mov	r0, r4
 8000fc6:	f7ff fe4f 	bl	8000c68 <sai_global_init>
 8000fca:	4807      	ldr	r0, [pc, #28]	; (8000fe8 <sai_init+0x4c>)
 8000fcc:	f7ff fe9e 	bl	8000d0c <sai_block_init>
 8000fd0:	4806      	ldr	r0, [pc, #24]	; (8000fec <sai_init+0x50>)
 8000fd2:	f7ff fe9b 	bl	8000d0c <sai_block_init>
}
 8000fd6:	bd38      	pop	{r3, r4, r5, pc}
 8000fd8:	40015800 	.word	0x40015800
 8000fdc:	40015c00 	.word	0x40015c00
 8000fe0:	40015804 	.word	0x40015804
 8000fe4:	40015824 	.word	0x40015824
 8000fe8:	40015c04 	.word	0x40015c04
 8000fec:	40015c24 	.word	0x40015c24

08000ff0 <sai_instance_dma_configure>:

void sai_instance_dma_configure(SAI_TypeDef* sai) {
 8000ff0:	b430      	push	{r4, r5}
	for(uint16_t i = 0; i < BUFFER_SIZE; i++) {
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ff8:	d20c      	bcs.n	8001014 <sai_instance_dma_configure+0x24>
		_sai_inBuf[i] = 0;
 8000ffa:	4a5b      	ldr	r2, [pc, #364]	; (8001168 <sai_instance_dma_configure+0x178>)
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		_sai_outBuf[i] = sine[i];
 8001002:	4a5a      	ldr	r2, [pc, #360]	; (800116c <sai_instance_dma_configure+0x17c>)
 8001004:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001008:	4a59      	ldr	r2, [pc, #356]	; (8001170 <sai_instance_dma_configure+0x180>)
 800100a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(uint16_t i = 0; i < BUFFER_SIZE; i++) {
 800100e:	3301      	adds	r3, #1
 8001010:	b29b      	uxth	r3, r3
 8001012:	e7ef      	b.n	8000ff4 <sai_instance_dma_configure+0x4>
	}

	RCC->AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 8001014:	4a57      	ldr	r2, [pc, #348]	; (8001174 <sai_instance_dma_configure+0x184>)
 8001016:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
 800101a:	f043 0302 	orr.w	r3, r3, #2
 800101e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001022:	4b55      	ldr	r3, [pc, #340]	; (8001178 <sai_instance_dma_configure+0x188>)
 8001024:	68da      	ldr	r2, [r3, #12]
 8001026:	f3c2 2202 	ubfx	r2, r2, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800102a:	f1c2 0307 	rsb	r3, r2, #7
 800102e:	2b04      	cmp	r3, #4
 8001030:	bf28      	it	cs
 8001032:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001034:	1d11      	adds	r1, r2, #4
 8001036:	2906      	cmp	r1, #6
 8001038:	f240 8094 	bls.w	8001164 <sai_instance_dma_configure+0x174>
 800103c:	1ed1      	subs	r1, r2, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800103e:	f04f 32ff 	mov.w	r2, #4294967295
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	43db      	mvns	r3, r3
 8001048:	f003 0301 	and.w	r3, r3, #1
 800104c:	408b      	lsls	r3, r1
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800104e:	408a      	lsls	r2, r1
 8001050:	43d2      	mvns	r2, r2
 8001052:	f002 0203 	and.w	r2, r2, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001056:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001058:	011b      	lsls	r3, r3, #4
 800105a:	b2db      	uxtb	r3, r3
 800105c:	4a47      	ldr	r2, [pc, #284]	; (800117c <sai_instance_dma_configure+0x18c>)
 800105e:	f882 3338 	strb.w	r3, [r2, #824]	; 0x338
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001062:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001066:	6053      	str	r3, [r2, #4]

	NVIC_SetPriority(DMA2_Stream0_IRQn,  NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 1, 3));
	NVIC_EnableIRQ(DMA2_Stream0_IRQn);

	//RXDR
	DMA2_Stream1->PAR = (uint32_t) &(SAI1_Block_B->DR);
 8001068:	4a45      	ldr	r2, [pc, #276]	; (8001180 <sai_instance_dma_configure+0x190>)
 800106a:	4b46      	ldr	r3, [pc, #280]	; (8001184 <sai_instance_dma_configure+0x194>)
 800106c:	6093      	str	r3, [r2, #8]
	DMA2_Stream1->M0AR = (uint32_t) _sai_inBuf;
 800106e:	4b3e      	ldr	r3, [pc, #248]	; (8001168 <sai_instance_dma_configure+0x178>)
 8001070:	60d3      	str	r3, [r2, #12]
	DMA2_Stream1->M1AR = (uint32_t) _sai_inBuf;
 8001072:	6113      	str	r3, [r2, #16]
	DMA2_Stream1->NDTR = BUFFER_SIZE;
 8001074:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001078:	6050      	str	r0, [r2, #4]

	DMA2_Stream1->CR = 0;
 800107a:	2400      	movs	r4, #0
 800107c:	6014      	str	r4, [r2, #0]
	DMA2_Stream1->CR |= 0b01 << DMA_SxCR_MBURST_Pos;
 800107e:	6813      	ldr	r3, [r2, #0]
 8001080:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001084:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->FCR |= DMA_SxFCR_DMDIS | 0b11 << DMA_SxFCR_FTH_Pos;
 8001086:	6953      	ldr	r3, [r2, #20]
 8001088:	f043 0307 	orr.w	r3, r3, #7
 800108c:	6153      	str	r3, [r2, #20]
	//DMA2_Stream1->CR |= DMA_SxCR_HTIE | DMA_SxCR_TCIE;
	DMA2_Stream1->CR |= (0u << DMA_SxCR_DIR_Pos);   // Peripheral to memory
 800108e:	6813      	ldr	r3, [r2, #0]
 8001090:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_MINC;   // Memory increment mode
 8001092:	6813      	ldr	r3, [r2, #0]
 8001094:	4303      	orrs	r3, r0
 8001096:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= (3u << DMA_SxCR_PL_Pos);   // Very High priority
 8001098:	6813      	ldr	r3, [r2, #0]
 800109a:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 800109e:	6013      	str	r3, [r2, #0]

	DMA2_Stream1->CR |= DMA_SxCR_CIRC; // Circular mode
 80010a0:	6813      	ldr	r3, [r2, #0]
 80010a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010a6:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= 0b10 << DMA_SxCR_MSIZE_Pos;
 80010a8:	6813      	ldr	r3, [r2, #0]
 80010aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010ae:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= 0b10 << DMA_SxCR_PSIZE_Pos;
 80010b0:	6813      	ldr	r3, [r2, #0]
 80010b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010b6:	6013      	str	r3, [r2, #0]
	//DMA1_Stream1->CR |= DMA_SxCR_HTIE | DMA_SxCR_TCIE;

	DMAMUX1_Channel9->CCR = 88;
 80010b8:	4b33      	ldr	r3, [pc, #204]	; (8001188 <sai_instance_dma_configure+0x198>)
 80010ba:	2158      	movs	r1, #88	; 0x58
 80010bc:	6019      	str	r1, [r3, #0]
	DMA2->LIFCR |= DMA_LIFCR_CTCIF1 | DMA_LIFCR_CHTIF1 | DMA_LIFCR_CTEIF1 | DMA_LIFCR_CDMEIF1 | DMA_LIFCR_CFEIF1;
 80010be:	4933      	ldr	r1, [pc, #204]	; (800118c <sai_instance_dma_configure+0x19c>)
 80010c0:	688b      	ldr	r3, [r1, #8]
 80010c2:	f443 6374 	orr.w	r3, r3, #3904	; 0xf40
 80010c6:	608b      	str	r3, [r1, #8]

	// TXDR
	DMA2_Stream0->PAR = (uint32_t) &(SAI1_Block_A->DR);
 80010c8:	4b31      	ldr	r3, [pc, #196]	; (8001190 <sai_instance_dma_configure+0x1a0>)
 80010ca:	4d32      	ldr	r5, [pc, #200]	; (8001194 <sai_instance_dma_configure+0x1a4>)
 80010cc:	609d      	str	r5, [r3, #8]
	DMA2_Stream0->M0AR = (uint32_t) _sai_outBuf;
 80010ce:	4d28      	ldr	r5, [pc, #160]	; (8001170 <sai_instance_dma_configure+0x180>)
 80010d0:	60dd      	str	r5, [r3, #12]
	DMA2_Stream0->M1AR = (uint32_t) _sai_outBuf;
 80010d2:	611d      	str	r5, [r3, #16]
	DMA2_Stream0->NDTR = BUFFER_SIZE;
 80010d4:	6058      	str	r0, [r3, #4]

	DMA2_Stream0->CR = 0;
 80010d6:	601c      	str	r4, [r3, #0]
	DMA2_Stream0->CR |= 0b01 << DMA_SxCR_MBURST_Pos;
 80010d8:	681c      	ldr	r4, [r3, #0]
 80010da:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
 80010de:	601c      	str	r4, [r3, #0]
	DMA2_Stream0->FCR |= DMA_SxFCR_DMDIS | 0b11 << DMA_SxFCR_FTH_Pos;
 80010e0:	695c      	ldr	r4, [r3, #20]
 80010e2:	f044 0407 	orr.w	r4, r4, #7
 80010e6:	615c      	str	r4, [r3, #20]
	DMA2_Stream0->CR |= DMA_SxCR_TCIE;
 80010e8:	681c      	ldr	r4, [r3, #0]
 80010ea:	f044 0410 	orr.w	r4, r4, #16
 80010ee:	601c      	str	r4, [r3, #0]
	DMA2_Stream0->CR |= (1u << DMA_SxCR_DIR_Pos);   // Memory to peripheral
 80010f0:	681c      	ldr	r4, [r3, #0]
 80010f2:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 80010f6:	601c      	str	r4, [r3, #0]
	DMA2_Stream0->CR |= DMA_SxCR_MINC;   // Memory increment mode
 80010f8:	681c      	ldr	r4, [r3, #0]
 80010fa:	4304      	orrs	r4, r0
 80010fc:	601c      	str	r4, [r3, #0]
	DMA2_Stream0->CR |= (3u << DMA_SxCR_PL_Pos);   // Very High priority
 80010fe:	681c      	ldr	r4, [r3, #0]
 8001100:	f444 3440 	orr.w	r4, r4, #196608	; 0x30000
 8001104:	601c      	str	r4, [r3, #0]

	DMA2_Stream0->CR |= DMA_SxCR_CIRC; // Circular mode
 8001106:	681c      	ldr	r4, [r3, #0]
 8001108:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 800110c:	601c      	str	r4, [r3, #0]
	DMA2_Stream0->CR |= 0b10 << DMA_SxCR_MSIZE_Pos;
 800110e:	681c      	ldr	r4, [r3, #0]
 8001110:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8001114:	601c      	str	r4, [r3, #0]
	DMA2_Stream0->CR |= 0b10 << DMA_SxCR_PSIZE_Pos;
 8001116:	681c      	ldr	r4, [r3, #0]
 8001118:	f444 5480 	orr.w	r4, r4, #4096	; 0x1000
 800111c:	601c      	str	r4, [r3, #0]

	DMAMUX1_Channel8->CCR = 87;
 800111e:	4c1e      	ldr	r4, [pc, #120]	; (8001198 <sai_instance_dma_configure+0x1a8>)
 8001120:	2557      	movs	r5, #87	; 0x57
 8001122:	6025      	str	r5, [r4, #0]

	DMA2_Stream0->NDTR = BUFFER_SIZE;
 8001124:	6058      	str	r0, [r3, #4]
	DMA2_Stream1->NDTR = BUFFER_SIZE;
 8001126:	6050      	str	r0, [r2, #4]

	DMA2->LIFCR |= DMA_LIFCR_CTCIF0 | DMA_LIFCR_CHTIF0 | DMA_LIFCR_CTEIF0 | DMA_LIFCR_CDMEIF0 | DMA_LIFCR_CFEIF0;
 8001128:	6888      	ldr	r0, [r1, #8]
 800112a:	f040 003d 	orr.w	r0, r0, #61	; 0x3d
 800112e:	6088      	str	r0, [r1, #8]
  __ASM volatile ("isb 0xF":::"memory");
 8001130:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
 8001134:	f3bf 8f4f 	dsb	sy

	__ISB();
	__DSB();

	DMA2_Stream0->CR |= DMA_SxCR_EN;
 8001138:	6819      	ldr	r1, [r3, #0]
 800113a:	f041 0101 	orr.w	r1, r1, #1
 800113e:	6019      	str	r1, [r3, #0]
	DMA2_Stream1->CR |= DMA_SxCR_EN;
 8001140:	6813      	ldr	r3, [r2, #0]
 8001142:	f043 0301 	orr.w	r3, r3, #1
 8001146:	6013      	str	r3, [r2, #0]

	SAI1_Block_A->CR1 |= SAI_xCR1_DMAEN;
 8001148:	f5a2 422c 	sub.w	r2, r2, #44032	; 0xac00
 800114c:	3a24      	subs	r2, #36	; 0x24
 800114e:	6813      	ldr	r3, [r2, #0]
 8001150:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001154:	6013      	str	r3, [r2, #0]
	SAI1_Block_B->CR1 |= SAI_xCR1_DMAEN;
 8001156:	3220      	adds	r2, #32
 8001158:	6813      	ldr	r3, [r2, #0]
 800115a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800115e:	6013      	str	r3, [r2, #0]
}
 8001160:	bc30      	pop	{r4, r5}
 8001162:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001164:	2100      	movs	r1, #0
 8001166:	e76a      	b.n	800103e <sai_instance_dma_configure+0x4e>
 8001168:	240016c0 	.word	0x240016c0
 800116c:	0800573c 	.word	0x0800573c
 8001170:	24000200 	.word	0x24000200
 8001174:	58024400 	.word	0x58024400
 8001178:	e000ed00 	.word	0xe000ed00
 800117c:	e000e100 	.word	0xe000e100
 8001180:	40020428 	.word	0x40020428
 8001184:	40015840 	.word	0x40015840
 8001188:	40020824 	.word	0x40020824
 800118c:	40020400 	.word	0x40020400
 8001190:	40020410 	.word	0x40020410
 8001194:	40015820 	.word	0x40015820
 8001198:	40020820 	.word	0x40020820

0800119c <sai_instance_dma_stop>:

void sai_instance_dma_stop(SAI_TypeDef* sai) {
	DMA2_Stream0->CR &= ~DMA_SxCR_EN;
 800119c:	4a05      	ldr	r2, [pc, #20]	; (80011b4 <sai_instance_dma_stop+0x18>)
 800119e:	6813      	ldr	r3, [r2, #0]
 80011a0:	f023 0301 	bic.w	r3, r3, #1
 80011a4:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR &= ~DMA_SxCR_EN;
 80011a6:	3218      	adds	r2, #24
 80011a8:	6813      	ldr	r3, [r2, #0]
 80011aa:	f023 0301 	bic.w	r3, r3, #1
 80011ae:	6013      	str	r3, [r2, #0]
}
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	40020410 	.word	0x40020410

080011b8 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler() {
	static float sai_int = 0;
	static float sai_prev = 0;
	static uint8_t prev_div;

	uint8_t div = (SAI1_Block_A->CR1 & SAI_xCR1_MCKDIV) >> SAI_xCR1_MCKDIV_Pos;
 80011b8:	4b33      	ldr	r3, [pc, #204]	; (8001288 <DMA2_Stream0_IRQHandler+0xd0>)
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	f3c2 5305 	ubfx	r3, r2, #20, #6
	if(div == 0) {div = 1;}
 80011c0:	f012 7f7c 	tst.w	r2, #66060288	; 0x3f00000
 80011c4:	d100      	bne.n	80011c8 <DMA2_Stream0_IRQHandler+0x10>
 80011c6:	2301      	movs	r3, #1
	if(prev_div != div) {
 80011c8:	4a30      	ldr	r2, [pc, #192]	; (800128c <DMA2_Stream0_IRQHandler+0xd4>)
 80011ca:	7812      	ldrb	r2, [r2, #0]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d004      	beq.n	80011da <DMA2_Stream0_IRQHandler+0x22>
		sai_int = 0;
 80011d0:	2200      	movs	r2, #0
 80011d2:	492f      	ldr	r1, [pc, #188]	; (8001290 <DMA2_Stream0_IRQHandler+0xd8>)
 80011d4:	600a      	str	r2, [r1, #0]
		sai_prev = 0;
 80011d6:	492f      	ldr	r1, [pc, #188]	; (8001294 <DMA2_Stream0_IRQHandler+0xdc>)
 80011d8:	600a      	str	r2, [r1, #0]
	}
	prev_div = div;
 80011da:	4a2c      	ldr	r2, [pc, #176]	; (800128c <DMA2_Stream0_IRQHandler+0xd4>)
 80011dc:	7013      	strb	r3, [r2, #0]

	if ((DMA2->LISR & DMA_LISR_TCIF0) == DMA_LISR_TCIF0) {
 80011de:	4b2e      	ldr	r3, [pc, #184]	; (8001298 <DMA2_Stream0_IRQHandler+0xe0>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f013 0f20 	tst.w	r3, #32
 80011e6:	d03f      	beq.n	8001268 <DMA2_Stream0_IRQHandler+0xb0>
		sai_laps_difference += 1;
 80011e8:	4b2c      	ldr	r3, [pc, #176]	; (800129c <DMA2_Stream0_IRQHandler+0xe4>)
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	3201      	adds	r2, #1
 80011ee:	601a      	str	r2, [r3, #0]

		int32_t v = sai_laps_difference * BUFFER_SIZE + sai_buffer_shift - sai_wrpos;
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	4b2b      	ldr	r3, [pc, #172]	; (80012a0 <DMA2_Stream0_IRQHandler+0xe8>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	eb03 2382 	add.w	r3, r3, r2, lsl #10
 80011fa:	4a2a      	ldr	r2, [pc, #168]	; (80012a4 <DMA2_Stream0_IRQHandler+0xec>)
 80011fc:	6812      	ldr	r2, [r2, #0]
 80011fe:	1a9b      	subs	r3, r3, r2

		float freq = 4*(1.0 / (float)div);
		float k = 13;
		sai_int += v; // For some way this works better
 8001200:	ee07 3a90 	vmov	s15, r3
 8001204:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8001208:	4a21      	ldr	r2, [pc, #132]	; (8001290 <DMA2_Stream0_IRQHandler+0xd8>)
 800120a:	ed92 6a00 	vldr	s12, [r2]
 800120e:	ee35 6a86 	vadd.f32	s12, s11, s12
 8001212:	ed82 6a00 	vstr	s12, [r2]
		sai_feedback = (k*v + 0.00003 * sai_int + 0.00022 * (v - sai_prev));
 8001216:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 800121a:	ee25 7a87 	vmul.f32	s14, s11, s14
 800121e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8001222:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 8001226:	ed9f 4b14 	vldr	d4, [pc, #80]	; 8001278 <DMA2_Stream0_IRQHandler+0xc0>
 800122a:	ee06 7b04 	vmla.f64	d7, d6, d4
 800122e:	4a19      	ldr	r2, [pc, #100]	; (8001294 <DMA2_Stream0_IRQHandler+0xdc>)
 8001230:	ed92 6a00 	vldr	s12, [r2]
 8001234:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8001238:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 800123c:	ed9f 4b10 	vldr	d4, [pc, #64]	; 8001280 <DMA2_Stream0_IRQHandler+0xc8>
 8001240:	ee06 7b04 	vmla.f64	d7, d6, d4
 8001244:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8001248:	4917      	ldr	r1, [pc, #92]	; (80012a8 <DMA2_Stream0_IRQHandler+0xf0>)
 800124a:	ed81 7a00 	vstr	s14, [r1]
		sai_prev = v;
 800124e:	edc2 5a00 	vstr	s11, [r2]

		fb_history[fbh_pos] = v;
 8001252:	4916      	ldr	r1, [pc, #88]	; (80012ac <DMA2_Stream0_IRQHandler+0xf4>)
 8001254:	680a      	ldr	r2, [r1, #0]
 8001256:	4816      	ldr	r0, [pc, #88]	; (80012b0 <DMA2_Stream0_IRQHandler+0xf8>)
 8001258:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
		fbh_pos++;
 800125c:	3201      	adds	r2, #1
 800125e:	600a      	str	r2, [r1, #0]
		if(fbh_pos > 100) {fbh_pos = 0;}
 8001260:	2a64      	cmp	r2, #100	; 0x64
 8001262:	d901      	bls.n	8001268 <DMA2_Stream0_IRQHandler+0xb0>
 8001264:	2200      	movs	r2, #0
 8001266:	600a      	str	r2, [r1, #0]
	}

	DMA2->LIFCR |= DMA_LIFCR_CTCIF0 | DMA_LIFCR_CHTIF0 | DMA_LIFCR_CTEIF0 | DMA_LIFCR_CDMEIF0 | DMA_LIFCR_CFEIF0;
 8001268:	4a0b      	ldr	r2, [pc, #44]	; (8001298 <DMA2_Stream0_IRQHandler+0xe0>)
 800126a:	6893      	ldr	r3, [r2, #8]
 800126c:	f043 033d 	orr.w	r3, r3, #61	; 0x3d
 8001270:	6093      	str	r3, [r2, #8]
}
 8001272:	4770      	bx	lr
 8001274:	f3af 8000 	nop.w
 8001278:	4d551d69 	.word	0x4d551d69
 800127c:	3eff7510 	.word	0x3eff7510
 8001280:	9c38b04b 	.word	0x9c38b04b
 8001284:	3f2cd5f9 	.word	0x3f2cd5f9
 8001288:	40015804 	.word	0x40015804
 800128c:	240001c0 	.word	0x240001c0
 8001290:	240001c8 	.word	0x240001c8
 8001294:	240001d0 	.word	0x240001d0
 8001298:	40020400 	.word	0x40020400
 800129c:	240001cc 	.word	0x240001cc
 80012a0:	24000000 	.word	0x24000000
 80012a4:	240001d4 	.word	0x240001d4
 80012a8:	240001c4 	.word	0x240001c4
 80012ac:	240016b0 	.word	0x240016b0
 80012b0:	24001520 	.word	0x24001520

080012b4 <usb_timer_init>:
uint32_t _last_usbtim_val = 0x60000;
uint8_t _usbtim_cnt;
uint32_t _usbtim_val;

void usb_timer_init() {
	RCC->AHB4ENR |= RCC_AHB4ENR_GPIOAEN;
 80012b4:	4a34      	ldr	r2, [pc, #208]	; (8001388 <usb_timer_init+0xd4>)
 80012b6:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
 80012ba:	f043 0301 	orr.w	r3, r3, #1
 80012be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	MODIFY_REG(GPIOA->MODER, GPIO_MODER_MODE4_Msk, 0b10 << GPIO_MODER_MODE4_Pos);
 80012c2:	f5a2 4288 	sub.w	r2, r2, #17408	; 0x4400
 80012c6:	6813      	ldr	r3, [r2, #0]
 80012c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80012cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012d0:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] |= 2 << GPIO_AFRL_AFSEL4_Pos;
 80012d2:	6a13      	ldr	r3, [r2, #32]
 80012d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012d8:	6213      	str	r3, [r2, #32]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012da:	4b2c      	ldr	r3, [pc, #176]	; (800138c <usb_timer_init+0xd8>)
 80012dc:	68da      	ldr	r2, [r3, #12]
 80012de:	f3c2 2202 	ubfx	r2, r2, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012e2:	f1c2 0307 	rsb	r3, r2, #7
 80012e6:	2b04      	cmp	r3, #4
 80012e8:	bf28      	it	cs
 80012ea:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ec:	1d11      	adds	r1, r2, #4
 80012ee:	2906      	cmp	r1, #6
 80012f0:	d948      	bls.n	8001384 <usb_timer_init+0xd0>
 80012f2:	3a03      	subs	r2, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f4:	f04f 31ff 	mov.w	r1, #4294967295
 80012f8:	fa01 f303 	lsl.w	r3, r1, r3
 80012fc:	43db      	mvns	r3, r3
 80012fe:	f003 0303 	and.w	r3, r3, #3
 8001302:	4093      	lsls	r3, r2
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001304:	fa01 f202 	lsl.w	r2, r1, r2
 8001308:	43d2      	mvns	r2, r2
 800130a:	f002 0202 	and.w	r2, r2, #2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800130e:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001310:	011b      	lsls	r3, r3, #4
 8001312:	b2db      	uxtb	r3, r3
 8001314:	4a1e      	ldr	r2, [pc, #120]	; (8001390 <usb_timer_init+0xdc>)
 8001316:	f882 3332 	strb.w	r3, [r2, #818]	; 0x332
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800131a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800131e:	6053      	str	r3, [r2, #4]

	NVIC_SetPriority(TIM5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 3, 2));
	NVIC_EnableIRQ(TIM5_IRQn);

	RCC->APB1LENR |= RCC_APB1LENR_TIM5EN;
 8001320:	4a19      	ldr	r2, [pc, #100]	; (8001388 <usb_timer_init+0xd4>)
 8001322:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
 8001326:	f043 0308 	orr.w	r3, r3, #8
 800132a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
	TIM5->PSC = 0;
 800132e:	4b19      	ldr	r3, [pc, #100]	; (8001394 <usb_timer_init+0xe0>)
 8001330:	2200      	movs	r2, #0
 8001332:	629a      	str	r2, [r3, #40]	; 0x28
	TIM5->ARR = 0xFFFFFFFF;
 8001334:	62d9      	str	r1, [r3, #44]	; 0x2c
	TIM5->CR1 |= TIM_CR1_ARPE;
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800133c:	601a      	str	r2, [r3, #0]
	TIM5->DIER |= TIM_DIER_TIE;
 800133e:	68da      	ldr	r2, [r3, #12]
 8001340:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001344:	60da      	str	r2, [r3, #12]

	TIM5->SMCR |= TIM_SMCR_ECE;
 8001346:	689a      	ldr	r2, [r3, #8]
 8001348:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800134c:	609a      	str	r2, [r3, #8]

	TIM5->SMCR |= 0b011 << TIM_SMCR_TS_Pos | 0b01 << 20;
 800134e:	6899      	ldr	r1, [r3, #8]
 8001350:	4a11      	ldr	r2, [pc, #68]	; (8001398 <usb_timer_init+0xe4>)
 8001352:	430a      	orrs	r2, r1
 8001354:	609a      	str	r2, [r3, #8]
	TIM5->SMCR |= 0b100 << TIM_SMCR_SMS_Pos;
 8001356:	689a      	ldr	r2, [r3, #8]
 8001358:	f042 0204 	orr.w	r2, r2, #4
 800135c:	609a      	str	r2, [r3, #8]


	TIM5->CCMR1 |= 0b11 << TIM_CCMR1_CC1S_Pos;
 800135e:	699a      	ldr	r2, [r3, #24]
 8001360:	f042 0203 	orr.w	r2, r2, #3
 8001364:	619a      	str	r2, [r3, #24]
	TIM5->CCER |= TIM_CCER_CC1E;
 8001366:	6a1a      	ldr	r2, [r3, #32]
 8001368:	f042 0201 	orr.w	r2, r2, #1
 800136c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("dmb 0xF":::"memory");
 800136e:	f3bf 8f5f 	dmb	sy


	__DMB();
	TIM5->CR1 |= TIM_CR1_CEN;
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	f042 0201 	orr.w	r2, r2, #1
 8001378:	601a      	str	r2, [r3, #0]
	TIM5->EGR |= TIM_EGR_UG;
 800137a:	695a      	ldr	r2, [r3, #20]
 800137c:	f042 0201 	orr.w	r2, r2, #1
 8001380:	615a      	str	r2, [r3, #20]
}
 8001382:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001384:	2200      	movs	r2, #0
 8001386:	e7b5      	b.n	80012f4 <usb_timer_init+0x40>
 8001388:	58024400 	.word	0x58024400
 800138c:	e000ed00 	.word	0xe000ed00
 8001390:	e000e100 	.word	0xe000e100
 8001394:	40000c00 	.word	0x40000c00
 8001398:	00100030 	.word	0x00100030

0800139c <TIM5_IRQHandler>:

void TIM5_IRQHandler() {


	uint32_t tmp = TIM5->CCR1;
 800139c:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <TIM5_IRQHandler+0x30>)
 800139e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	//_last_usbtim_val = tmp << 6;
	_usbtim_val += tmp;
 80013a0:	4b0b      	ldr	r3, [pc, #44]	; (80013d0 <TIM5_IRQHandler+0x34>)
 80013a2:	6819      	ldr	r1, [r3, #0]
 80013a4:	440a      	add	r2, r1
 80013a6:	601a      	str	r2, [r3, #0]
	_usbtim_cnt++;
 80013a8:	490a      	ldr	r1, [pc, #40]	; (80013d4 <TIM5_IRQHandler+0x38>)
 80013aa:	780b      	ldrb	r3, [r1, #0]
 80013ac:	3301      	adds	r3, #1
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	700b      	strb	r3, [r1, #0]
	if(_usbtim_cnt >= 8) {
 80013b2:	2b07      	cmp	r3, #7
 80013b4:	d906      	bls.n	80013c4 <TIM5_IRQHandler+0x28>
		_last_usbtim_val = _usbtim_val << 3;
 80013b6:	00d2      	lsls	r2, r2, #3
 80013b8:	4b07      	ldr	r3, [pc, #28]	; (80013d8 <TIM5_IRQHandler+0x3c>)
 80013ba:	601a      	str	r2, [r3, #0]
		_usbtim_val = 0;
 80013bc:	2300      	movs	r3, #0
 80013be:	4a04      	ldr	r2, [pc, #16]	; (80013d0 <TIM5_IRQHandler+0x34>)
 80013c0:	6013      	str	r3, [r2, #0]
		_usbtim_cnt = 0;
 80013c2:	700b      	strb	r3, [r1, #0]
	}
	TIM5->SR = 0;
 80013c4:	4b01      	ldr	r3, [pc, #4]	; (80013cc <TIM5_IRQHandler+0x30>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	611a      	str	r2, [r3, #16]
}
 80013ca:	4770      	bx	lr
 80013cc:	40000c00 	.word	0x40000c00
 80013d0:	240029e0 	.word	0x240029e0
 80013d4:	240029e4 	.word	0x240029e4
 80013d8:	24000004 	.word	0x24000004

080013dc <usb_fb_value>:

uint32_t usb_fb_value() {
	return _last_usbtim_val;
}
 80013dc:	4b01      	ldr	r3, [pc, #4]	; (80013e4 <usb_fb_value+0x8>)
 80013de:	6818      	ldr	r0, [r3, #0]
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	24000004 	.word	0x24000004

080013e8 <main>:
  *
  */


int main(void)
{
 80013e8:	b508      	push	{r3, lr}

	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013ea:	4c48      	ldr	r4, [pc, #288]	; (800150c <main+0x124>)
 80013ec:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80013f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013f4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
	//SCB->VTOR = FLASH_BASE + 0x5000;
	system_init();
 80013f8:	f7fe ff6e 	bl	80002d8 <system_init>
	RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN); // Enable all D2 SRAM1, SRAM2, SRAM3
 80013fc:	4d44      	ldr	r5, [pc, #272]	; (8001510 <main+0x128>)
 80013fe:	f8d5 30dc 	ldr.w	r3, [r5, #220]	; 0xdc
 8001402:	f043 4360 	orr.w	r3, r3, #3758096384	; 0xe0000000
 8001406:	f8c5 30dc 	str.w	r3, [r5, #220]	; 0xdc
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800140a:	68e2      	ldr	r2, [r4, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800140c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001410:	0412      	lsls	r2, r2, #16
 8001412:	0c12      	lsrs	r2, r2, #16
  reg_value  =  (reg_value                                   |
 8001414:	4b3f      	ldr	r3, [pc, #252]	; (8001514 <main+0x12c>)
 8001416:	4313      	orrs	r3, r2
  SCB->AIRCR =  reg_value;
 8001418:	60e3      	str	r3, [r4, #12]
	NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
	HAL_Init();
 800141a:	f000 f95f 	bl	80016dc <HAL_Init>

	RCC->AHB4ENR |= RCC_AHB4ENR_GPIOBEN;
 800141e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8001422:	f043 0302 	orr.w	r3, r3, #2
 8001426:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
	MODIFY_REG(GPIOB->MODER, GPIO_MODER_MODE3_Msk, 0b01 << GPIO_MODER_MODE3_Pos);
 800142a:	4b3b      	ldr	r3, [pc, #236]	; (8001518 <main+0x130>)
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001432:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001436:	601a      	str	r2, [r3, #0]
	MODIFY_REG(GPIOB->OTYPER, GPIO_OTYPER_OT3_Msk, 0b0 << GPIO_OTYPER_OT3_Pos);
 8001438:	685a      	ldr	r2, [r3, #4]
 800143a:	f022 0208 	bic.w	r2, r2, #8
 800143e:	605a      	str	r2, [r3, #4]
	MODIFY_REG(GPIOB->OSPEEDR, GPIO_OSPEEDR_OSPEED3_Msk, 0b11 << GPIO_OSPEEDR_OSPEED3_Pos);
 8001440:	689a      	ldr	r2, [r3, #8]
 8001442:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8001446:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8001448:	f3bf 8f4f 	dsb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800144c:	2300      	movs	r3, #0
 800144e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8001452:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001456:	f8d4 4080 	ldr.w	r4, [r4, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800145a:	f3c4 304e 	ubfx	r0, r4, #13, #15
 800145e:	e000      	b.n	8001462 <main+0x7a>
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
    } while(sets-- != 0U);
 8001460:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001462:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001466:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800146a:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 800146e:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8001472:	4926      	ldr	r1, [pc, #152]	; (800150c <main+0x124>)
 8001474:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8001478:	4613      	mov	r3, r2
 800147a:	3a01      	subs	r2, #1
 800147c:	2b00      	cmp	r3, #0
 800147e:	d1f2      	bne.n	8001466 <main+0x7e>
    } while(sets-- != 0U);
 8001480:	1e43      	subs	r3, r0, #1
 8001482:	2800      	cmp	r0, #0
 8001484:	d1ec      	bne.n	8001460 <main+0x78>
 8001486:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800148a:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800148e:	2200      	movs	r2, #0
 8001490:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001494:	f3bf 8f4f 	dsb	sy
    SCB->CCR &= ~(uint32_t)SCB_CCR_DC_Msk;  /* disable D-Cache */
 8001498:	694a      	ldr	r2, [r1, #20]
 800149a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800149e:	614a      	str	r2, [r1, #20]
 80014a0:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 80014a4:	f8d1 4080 	ldr.w	r4, [r1, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80014a8:	f3c4 304e 	ubfx	r0, r4, #13, #15
 80014ac:	e000      	b.n	80014b0 <main+0xc8>
    } while(sets-- != 0U);
 80014ae:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80014b0:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80014b4:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80014b8:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 80014bc:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 80014c0:	4912      	ldr	r1, [pc, #72]	; (800150c <main+0x124>)
 80014c2:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 80014c6:	4613      	mov	r3, r2
 80014c8:	3a01      	subs	r2, #1
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d1f2      	bne.n	80014b4 <main+0xcc>
    } while(sets-- != 0U);
 80014ce:	1e43      	subs	r3, r0, #1
 80014d0:	2800      	cmp	r0, #0
 80014d2:	d1ec      	bne.n	80014ae <main+0xc6>
 80014d4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80014d8:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
 80014dc:	f3bf 8f4f 	dsb	sy

	__DSB();
	SCB_InvalidateDCache();
	SCB_DisableDCache();
	__DSB();
	mpu_init();
 80014e0:	f7ff fba8 	bl	8000c34 <mpu_init>


	i2c1_init();
 80014e4:	f7ff f97a 	bl	80007dc <i2c1_init>
	es8388_init(0);
 80014e8:	2000      	movs	r0, #0
 80014ea:	f7ff f8b9 	bl	8000660 <es8388_init>
	i2sclock_init();
 80014ee:	f7ff fad3 	bl	8000a98 <i2sclock_init>


	sai_init();
 80014f2:	f7ff fd53 	bl	8000f9c <sai_init>
	//sai_instance_dma_configure(SAI1);
	i2sclock_select(48000);
 80014f6:	f64b 3080 	movw	r0, #48000	; 0xbb80
 80014fa:	f7ff fb11 	bl	8000b20 <i2sclock_select>
	//sai_enable();

	usb_timer_init();
 80014fe:	f7ff fed9 	bl	80012b4 <usb_timer_init>
	usb_clock_init();
 8001502:	f7fe ffad 	bl	8000460 <usb_clock_init>
    MX_USB_DEVICE_Init();
 8001506:	f003 fe39 	bl	800517c <MX_USB_DEVICE_Init>


    while (1)
 800150a:	e7fe      	b.n	800150a <main+0x122>
 800150c:	e000ed00 	.word	0xe000ed00
 8001510:	58024400 	.word	0x58024400
 8001514:	05fa0300 	.word	0x05fa0300
 8001518:	58020400 	.word	0x58020400

0800151c <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 800151c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800151e:	e7fe      	b.n	800151e <Error_Handler+0x2>

08001520 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001520:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001522:	4b07      	ldr	r3, [pc, #28]	; (8001540 <HAL_MspInit+0x20>)
 8001524:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8001528:	f042 0202 	orr.w	r2, r2, #2
 800152c:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8001530:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001534:	f003 0302 	and.w	r3, r3, #2
 8001538:	9301      	str	r3, [sp, #4]
 800153a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800153c:	b002      	add	sp, #8
 800153e:	4770      	bx	lr
 8001540:	58024400 	.word	0x58024400

08001544 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001544:	e7fe      	b.n	8001544 <NMI_Handler>

08001546 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001546:	e7fe      	b.n	8001546 <HardFault_Handler>

08001548 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001548:	e7fe      	b.n	8001548 <MemManage_Handler>

0800154a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800154a:	e7fe      	b.n	800154a <BusFault_Handler>

0800154c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800154c:	e7fe      	b.n	800154c <UsageFault_Handler>

0800154e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800154e:	4770      	bx	lr

08001550 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001550:	4770      	bx	lr

08001552 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001552:	4770      	bx	lr

08001554 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001554:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001556:	f000 f8ef 	bl	8001738 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800155a:	bd08      	pop	{r3, pc}

0800155c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 800155c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 800155e:	4802      	ldr	r0, [pc, #8]	; (8001568 <OTG_HS_IRQHandler+0xc>)
 8001560:	f000 fc36 	bl	8001dd0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001564:	bd08      	pop	{r3, pc}
 8001566:	bf00      	nop
 8001568:	24003510 	.word	0x24003510

0800156c <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800156c:	4a27      	ldr	r2, [pc, #156]	; (800160c <SystemInit+0xa0>)
 800156e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001572:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001576:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800157a:	4b25      	ldr	r3, [pc, #148]	; (8001610 <SystemInit+0xa4>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 030f 	and.w	r3, r3, #15
 8001582:	2b06      	cmp	r3, #6
 8001584:	d806      	bhi.n	8001594 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001586:	4a22      	ldr	r2, [pc, #136]	; (8001610 <SystemInit+0xa4>)
 8001588:	6813      	ldr	r3, [r2, #0]
 800158a:	f023 030f 	bic.w	r3, r3, #15
 800158e:	f043 0307 	orr.w	r3, r3, #7
 8001592:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001594:	4b1f      	ldr	r3, [pc, #124]	; (8001614 <SystemInit+0xa8>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	f042 0201 	orr.w	r2, r2, #1
 800159c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800159e:	2200      	movs	r2, #0
 80015a0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80015a2:	6819      	ldr	r1, [r3, #0]
 80015a4:	4a1c      	ldr	r2, [pc, #112]	; (8001618 <SystemInit+0xac>)
 80015a6:	400a      	ands	r2, r1
 80015a8:	601a      	str	r2, [r3, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80015aa:	4b19      	ldr	r3, [pc, #100]	; (8001610 <SystemInit+0xa4>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f013 0f08 	tst.w	r3, #8
 80015b2:	d006      	beq.n	80015c2 <SystemInit+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80015b4:	4a16      	ldr	r2, [pc, #88]	; (8001610 <SystemInit+0xa4>)
 80015b6:	6813      	ldr	r3, [r2, #0]
 80015b8:	f023 030f 	bic.w	r3, r3, #15
 80015bc:	f043 0307 	orr.w	r3, r3, #7
 80015c0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80015c2:	4b14      	ldr	r3, [pc, #80]	; (8001614 <SystemInit+0xa8>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80015c8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80015ca:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80015cc:	4913      	ldr	r1, [pc, #76]	; (800161c <SystemInit+0xb0>)
 80015ce:	6299      	str	r1, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80015d0:	4913      	ldr	r1, [pc, #76]	; (8001620 <SystemInit+0xb4>)
 80015d2:	62d9      	str	r1, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80015d4:	4913      	ldr	r1, [pc, #76]	; (8001624 <SystemInit+0xb8>)
 80015d6:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80015d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80015da:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80015dc:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80015de:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80015e0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015e2:	6819      	ldr	r1, [r3, #0]
 80015e4:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80015e8:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80015ea:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80015ec:	4b0e      	ldr	r3, [pc, #56]	; (8001628 <SystemInit+0xbc>)
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	4b0e      	ldr	r3, [pc, #56]	; (800162c <SystemInit+0xc0>)
 80015f2:	4013      	ands	r3, r2
 80015f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80015f8:	d202      	bcs.n	8001600 <SystemInit+0x94>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80015fa:	4b0d      	ldr	r3, [pc, #52]	; (8001630 <SystemInit+0xc4>)
 80015fc:	2201      	movs	r2, #1
 80015fe:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001600:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <SystemInit+0xc8>)
 8001602:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001606:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	e000ed00 	.word	0xe000ed00
 8001610:	52002000 	.word	0x52002000
 8001614:	58024400 	.word	0x58024400
 8001618:	eaf6ed7f 	.word	0xeaf6ed7f
 800161c:	02020200 	.word	0x02020200
 8001620:	01ff0000 	.word	0x01ff0000
 8001624:	01010280 	.word	0x01010280
 8001628:	5c001000 	.word	0x5c001000
 800162c:	ffff0000 	.word	0xffff0000
 8001630:	51008108 	.word	0x51008108
 8001634:	52004000 	.word	0x52004000

08001638 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001638:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001670 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800163c:	f7ff ff96 	bl	800156c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001640:	480c      	ldr	r0, [pc, #48]	; (8001674 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001642:	490d      	ldr	r1, [pc, #52]	; (8001678 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001644:	4a0d      	ldr	r2, [pc, #52]	; (800167c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001646:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001648:	e002      	b.n	8001650 <LoopCopyDataInit>

0800164a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800164a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800164c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800164e:	3304      	adds	r3, #4

08001650 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001650:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001652:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001654:	d3f9      	bcc.n	800164a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001656:	4a0a      	ldr	r2, [pc, #40]	; (8001680 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001658:	4c0a      	ldr	r4, [pc, #40]	; (8001684 <LoopFillZerobss+0x22>)
  movs r3, #0
 800165a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800165c:	e001      	b.n	8001662 <LoopFillZerobss>

0800165e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800165e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001660:	3204      	adds	r2, #4

08001662 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001662:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001664:	d3fb      	bcc.n	800165e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001666:	f004 f823 	bl	80056b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800166a:	f7ff febd 	bl	80013e8 <main>
  bx  lr
 800166e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001670:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001674:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001678:	24000184 	.word	0x24000184
  ldr r2, =_sidata
 800167c:	08005b94 	.word	0x08005b94
  ldr r2, =_sbss
 8001680:	240001a0 	.word	0x240001a0
  ldr r4, =_ebss
 8001684:	24003918 	.word	0x24003918

08001688 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001688:	e7fe      	b.n	8001688 <ADC3_IRQHandler>
	...

0800168c <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800168c:	4b10      	ldr	r3, [pc, #64]	; (80016d0 <HAL_InitTick+0x44>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	b90b      	cbnz	r3, 8001696 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 8001692:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001694:	4770      	bx	lr
{
 8001696:	b510      	push	{r4, lr}
 8001698:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800169a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800169e:	fbb0 f3f3 	udiv	r3, r0, r3
 80016a2:	4a0c      	ldr	r2, [pc, #48]	; (80016d4 <HAL_InitTick+0x48>)
 80016a4:	6810      	ldr	r0, [r2, #0]
 80016a6:	fbb0 f0f3 	udiv	r0, r0, r3
 80016aa:	f000 f8bd 	bl	8001828 <HAL_SYSTICK_Config>
 80016ae:	b968      	cbnz	r0, 80016cc <HAL_InitTick+0x40>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016b0:	2c0f      	cmp	r4, #15
 80016b2:	d901      	bls.n	80016b8 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 80016b4:	2001      	movs	r0, #1
 80016b6:	e00a      	b.n	80016ce <HAL_InitTick+0x42>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016b8:	2200      	movs	r2, #0
 80016ba:	4621      	mov	r1, r4
 80016bc:	f04f 30ff 	mov.w	r0, #4294967295
 80016c0:	f000 f872 	bl	80017a8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016c4:	4b04      	ldr	r3, [pc, #16]	; (80016d8 <HAL_InitTick+0x4c>)
 80016c6:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 80016c8:	2000      	movs	r0, #0
 80016ca:	e000      	b.n	80016ce <HAL_InitTick+0x42>
      return HAL_ERROR;
 80016cc:	2001      	movs	r0, #1
}
 80016ce:	bd10      	pop	{r4, pc}
 80016d0:	24000010 	.word	0x24000010
 80016d4:	24000008 	.word	0x24000008
 80016d8:	24000014 	.word	0x24000014

080016dc <HAL_Init>:
{
 80016dc:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016de:	2003      	movs	r0, #3
 80016e0:	f000 f850 	bl	8001784 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80016e4:	f000 ffc8 	bl	8002678 <HAL_RCC_GetSysClockFreq>
 80016e8:	490f      	ldr	r1, [pc, #60]	; (8001728 <HAL_Init+0x4c>)
 80016ea:	698b      	ldr	r3, [r1, #24]
 80016ec:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80016f0:	4a0e      	ldr	r2, [pc, #56]	; (800172c <HAL_Init+0x50>)
 80016f2:	5cd3      	ldrb	r3, [r2, r3]
 80016f4:	f003 031f 	and.w	r3, r3, #31
 80016f8:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80016fa:	698b      	ldr	r3, [r1, #24]
 80016fc:	f003 030f 	and.w	r3, r3, #15
 8001700:	5cd3      	ldrb	r3, [r2, r3]
 8001702:	f003 031f 	and.w	r3, r3, #31
 8001706:	fa20 f303 	lsr.w	r3, r0, r3
 800170a:	4a09      	ldr	r2, [pc, #36]	; (8001730 <HAL_Init+0x54>)
 800170c:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 800170e:	4b09      	ldr	r3, [pc, #36]	; (8001734 <HAL_Init+0x58>)
 8001710:	6018      	str	r0, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001712:	2000      	movs	r0, #0
 8001714:	f7ff ffba 	bl	800168c <HAL_InitTick>
 8001718:	b110      	cbz	r0, 8001720 <HAL_Init+0x44>
    return HAL_ERROR;
 800171a:	2401      	movs	r4, #1
}
 800171c:	4620      	mov	r0, r4
 800171e:	bd10      	pop	{r4, pc}
 8001720:	4604      	mov	r4, r0
  HAL_MspInit();
 8001722:	f7ff fefd 	bl	8001520 <HAL_MspInit>
  return HAL_OK;
 8001726:	e7f9      	b.n	800171c <HAL_Init+0x40>
 8001728:	58024400 	.word	0x58024400
 800172c:	08005b3c 	.word	0x08005b3c
 8001730:	2400000c 	.word	0x2400000c
 8001734:	24000008 	.word	0x24000008

08001738 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001738:	4b03      	ldr	r3, [pc, #12]	; (8001748 <HAL_IncTick+0x10>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	4a03      	ldr	r2, [pc, #12]	; (800174c <HAL_IncTick+0x14>)
 800173e:	6811      	ldr	r1, [r2, #0]
 8001740:	440b      	add	r3, r1
 8001742:	6013      	str	r3, [r2, #0]
}
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	24000010 	.word	0x24000010
 800174c:	240029e8 	.word	0x240029e8

08001750 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001750:	4b01      	ldr	r3, [pc, #4]	; (8001758 <HAL_GetTick+0x8>)
 8001752:	6818      	ldr	r0, [r3, #0]
}
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	240029e8 	.word	0x240029e8

0800175c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800175c:	b538      	push	{r3, r4, r5, lr}
 800175e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001760:	f7ff fff6 	bl	8001750 <HAL_GetTick>
 8001764:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001766:	f1b4 3fff 	cmp.w	r4, #4294967295
 800176a:	d002      	beq.n	8001772 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 800176c:	4b04      	ldr	r3, [pc, #16]	; (8001780 <HAL_Delay+0x24>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001772:	f7ff ffed 	bl	8001750 <HAL_GetTick>
 8001776:	1b40      	subs	r0, r0, r5
 8001778:	42a0      	cmp	r0, r4
 800177a:	d3fa      	bcc.n	8001772 <HAL_Delay+0x16>
  {
  }
}
 800177c:	bd38      	pop	{r3, r4, r5, pc}
 800177e:	bf00      	nop
 8001780:	24000010 	.word	0x24000010

08001784 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001784:	4906      	ldr	r1, [pc, #24]	; (80017a0 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8001786:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001788:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800178c:	041b      	lsls	r3, r3, #16
 800178e:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001790:	0200      	lsls	r0, r0, #8
 8001792:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001796:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001798:	4a02      	ldr	r2, [pc, #8]	; (80017a4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800179a:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 800179c:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800179e:	4770      	bx	lr
 80017a0:	e000ed00 	.word	0xe000ed00
 80017a4:	05fa0000 	.word	0x05fa0000

080017a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017a8:	b430      	push	{r4, r5}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017aa:	4b15      	ldr	r3, [pc, #84]	; (8001800 <HAL_NVIC_SetPriority+0x58>)
 80017ac:	68db      	ldr	r3, [r3, #12]
 80017ae:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017b2:	f1c3 0407 	rsb	r4, r3, #7
 80017b6:	2c04      	cmp	r4, #4
 80017b8:	bf28      	it	cs
 80017ba:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017bc:	1d1d      	adds	r5, r3, #4
 80017be:	2d06      	cmp	r5, #6
 80017c0:	d914      	bls.n	80017ec <HAL_NVIC_SetPriority+0x44>
 80017c2:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c4:	f04f 35ff 	mov.w	r5, #4294967295
 80017c8:	fa05 f404 	lsl.w	r4, r5, r4
 80017cc:	ea21 0104 	bic.w	r1, r1, r4
 80017d0:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017d2:	fa05 f303 	lsl.w	r3, r5, r3
 80017d6:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017da:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80017dc:	2800      	cmp	r0, #0
 80017de:	db07      	blt.n	80017f0 <HAL_NVIC_SetPriority+0x48>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e0:	0109      	lsls	r1, r1, #4
 80017e2:	b2c9      	uxtb	r1, r1
 80017e4:	4b07      	ldr	r3, [pc, #28]	; (8001804 <HAL_NVIC_SetPriority+0x5c>)
 80017e6:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80017e8:	bc30      	pop	{r4, r5}
 80017ea:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ec:	2300      	movs	r3, #0
 80017ee:	e7e9      	b.n	80017c4 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f0:	f000 000f 	and.w	r0, r0, #15
 80017f4:	0109      	lsls	r1, r1, #4
 80017f6:	b2c9      	uxtb	r1, r1
 80017f8:	4b03      	ldr	r3, [pc, #12]	; (8001808 <HAL_NVIC_SetPriority+0x60>)
 80017fa:	5419      	strb	r1, [r3, r0]
 80017fc:	e7f4      	b.n	80017e8 <HAL_NVIC_SetPriority+0x40>
 80017fe:	bf00      	nop
 8001800:	e000ed00 	.word	0xe000ed00
 8001804:	e000e400 	.word	0xe000e400
 8001808:	e000ed14 	.word	0xe000ed14

0800180c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800180c:	2800      	cmp	r0, #0
 800180e:	db07      	blt.n	8001820 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001810:	f000 021f 	and.w	r2, r0, #31
 8001814:	0940      	lsrs	r0, r0, #5
 8001816:	2301      	movs	r3, #1
 8001818:	4093      	lsls	r3, r2
 800181a:	4a02      	ldr	r2, [pc, #8]	; (8001824 <HAL_NVIC_EnableIRQ+0x18>)
 800181c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	e000e100 	.word	0xe000e100

08001828 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001828:	3801      	subs	r0, #1
 800182a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800182e:	d20a      	bcs.n	8001846 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001830:	4b06      	ldr	r3, [pc, #24]	; (800184c <HAL_SYSTICK_Config+0x24>)
 8001832:	6058      	str	r0, [r3, #4]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001834:	4a06      	ldr	r2, [pc, #24]	; (8001850 <HAL_SYSTICK_Config+0x28>)
 8001836:	21f0      	movs	r1, #240	; 0xf0
 8001838:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800183c:	2000      	movs	r0, #0
 800183e:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001840:	2207      	movs	r2, #7
 8001842:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001844:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001846:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	e000e010 	.word	0xe000e010
 8001850:	e000ed00 	.word	0xe000ed00

08001854 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001854:	b4f0      	push	{r4, r5, r6, r7}
 8001856:	b082      	sub	sp, #8
  uint32_t position = 0x00U;
 8001858:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800185a:	e05f      	b.n	800191c <HAL_GPIO_Init+0xc8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800185c:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800185e:	005f      	lsls	r7, r3, #1
 8001860:	2503      	movs	r5, #3
 8001862:	40bd      	lsls	r5, r7
 8001864:	ea26 0605 	bic.w	r6, r6, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001868:	68cd      	ldr	r5, [r1, #12]
 800186a:	40bd      	lsls	r5, r7
 800186c:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 800186e:	6085      	str	r5, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001870:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001872:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001876:	684d      	ldr	r5, [r1, #4]
 8001878:	f3c5 1400 	ubfx	r4, r5, #4, #1
 800187c:	409c      	lsls	r4, r3
 800187e:	4334      	orrs	r4, r6
        GPIOx->OTYPER = temp;
 8001880:	6044      	str	r4, [r0, #4]
 8001882:	e05a      	b.n	800193a <HAL_GPIO_Init+0xe6>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001884:	08dd      	lsrs	r5, r3, #3
 8001886:	3508      	adds	r5, #8
 8001888:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800188c:	f003 0407 	and.w	r4, r3, #7
 8001890:	00a6      	lsls	r6, r4, #2
 8001892:	240f      	movs	r4, #15
 8001894:	40b4      	lsls	r4, r6
 8001896:	ea27 0704 	bic.w	r7, r7, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800189a:	690c      	ldr	r4, [r1, #16]
 800189c:	40b4      	lsls	r4, r6
 800189e:	433c      	orrs	r4, r7
        GPIOx->AFR[position >> 3U] = temp;
 80018a0:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 80018a4:	e05d      	b.n	8001962 <HAL_GPIO_Init+0x10e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80018a6:	2409      	movs	r4, #9
 80018a8:	e000      	b.n	80018ac <HAL_GPIO_Init+0x58>
 80018aa:	2400      	movs	r4, #0
 80018ac:	40b4      	lsls	r4, r6
 80018ae:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018b0:	3502      	adds	r5, #2
 80018b2:	4e5f      	ldr	r6, [pc, #380]	; (8001a30 <HAL_GPIO_Init+0x1dc>)
 80018b4:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018b8:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 80018bc:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 80018be:	43d4      	mvns	r4, r2
 80018c0:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018c4:	684f      	ldr	r7, [r1, #4]
 80018c6:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80018ca:	d001      	beq.n	80018d0 <HAL_GPIO_Init+0x7c>
        {
          temp |= iocurrent;
 80018cc:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 80018d0:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 80018d4:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 80018d6:	686e      	ldr	r6, [r5, #4]
        temp &= ~(iocurrent);
 80018d8:	ea04 0506 	and.w	r5, r4, r6
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018dc:	684f      	ldr	r7, [r1, #4]
 80018de:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
 80018e2:	d001      	beq.n	80018e8 <HAL_GPIO_Init+0x94>
        {
          temp |= iocurrent;
 80018e4:	ea42 0506 	orr.w	r5, r2, r6
        }
        EXTI->FTSR1 = temp;
 80018e8:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 80018ec:	6075      	str	r5, [r6, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80018ee:	4d51      	ldr	r5, [pc, #324]	; (8001a34 <HAL_GPIO_Init+0x1e0>)
 80018f0:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 80018f2:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018f6:	684f      	ldr	r7, [r1, #4]
 80018f8:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80018fc:	d001      	beq.n	8001902 <HAL_GPIO_Init+0xae>
        {
          temp |= iocurrent;
 80018fe:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001902:	4d4c      	ldr	r5, [pc, #304]	; (8001a34 <HAL_GPIO_Init+0x1e0>)
 8001904:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001906:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 8001908:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800190a:	684e      	ldr	r6, [r1, #4]
 800190c:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 8001910:	d001      	beq.n	8001916 <HAL_GPIO_Init+0xc2>
        {
          temp |= iocurrent;
 8001912:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001916:	4a47      	ldr	r2, [pc, #284]	; (8001a34 <HAL_GPIO_Init+0x1e0>)
 8001918:	6014      	str	r4, [r2, #0]
      }
    }

    position++;
 800191a:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800191c:	680a      	ldr	r2, [r1, #0]
 800191e:	fa32 f403 	lsrs.w	r4, r2, r3
 8001922:	f000 8082 	beq.w	8001a2a <HAL_GPIO_Init+0x1d6>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001926:	2401      	movs	r4, #1
 8001928:	409c      	lsls	r4, r3
    if (iocurrent != 0x00U)
 800192a:	4022      	ands	r2, r4
 800192c:	d0f5      	beq.n	800191a <HAL_GPIO_Init+0xc6>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800192e:	684d      	ldr	r5, [r1, #4]
 8001930:	f005 0503 	and.w	r5, r5, #3
 8001934:	3d01      	subs	r5, #1
 8001936:	2d01      	cmp	r5, #1
 8001938:	d990      	bls.n	800185c <HAL_GPIO_Init+0x8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800193a:	684c      	ldr	r4, [r1, #4]
 800193c:	f004 0403 	and.w	r4, r4, #3
 8001940:	2c03      	cmp	r4, #3
 8001942:	d009      	beq.n	8001958 <HAL_GPIO_Init+0x104>
      temp = GPIOx->PUPDR;
 8001944:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001946:	005e      	lsls	r6, r3, #1
 8001948:	2403      	movs	r4, #3
 800194a:	40b4      	lsls	r4, r6
 800194c:	ea25 0504 	bic.w	r5, r5, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001950:	688c      	ldr	r4, [r1, #8]
 8001952:	40b4      	lsls	r4, r6
 8001954:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8001956:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001958:	684c      	ldr	r4, [r1, #4]
 800195a:	f004 0403 	and.w	r4, r4, #3
 800195e:	2c02      	cmp	r4, #2
 8001960:	d090      	beq.n	8001884 <HAL_GPIO_Init+0x30>
      temp = GPIOx->MODER;
 8001962:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001964:	005e      	lsls	r6, r3, #1
 8001966:	2403      	movs	r4, #3
 8001968:	40b4      	lsls	r4, r6
 800196a:	ea25 0504 	bic.w	r5, r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800196e:	684c      	ldr	r4, [r1, #4]
 8001970:	f004 0403 	and.w	r4, r4, #3
 8001974:	40b4      	lsls	r4, r6
 8001976:	432c      	orrs	r4, r5
      GPIOx->MODER = temp;
 8001978:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800197a:	684c      	ldr	r4, [r1, #4]
 800197c:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 8001980:	d0cb      	beq.n	800191a <HAL_GPIO_Init+0xc6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001982:	4c2d      	ldr	r4, [pc, #180]	; (8001a38 <HAL_GPIO_Init+0x1e4>)
 8001984:	f8d4 50f4 	ldr.w	r5, [r4, #244]	; 0xf4
 8001988:	f045 0502 	orr.w	r5, r5, #2
 800198c:	f8c4 50f4 	str.w	r5, [r4, #244]	; 0xf4
 8001990:	f8d4 40f4 	ldr.w	r4, [r4, #244]	; 0xf4
 8001994:	f004 0402 	and.w	r4, r4, #2
 8001998:	9401      	str	r4, [sp, #4]
 800199a:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800199c:	089d      	lsrs	r5, r3, #2
 800199e:	1cae      	adds	r6, r5, #2
 80019a0:	4c23      	ldr	r4, [pc, #140]	; (8001a30 <HAL_GPIO_Init+0x1dc>)
 80019a2:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80019a6:	f003 0403 	and.w	r4, r3, #3
 80019aa:	00a6      	lsls	r6, r4, #2
 80019ac:	240f      	movs	r4, #15
 80019ae:	40b4      	lsls	r4, r6
 80019b0:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80019b4:	4c21      	ldr	r4, [pc, #132]	; (8001a3c <HAL_GPIO_Init+0x1e8>)
 80019b6:	42a0      	cmp	r0, r4
 80019b8:	f43f af77 	beq.w	80018aa <HAL_GPIO_Init+0x56>
 80019bc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80019c0:	42a0      	cmp	r0, r4
 80019c2:	d022      	beq.n	8001a0a <HAL_GPIO_Init+0x1b6>
 80019c4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80019c8:	42a0      	cmp	r0, r4
 80019ca:	d020      	beq.n	8001a0e <HAL_GPIO_Init+0x1ba>
 80019cc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80019d0:	42a0      	cmp	r0, r4
 80019d2:	d01e      	beq.n	8001a12 <HAL_GPIO_Init+0x1be>
 80019d4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80019d8:	42a0      	cmp	r0, r4
 80019da:	d01c      	beq.n	8001a16 <HAL_GPIO_Init+0x1c2>
 80019dc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80019e0:	42a0      	cmp	r0, r4
 80019e2:	d01a      	beq.n	8001a1a <HAL_GPIO_Init+0x1c6>
 80019e4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80019e8:	42a0      	cmp	r0, r4
 80019ea:	d018      	beq.n	8001a1e <HAL_GPIO_Init+0x1ca>
 80019ec:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80019f0:	42a0      	cmp	r0, r4
 80019f2:	d016      	beq.n	8001a22 <HAL_GPIO_Init+0x1ce>
 80019f4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80019f8:	42a0      	cmp	r0, r4
 80019fa:	d014      	beq.n	8001a26 <HAL_GPIO_Init+0x1d2>
 80019fc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001a00:	42a0      	cmp	r0, r4
 8001a02:	f43f af50 	beq.w	80018a6 <HAL_GPIO_Init+0x52>
 8001a06:	240a      	movs	r4, #10
 8001a08:	e750      	b.n	80018ac <HAL_GPIO_Init+0x58>
 8001a0a:	2401      	movs	r4, #1
 8001a0c:	e74e      	b.n	80018ac <HAL_GPIO_Init+0x58>
 8001a0e:	2402      	movs	r4, #2
 8001a10:	e74c      	b.n	80018ac <HAL_GPIO_Init+0x58>
 8001a12:	2403      	movs	r4, #3
 8001a14:	e74a      	b.n	80018ac <HAL_GPIO_Init+0x58>
 8001a16:	2404      	movs	r4, #4
 8001a18:	e748      	b.n	80018ac <HAL_GPIO_Init+0x58>
 8001a1a:	2405      	movs	r4, #5
 8001a1c:	e746      	b.n	80018ac <HAL_GPIO_Init+0x58>
 8001a1e:	2406      	movs	r4, #6
 8001a20:	e744      	b.n	80018ac <HAL_GPIO_Init+0x58>
 8001a22:	2407      	movs	r4, #7
 8001a24:	e742      	b.n	80018ac <HAL_GPIO_Init+0x58>
 8001a26:	2408      	movs	r4, #8
 8001a28:	e740      	b.n	80018ac <HAL_GPIO_Init+0x58>
  }
}
 8001a2a:	b002      	add	sp, #8
 8001a2c:	bcf0      	pop	{r4, r5, r6, r7}
 8001a2e:	4770      	bx	lr
 8001a30:	58000400 	.word	0x58000400
 8001a34:	58000080 	.word	0x58000080
 8001a38:	58024400 	.word	0x58024400
 8001a3c:	58020000 	.word	0x58020000

08001a40 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a44:	b082      	sub	sp, #8
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a46:	f8d0 8000 	ldr.w	r8, [r0]
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 8001a4a:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8001a4e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8001a52:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001a54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d855      	bhi.n	8001b06 <PCD_WriteEmptyTxFifo+0xc6>
 8001a5a:	4607      	mov	r7, r0
 8001a5c:	460c      	mov	r4, r1
 8001a5e:	46c1      	mov	r9, r8
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 8001a60:	1a9b      	subs	r3, r3, r2

  if (len > ep->maxpacket)
 8001a62:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 8001a66:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001a6a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d300      	bcc.n	8001a72 <PCD_WriteEmptyTxFifo+0x32>
  len = ep->xfer_len - ep->xfer_count;
 8001a70:	461a      	mov	r2, r3
  {
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;
 8001a72:	f102 0a03 	add.w	sl, r2, #3
 8001a76:	ea4f 0a9a 	mov.w	sl, sl, lsr #2

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001a7a:	e015      	b.n	8001aa8 <PCD_WriteEmptyTxFifo+0x68>

    if (len > ep->maxpacket)
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
 8001a7c:	f106 0a03 	add.w	sl, r6, #3
 8001a80:	ea4f 0a9a 	mov.w	sl, sl, lsr #2

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001a84:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 8001a88:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8001a8c:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8001a8e:	7c3b      	ldrb	r3, [r7, #16]
 8001a90:	9300      	str	r3, [sp, #0]
 8001a92:	b2b3      	uxth	r3, r6
 8001a94:	b2e2      	uxtb	r2, r4
 8001a96:	4640      	mov	r0, r8
 8001a98:	f002 f856 	bl	8003b48 <USB_WritePacket>
                          (uint8_t)hpcd->Init.dma_enable);

    ep->xfer_buff  += len;
 8001a9c:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8001a9e:	4433      	add	r3, r6
 8001aa0:	64ab      	str	r3, [r5, #72]	; 0x48
    ep->xfer_count += len;
 8001aa2:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8001aa4:	441e      	add	r6, r3
 8001aa6:	656e      	str	r6, [r5, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001aa8:	eb09 1344 	add.w	r3, r9, r4, lsl #5
 8001aac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	4553      	cmp	r3, sl
 8001ab6:	d312      	bcc.n	8001ade <PCD_WriteEmptyTxFifo+0x9e>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001ab8:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 8001abc:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 8001ac0:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8001ac2:	6d13      	ldr	r3, [r2, #80]	; 0x50
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001ac4:	4299      	cmp	r1, r3
 8001ac6:	d20a      	bcs.n	8001ade <PCD_WriteEmptyTxFifo+0x9e>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001ac8:	b14b      	cbz	r3, 8001ade <PCD_WriteEmptyTxFifo+0x9e>
    len = ep->xfer_len - ep->xfer_count;
 8001aca:	1a5b      	subs	r3, r3, r1
    if (len > ep->maxpacket)
 8001acc:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 8001ad0:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 8001ad4:	6c56      	ldr	r6, [r2, #68]	; 0x44
 8001ad6:	429e      	cmp	r6, r3
 8001ad8:	d3d0      	bcc.n	8001a7c <PCD_WriteEmptyTxFifo+0x3c>
    len = ep->xfer_len - ep->xfer_count;
 8001ada:	461e      	mov	r6, r3
 8001adc:	e7ce      	b.n	8001a7c <PCD_WriteEmptyTxFifo+0x3c>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001ade:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
 8001ae2:	eb07 0780 	add.w	r7, r7, r0, lsl #2
 8001ae6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001ae8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d80f      	bhi.n	8001b0e <PCD_WriteEmptyTxFifo+0xce>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001aee:	f004 040f 	and.w	r4, r4, #15
 8001af2:	2301      	movs	r3, #1
 8001af4:	40a3      	lsls	r3, r4
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001af6:	f8d8 4834 	ldr.w	r4, [r8, #2100]	; 0x834
 8001afa:	ea24 0403 	bic.w	r4, r4, r3
 8001afe:	f8c8 4834 	str.w	r4, [r8, #2100]	; 0x834
  }

  return HAL_OK;
 8001b02:	2000      	movs	r0, #0
 8001b04:	e000      	b.n	8001b08 <PCD_WriteEmptyTxFifo+0xc8>
    return HAL_ERROR;
 8001b06:	2001      	movs	r0, #1
}
 8001b08:	b002      	add	sp, #8
 8001b0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  return HAL_OK;
 8001b0e:	2000      	movs	r0, #0
 8001b10:	e7fa      	b.n	8001b08 <PCD_WriteEmptyTxFifo+0xc8>

08001b12 <HAL_PCD_Init>:
{
 8001b12:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b14:	b08b      	sub	sp, #44	; 0x2c
  if (hpcd == NULL)
 8001b16:	2800      	cmp	r0, #0
 8001b18:	f000 8093 	beq.w	8001c42 <HAL_PCD_Init+0x130>
 8001b1c:	4605      	mov	r5, r0
  USBx = hpcd->Instance;
 8001b1e:	6804      	ldr	r4, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b20:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 8001b24:	b32b      	cbz	r3, 8001b72 <HAL_PCD_Init+0x60>
  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b26:	2303      	movs	r3, #3
 8001b28:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001b2c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001b2e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001b32:	d101      	bne.n	8001b38 <HAL_PCD_Init+0x26>
    hpcd->Init.dma_enable = 0U;
 8001b34:	2300      	movs	r3, #0
 8001b36:	612b      	str	r3, [r5, #16]
  __HAL_PCD_DISABLE(hpcd);
 8001b38:	6828      	ldr	r0, [r5, #0]
 8001b3a:	f001 fd93 	bl	8003664 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b3e:	462c      	mov	r4, r5
 8001b40:	f854 7b10 	ldr.w	r7, [r4], #16
 8001b44:	466e      	mov	r6, sp
 8001b46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b48:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001b4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b4c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001b4e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b52:	e886 0003 	stmia.w	r6, {r0, r1}
 8001b56:	1d2b      	adds	r3, r5, #4
 8001b58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b5a:	4638      	mov	r0, r7
 8001b5c:	f001 fcbc 	bl	80034d8 <USB_CoreInit>
 8001b60:	4604      	mov	r4, r0
 8001b62:	b158      	cbz	r0, 8001b7c <HAL_PCD_Init+0x6a>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b64:	2302      	movs	r3, #2
 8001b66:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
    return HAL_ERROR;
 8001b6a:	2401      	movs	r4, #1
}
 8001b6c:	4620      	mov	r0, r4
 8001b6e:	b00b      	add	sp, #44	; 0x2c
 8001b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8001b72:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
    HAL_PCD_MspInit(hpcd);
 8001b76:	f003 fbe9 	bl	800534c <HAL_PCD_MspInit>
 8001b7a:	e7d4      	b.n	8001b26 <HAL_PCD_Init+0x14>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	6828      	ldr	r0, [r5, #0]
 8001b80:	f002 f9e2 	bl	8003f48 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b84:	4623      	mov	r3, r4
 8001b86:	e016      	b.n	8001bb6 <HAL_PCD_Init+0xa4>
    hpcd->IN_ep[i].is_in = 1U;
 8001b88:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8001b8c:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8001b90:	2101      	movs	r1, #1
 8001b92:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 8001b96:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001b9a:	f8a2 3042 	strh.w	r3, [r2, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	f882 103f 	strb.w	r1, [r2, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ba4:	6451      	str	r1, [r2, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ba6:	6491      	str	r1, [r2, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ba8:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8001bac:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8001bb0:	6511      	str	r1, [r2, #80]	; 0x50
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	6869      	ldr	r1, [r5, #4]
 8001bb8:	428b      	cmp	r3, r1
 8001bba:	d3e5      	bcc.n	8001b88 <HAL_PCD_Init+0x76>
 8001bbc:	e016      	b.n	8001bec <HAL_PCD_Init+0xda>
    hpcd->OUT_ep[i].is_in = 0U;
 8001bbe:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 8001bc2:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 8001bcc:	f883 41fc 	strb.w	r4, [r3, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001bd0:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001bd4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001bd8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001bdc:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 8001be0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001be4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001be8:	3401      	adds	r4, #1
 8001bea:	b2e4      	uxtb	r4, r4
 8001bec:	42a1      	cmp	r1, r4
 8001bee:	d8e6      	bhi.n	8001bbe <HAL_PCD_Init+0xac>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001bf0:	462c      	mov	r4, r5
 8001bf2:	f854 7b10 	ldr.w	r7, [r4], #16
 8001bf6:	466e      	mov	r6, sp
 8001bf8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bfa:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001bfc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bfe:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001c00:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c04:	e886 0003 	stmia.w	r6, {r0, r1}
 8001c08:	1d2b      	adds	r3, r5, #4
 8001c0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c0c:	4638      	mov	r0, r7
 8001c0e:	f001 fd81 	bl	8003714 <USB_DevInit>
 8001c12:	4604      	mov	r4, r0
 8001c14:	b960      	cbnz	r0, 8001c30 <HAL_PCD_Init+0x11e>
  hpcd->USB_Address = 0U;
 8001c16:	2300      	movs	r3, #0
 8001c18:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
 8001c22:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d008      	beq.n	8001c3a <HAL_PCD_Init+0x128>
  (void)USB_DevDisconnect(hpcd->Instance);
 8001c28:	6828      	ldr	r0, [r5, #0]
 8001c2a:	f002 f94a 	bl	8003ec2 <USB_DevDisconnect>
  return HAL_OK;
 8001c2e:	e79d      	b.n	8001b6c <HAL_PCD_Init+0x5a>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c30:	2302      	movs	r3, #2
 8001c32:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
    return HAL_ERROR;
 8001c36:	2401      	movs	r4, #1
 8001c38:	e798      	b.n	8001b6c <HAL_PCD_Init+0x5a>
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001c3a:	4628      	mov	r0, r5
 8001c3c:	f000 fcfe 	bl	800263c <HAL_PCDEx_ActivateLPM>
 8001c40:	e7f2      	b.n	8001c28 <HAL_PCD_Init+0x116>
    return HAL_ERROR;
 8001c42:	2401      	movs	r4, #1
 8001c44:	e792      	b.n	8001b6c <HAL_PCD_Init+0x5a>

08001c46 <HAL_PCD_Start>:
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c46:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(hpcd);
 8001c48:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d019      	beq.n	8001c84 <HAL_PCD_Start+0x3e>
{
 8001c50:	b510      	push	{r4, lr}
 8001c52:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001c54:	2301      	movs	r3, #1
 8001c56:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001c5a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d009      	beq.n	8001c74 <HAL_PCD_Start+0x2e>
  __HAL_PCD_ENABLE(hpcd);
 8001c60:	6820      	ldr	r0, [r4, #0]
 8001c62:	f001 fcf9 	bl	8003658 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001c66:	6820      	ldr	r0, [r4, #0]
 8001c68:	f002 f91d 	bl	8003ea6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001c6c:	2000      	movs	r0, #0
 8001c6e:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8001c72:	bd10      	pop	{r4, pc}
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001c74:	6983      	ldr	r3, [r0, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d0f2      	beq.n	8001c60 <HAL_PCD_Start+0x1a>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001c7a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8001c7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c80:	6393      	str	r3, [r2, #56]	; 0x38
 8001c82:	e7ed      	b.n	8001c60 <HAL_PCD_Start+0x1a>
  __HAL_LOCK(hpcd);
 8001c84:	2002      	movs	r0, #2
}
 8001c86:	4770      	bx	lr

08001c88 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001c88:	b570      	push	{r4, r5, r6, lr}
 8001c8a:	4604      	mov	r4, r0
 8001c8c:	460d      	mov	r5, r1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c8e:	6800      	ldr	r0, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001c90:	6c06      	ldr	r6, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001c92:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8001c96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c9a:	689a      	ldr	r2, [r3, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001c9c:	6921      	ldr	r1, [r4, #16]
 8001c9e:	2901      	cmp	r1, #1
 8001ca0:	d011      	beq.n	8001cc6 <PCD_EP_OutXfrComplete_int+0x3e>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001ca2:	4935      	ldr	r1, [pc, #212]	; (8001d78 <PCD_EP_OutXfrComplete_int+0xf0>)
 8001ca4:	428e      	cmp	r6, r1
 8001ca6:	d050      	beq.n	8001d4a <PCD_EP_OutXfrComplete_int+0xc2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001ca8:	b93d      	cbnz	r5, 8001cba <PCD_EP_OutXfrComplete_int+0x32>
 8001caa:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 8001cae:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001cb2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d058      	beq.n	8001d6c <PCD_EP_OutXfrComplete_int+0xe4>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001cba:	b2e9      	uxtb	r1, r5
 8001cbc:	4620      	mov	r0, r4
 8001cbe:	f003 fbe3 	bl	8005488 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
}
 8001cc2:	2000      	movs	r0, #0
 8001cc4:	bd70      	pop	{r4, r5, r6, pc}
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001cc6:	f012 0f08 	tst.w	r2, #8
 8001cca:	d009      	beq.n	8001ce0 <PCD_EP_OutXfrComplete_int+0x58>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001ccc:	492b      	ldr	r1, [pc, #172]	; (8001d7c <PCD_EP_OutXfrComplete_int+0xf4>)
 8001cce:	428e      	cmp	r6, r1
 8001cd0:	d9f7      	bls.n	8001cc2 <PCD_EP_OutXfrComplete_int+0x3a>
 8001cd2:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8001cd6:	d0f4      	beq.n	8001cc2 <PCD_EP_OutXfrComplete_int+0x3a>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001cd8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001cdc:	609a      	str	r2, [r3, #8]
 8001cde:	e7f0      	b.n	8001cc2 <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001ce0:	f012 0f20 	tst.w	r2, #32
 8001ce4:	d002      	beq.n	8001cec <PCD_EP_OutXfrComplete_int+0x64>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001ce6:	2220      	movs	r2, #32
 8001ce8:	609a      	str	r2, [r3, #8]
 8001cea:	e7ea      	b.n	8001cc2 <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001cec:	f012 0f28 	tst.w	r2, #40	; 0x28
 8001cf0:	d1e7      	bne.n	8001cc2 <PCD_EP_OutXfrComplete_int+0x3a>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001cf2:	4922      	ldr	r1, [pc, #136]	; (8001d7c <PCD_EP_OutXfrComplete_int+0xf4>)
 8001cf4:	428e      	cmp	r6, r1
 8001cf6:	d906      	bls.n	8001d06 <PCD_EP_OutXfrComplete_int+0x7e>
 8001cf8:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8001cfc:	d003      	beq.n	8001d06 <PCD_EP_OutXfrComplete_int+0x7e>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001cfe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001d02:	609a      	str	r2, [r3, #8]
 8001d04:	e7dd      	b.n	8001cc2 <PCD_EP_OutXfrComplete_int+0x3a>
          hpcd->OUT_ep[epnum].maxpacket -
 8001d06:	ebc5 02c5 	rsb	r2, r5, r5, lsl #3
 8001d0a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8001d0e:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8001d12:	691b      	ldr	r3, [r3, #16]
 8001d14:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8001d18:	1ac9      	subs	r1, r1, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8001d1a:	f8c2 1214 	str.w	r1, [r2, #532]	; 0x214
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8001d1e:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
 8001d22:	f8d2 3208 	ldr.w	r3, [r2, #520]	; 0x208
 8001d26:	440b      	add	r3, r1
 8001d28:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208
        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001d2c:	b915      	cbnz	r5, 8001d34 <PCD_EP_OutXfrComplete_int+0xac>
 8001d2e:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 8001d32:	b123      	cbz	r3, 8001d3e <PCD_EP_OutXfrComplete_int+0xb6>
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001d34:	b2e9      	uxtb	r1, r5
 8001d36:	4620      	mov	r0, r4
 8001d38:	f003 fba6 	bl	8005488 <HAL_PCD_DataOutStageCallback>
 8001d3c:	e7c1      	b.n	8001cc2 <PCD_EP_OutXfrComplete_int+0x3a>
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001d3e:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8001d42:	2101      	movs	r1, #1
 8001d44:	f002 f942 	bl	8003fcc <USB_EP0_OutStart>
 8001d48:	e7f4      	b.n	8001d34 <PCD_EP_OutXfrComplete_int+0xac>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001d4a:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8001d4e:	d003      	beq.n	8001d58 <PCD_EP_OutXfrComplete_int+0xd0>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001d50:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001d54:	609a      	str	r2, [r3, #8]
 8001d56:	e7b4      	b.n	8001cc2 <PCD_EP_OutXfrComplete_int+0x3a>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001d58:	f012 0f20 	tst.w	r2, #32
 8001d5c:	d001      	beq.n	8001d62 <PCD_EP_OutXfrComplete_int+0xda>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001d5e:	2220      	movs	r2, #32
 8001d60:	609a      	str	r2, [r3, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001d62:	b2e9      	uxtb	r1, r5
 8001d64:	4620      	mov	r0, r4
 8001d66:	f003 fb8f 	bl	8005488 <HAL_PCD_DataOutStageCallback>
 8001d6a:	e7aa      	b.n	8001cc2 <PCD_EP_OutXfrComplete_int+0x3a>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8001d6c:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8001d70:	2100      	movs	r1, #0
 8001d72:	f002 f92b 	bl	8003fcc <USB_EP0_OutStart>
 8001d76:	e7a0      	b.n	8001cba <PCD_EP_OutXfrComplete_int+0x32>
 8001d78:	4f54310a 	.word	0x4f54310a
 8001d7c:	4f54300a 	.word	0x4f54300a

08001d80 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001d80:	b538      	push	{r3, r4, r5, lr}
 8001d82:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d84:	6803      	ldr	r3, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001d86:	6c1d      	ldr	r5, [r3, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001d88:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8001d8c:	f8d3 1b08 	ldr.w	r1, [r3, #2824]	; 0xb08

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001d90:	4a0e      	ldr	r2, [pc, #56]	; (8001dcc <PCD_EP_OutSetupPacket_int+0x4c>)
 8001d92:	4295      	cmp	r5, r2
 8001d94:	d907      	bls.n	8001da6 <PCD_EP_OutSetupPacket_int+0x26>
 8001d96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d9a:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 8001d9e:	d002      	beq.n	8001da6 <PCD_EP_OutSetupPacket_int+0x26>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001da0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001da4:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8001da6:	4620      	mov	r0, r4
 8001da8:	f003 fb66 	bl	8005478 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8001dac:	4b07      	ldr	r3, [pc, #28]	; (8001dcc <PCD_EP_OutSetupPacket_int+0x4c>)
 8001dae:	429d      	cmp	r5, r3
 8001db0:	d902      	bls.n	8001db8 <PCD_EP_OutSetupPacket_int+0x38>
 8001db2:	6923      	ldr	r3, [r4, #16]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d001      	beq.n	8001dbc <PCD_EP_OutSetupPacket_int+0x3c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
  }

  return HAL_OK;
}
 8001db8:	2000      	movs	r0, #0
 8001dba:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001dbc:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8001dc0:	2101      	movs	r1, #1
 8001dc2:	6820      	ldr	r0, [r4, #0]
 8001dc4:	f002 f902 	bl	8003fcc <USB_EP0_OutStart>
 8001dc8:	e7f6      	b.n	8001db8 <PCD_EP_OutSetupPacket_int+0x38>
 8001dca:	bf00      	nop
 8001dcc:	4f54300a 	.word	0x4f54300a

08001dd0 <HAL_PCD_IRQHandler>:
{
 8001dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001dd4:	b083      	sub	sp, #12
 8001dd6:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001dd8:	6805      	ldr	r5, [r0, #0]
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001dda:	4628      	mov	r0, r5
 8001ddc:	f002 f8b0 	bl	8003f40 <USB_GetMode>
 8001de0:	b110      	cbz	r0, 8001de8 <HAL_PCD_IRQHandler+0x18>
}
 8001de2:	b003      	add	sp, #12
 8001de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001de8:	462f      	mov	r7, r5
 8001dea:	4606      	mov	r6, r0
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001dec:	6820      	ldr	r0, [r4, #0]
 8001dee:	f002 f876 	bl	8003ede <USB_ReadInterrupts>
 8001df2:	2800      	cmp	r0, #0
 8001df4:	d0f5      	beq.n	8001de2 <HAL_PCD_IRQHandler+0x12>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001df6:	6820      	ldr	r0, [r4, #0]
 8001df8:	f002 f871 	bl	8003ede <USB_ReadInterrupts>
 8001dfc:	f010 0f02 	tst.w	r0, #2
 8001e00:	d004      	beq.n	8001e0c <HAL_PCD_IRQHandler+0x3c>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001e02:	6822      	ldr	r2, [r4, #0]
 8001e04:	6953      	ldr	r3, [r2, #20]
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001e0c:	6820      	ldr	r0, [r4, #0]
 8001e0e:	f002 f866 	bl	8003ede <USB_ReadInterrupts>
 8001e12:	f010 0f10 	tst.w	r0, #16
 8001e16:	d015      	beq.n	8001e44 <HAL_PCD_IRQHandler+0x74>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e18:	6822      	ldr	r2, [r4, #0]
 8001e1a:	6993      	ldr	r3, [r2, #24]
 8001e1c:	f023 0310 	bic.w	r3, r3, #16
 8001e20:	6193      	str	r3, [r2, #24]
      temp = USBx->GRXSTSP;
 8001e22:	f8d5 8020 	ldr.w	r8, [r5, #32]
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001e26:	f008 090f 	and.w	r9, r8, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001e2a:	f3c8 4343 	ubfx	r3, r8, #17, #4
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	f000 8085 	beq.w	8001f3e <HAL_PCD_IRQHandler+0x16e>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001e34:	2b06      	cmp	r3, #6
 8001e36:	f000 80aa 	beq.w	8001f8e <HAL_PCD_IRQHandler+0x1be>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e3a:	6822      	ldr	r2, [r4, #0]
 8001e3c:	6993      	ldr	r3, [r2, #24]
 8001e3e:	f043 0310 	orr.w	r3, r3, #16
 8001e42:	6193      	str	r3, [r2, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001e44:	6820      	ldr	r0, [r4, #0]
 8001e46:	f002 f84a 	bl	8003ede <USB_ReadInterrupts>
 8001e4a:	f410 2f00 	tst.w	r0, #524288	; 0x80000
 8001e4e:	f040 80b0 	bne.w	8001fb2 <HAL_PCD_IRQHandler+0x1e2>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001e52:	6820      	ldr	r0, [r4, #0]
 8001e54:	f002 f843 	bl	8003ede <USB_ReadInterrupts>
 8001e58:	f410 2f80 	tst.w	r0, #262144	; 0x40000
 8001e5c:	f040 80f4 	bne.w	8002048 <HAL_PCD_IRQHandler+0x278>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001e60:	6820      	ldr	r0, [r4, #0]
 8001e62:	f002 f83c 	bl	8003ede <USB_ReadInterrupts>
 8001e66:	2800      	cmp	r0, #0
 8001e68:	f2c0 8165 	blt.w	8002136 <HAL_PCD_IRQHandler+0x366>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001e6c:	6820      	ldr	r0, [r4, #0]
 8001e6e:	f002 f836 	bl	8003ede <USB_ReadInterrupts>
 8001e72:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8001e76:	d00a      	beq.n	8001e8e <HAL_PCD_IRQHandler+0xbe>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001e78:	f8d5 3808 	ldr.w	r3, [r5, #2056]	; 0x808
 8001e7c:	f013 0f01 	tst.w	r3, #1
 8001e80:	f040 8173 	bne.w	800216a <HAL_PCD_IRQHandler+0x39a>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001e84:	6822      	ldr	r2, [r4, #0]
 8001e86:	6953      	ldr	r3, [r2, #20]
 8001e88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e8c:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001e8e:	6820      	ldr	r0, [r4, #0]
 8001e90:	f002 f825 	bl	8003ede <USB_ReadInterrupts>
 8001e94:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
 8001e98:	d015      	beq.n	8001ec6 <HAL_PCD_IRQHandler+0xf6>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001e9a:	6822      	ldr	r2, [r4, #0]
 8001e9c:	6953      	ldr	r3, [r2, #20]
 8001e9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ea2:	6153      	str	r3, [r2, #20]
      if (hpcd->LPM_State == LPM_L0)
 8001ea4:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	f040 8162 	bne.w	8002172 <HAL_PCD_IRQHandler+0x3a2>
        hpcd->LPM_State = LPM_L1;
 8001eae:	2101      	movs	r1, #1
 8001eb0:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001eb4:	6823      	ldr	r3, [r4, #0]
 8001eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eb8:	f3c3 0383 	ubfx	r3, r3, #2, #4
 8001ebc:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001ec0:	4620      	mov	r0, r4
 8001ec2:	f000 fbcf 	bl	8002664 <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001ec6:	6820      	ldr	r0, [r4, #0]
 8001ec8:	f002 f809 	bl	8003ede <USB_ReadInterrupts>
 8001ecc:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 8001ed0:	f040 8153 	bne.w	800217a <HAL_PCD_IRQHandler+0x3aa>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001ed4:	6820      	ldr	r0, [r4, #0]
 8001ed6:	f002 f802 	bl	8003ede <USB_ReadInterrupts>
 8001eda:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8001ede:	f040 81ab 	bne.w	8002238 <HAL_PCD_IRQHandler+0x468>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001ee2:	6820      	ldr	r0, [r4, #0]
 8001ee4:	f001 fffb 	bl	8003ede <USB_ReadInterrupts>
 8001ee8:	f010 0f08 	tst.w	r0, #8
 8001eec:	f040 81bc 	bne.w	8002268 <HAL_PCD_IRQHandler+0x498>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001ef0:	6820      	ldr	r0, [r4, #0]
 8001ef2:	f001 fff4 	bl	8003ede <USB_ReadInterrupts>
 8001ef6:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 8001efa:	f040 81be 	bne.w	800227a <HAL_PCD_IRQHandler+0x4aa>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001efe:	6820      	ldr	r0, [r4, #0]
 8001f00:	f001 ffed 	bl	8003ede <USB_ReadInterrupts>
 8001f04:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 8001f08:	f040 81c1 	bne.w	800228e <HAL_PCD_IRQHandler+0x4be>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001f0c:	6820      	ldr	r0, [r4, #0]
 8001f0e:	f001 ffe6 	bl	8003ede <USB_ReadInterrupts>
 8001f12:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8001f16:	f040 81c4 	bne.w	80022a2 <HAL_PCD_IRQHandler+0x4d2>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001f1a:	6820      	ldr	r0, [r4, #0]
 8001f1c:	f001 ffdf 	bl	8003ede <USB_ReadInterrupts>
 8001f20:	f010 0f04 	tst.w	r0, #4
 8001f24:	f43f af5d 	beq.w	8001de2 <HAL_PCD_IRQHandler+0x12>
      temp = hpcd->Instance->GOTGINT;
 8001f28:	6823      	ldr	r3, [r4, #0]
 8001f2a:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001f2c:	f015 0f04 	tst.w	r5, #4
 8001f30:	f040 81c0 	bne.w	80022b4 <HAL_PCD_IRQHandler+0x4e4>
      hpcd->Instance->GOTGINT |= temp;
 8001f34:	6822      	ldr	r2, [r4, #0]
 8001f36:	6853      	ldr	r3, [r2, #4]
 8001f38:	432b      	orrs	r3, r5
 8001f3a:	6053      	str	r3, [r2, #4]
 8001f3c:	e751      	b.n	8001de2 <HAL_PCD_IRQHandler+0x12>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001f3e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001f42:	ea18 0f03 	tst.w	r8, r3
 8001f46:	f43f af78 	beq.w	8001e3a <HAL_PCD_IRQHandler+0x6a>
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001f4a:	ea4f 1b18 	mov.w	fp, r8, lsr #4
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001f4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f52:	9301      	str	r3, [sp, #4]
 8001f54:	ebc9 0ac9 	rsb	sl, r9, r9, lsl #3
 8001f58:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
 8001f5c:	f3c8 120a 	ubfx	r2, r8, #4, #11
 8001f60:	f8da 1208 	ldr.w	r1, [sl, #520]	; 0x208
 8001f64:	4628      	mov	r0, r5
 8001f66:	f001 ff0d 	bl	8003d84 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f6a:	f3cb 0b0a 	ubfx	fp, fp, #0, #11
 8001f6e:	f8da 3208 	ldr.w	r3, [sl, #520]	; 0x208
 8001f72:	445b      	add	r3, fp
 8001f74:	f8ca 3208 	str.w	r3, [sl, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f78:	9b01      	ldr	r3, [sp, #4]
 8001f7a:	eba3 0309 	sub.w	r3, r3, r9
 8001f7e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001f82:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001f86:	445b      	add	r3, fp
 8001f88:	f8ca 3214 	str.w	r3, [sl, #532]	; 0x214
 8001f8c:	e755      	b.n	8001e3a <HAL_PCD_IRQHandler+0x6a>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001f8e:	2208      	movs	r2, #8
 8001f90:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8001f94:	4628      	mov	r0, r5
 8001f96:	f001 fef5 	bl	8003d84 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f9a:	f3c8 180a 	ubfx	r8, r8, #4, #11
 8001f9e:	ebc9 02c9 	rsb	r2, r9, r9, lsl #3
 8001fa2:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8001fa6:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 8001faa:	4443      	add	r3, r8
 8001fac:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 8001fb0:	e743      	b.n	8001e3a <HAL_PCD_IRQHandler+0x6a>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001fb2:	6820      	ldr	r0, [r4, #0]
 8001fb4:	f001 ff97 	bl	8003ee6 <USB_ReadDevAllOutEpInterrupt>
 8001fb8:	4680      	mov	r8, r0
      epnum = 0U;
 8001fba:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 8001fbc:	e017      	b.n	8001fee <HAL_PCD_IRQHandler+0x21e>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001fbe:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001fc8:	4649      	mov	r1, r9
 8001fca:	4620      	mov	r0, r4
 8001fcc:	f7ff fe5c 	bl	8001c88 <PCD_EP_OutXfrComplete_int>
 8001fd0:	e01d      	b.n	800200e <HAL_PCD_IRQHandler+0x23e>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001fd2:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8001fd6:	2208      	movs	r2, #8
 8001fd8:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001fdc:	4649      	mov	r1, r9
 8001fde:	4620      	mov	r0, r4
 8001fe0:	f7ff fece 	bl	8001d80 <PCD_EP_OutSetupPacket_int>
 8001fe4:	e016      	b.n	8002014 <HAL_PCD_IRQHandler+0x244>
        epnum++;
 8001fe6:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 8001fea:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 8001fee:	f1b8 0f00 	cmp.w	r8, #0
 8001ff2:	f43f af2e 	beq.w	8001e52 <HAL_PCD_IRQHandler+0x82>
        if ((ep_intr & 0x1U) != 0U)
 8001ff6:	f018 0f01 	tst.w	r8, #1
 8001ffa:	d0f4      	beq.n	8001fe6 <HAL_PCD_IRQHandler+0x216>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001ffc:	fa5f f189 	uxtb.w	r1, r9
 8002000:	6820      	ldr	r0, [r4, #0]
 8002002:	f001 ff80 	bl	8003f06 <USB_ReadDevOutEPInterrupt>
 8002006:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002008:	f010 0f01 	tst.w	r0, #1
 800200c:	d1d7      	bne.n	8001fbe <HAL_PCD_IRQHandler+0x1ee>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800200e:	f01a 0f08 	tst.w	sl, #8
 8002012:	d1de      	bne.n	8001fd2 <HAL_PCD_IRQHandler+0x202>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002014:	f01a 0f10 	tst.w	sl, #16
 8002018:	d004      	beq.n	8002024 <HAL_PCD_IRQHandler+0x254>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800201a:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 800201e:	2210      	movs	r2, #16
 8002020:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002024:	f01a 0f20 	tst.w	sl, #32
 8002028:	d004      	beq.n	8002034 <HAL_PCD_IRQHandler+0x264>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800202a:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 800202e:	2220      	movs	r2, #32
 8002030:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002034:	f41a 5f00 	tst.w	sl, #8192	; 0x2000
 8002038:	d0d5      	beq.n	8001fe6 <HAL_PCD_IRQHandler+0x216>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800203a:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 800203e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002042:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
 8002046:	e7ce      	b.n	8001fe6 <HAL_PCD_IRQHandler+0x216>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002048:	6820      	ldr	r0, [r4, #0]
 800204a:	f001 ff54 	bl	8003ef6 <USB_ReadDevAllInEpInterrupt>
 800204e:	4680      	mov	r8, r0
      epnum = 0U;
 8002050:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 8002052:	e025      	b.n	80020a0 <HAL_PCD_IRQHandler+0x2d0>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002054:	4659      	mov	r1, fp
 8002056:	4620      	mov	r0, r4
 8002058:	f003 fa22 	bl	80054a0 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800205c:	f01a 0f08 	tst.w	sl, #8
 8002060:	d004      	beq.n	800206c <HAL_PCD_IRQHandler+0x29c>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002062:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8002066:	2208      	movs	r2, #8
 8002068:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800206c:	f01a 0f10 	tst.w	sl, #16
 8002070:	d004      	beq.n	800207c <HAL_PCD_IRQHandler+0x2ac>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002072:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8002076:	2210      	movs	r2, #16
 8002078:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800207c:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8002080:	d004      	beq.n	800208c <HAL_PCD_IRQHandler+0x2bc>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002082:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8002086:	2240      	movs	r2, #64	; 0x40
 8002088:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800208c:	f01a 0f02 	tst.w	sl, #2
 8002090:	d142      	bne.n	8002118 <HAL_PCD_IRQHandler+0x348>
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002092:	f01a 0f80 	tst.w	sl, #128	; 0x80
 8002096:	d149      	bne.n	800212c <HAL_PCD_IRQHandler+0x35c>
        epnum++;
 8002098:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 800209c:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 80020a0:	f1b8 0f00 	cmp.w	r8, #0
 80020a4:	f43f aedc 	beq.w	8001e60 <HAL_PCD_IRQHandler+0x90>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80020a8:	f018 0f01 	tst.w	r8, #1
 80020ac:	d0f4      	beq.n	8002098 <HAL_PCD_IRQHandler+0x2c8>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80020ae:	fa5f fb89 	uxtb.w	fp, r9
 80020b2:	4659      	mov	r1, fp
 80020b4:	6820      	ldr	r0, [r4, #0]
 80020b6:	f001 ff2f 	bl	8003f18 <USB_ReadDevInEPInterrupt>
 80020ba:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80020bc:	f010 0f01 	tst.w	r0, #1
 80020c0:	d0cc      	beq.n	800205c <HAL_PCD_IRQHandler+0x28c>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80020c2:	f009 030f 	and.w	r3, r9, #15
 80020c6:	2101      	movs	r1, #1
 80020c8:	fa01 f203 	lsl.w	r2, r1, r3
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80020cc:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 80020d0:	ea23 0302 	bic.w	r3, r3, r2
 80020d4:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80020d8:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 80020dc:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
            if (hpcd->Init.dma_enable == 1U)
 80020e0:	6923      	ldr	r3, [r4, #16]
 80020e2:	428b      	cmp	r3, r1
 80020e4:	d1b6      	bne.n	8002054 <HAL_PCD_IRQHandler+0x284>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80020e6:	ebc9 03c9 	rsb	r3, r9, r9, lsl #3
 80020ea:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80020ee:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80020f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80020f2:	440a      	add	r2, r1
 80020f4:	649a      	str	r2, [r3, #72]	; 0x48
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80020f6:	f1b9 0f00 	cmp.w	r9, #0
 80020fa:	d1ab      	bne.n	8002054 <HAL_PCD_IRQHandler+0x284>
 80020fc:	ebc9 03c9 	rsb	r3, r9, r9, lsl #3
 8002100:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002104:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002106:	2b00      	cmp	r3, #0
 8002108:	d1a4      	bne.n	8002054 <HAL_PCD_IRQHandler+0x284>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800210a:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800210e:	2101      	movs	r1, #1
 8002110:	6820      	ldr	r0, [r4, #0]
 8002112:	f001 ff5b 	bl	8003fcc <USB_EP0_OutStart>
 8002116:	e79d      	b.n	8002054 <HAL_PCD_IRQHandler+0x284>
            (void)USB_FlushTxFifo(USBx, epnum);
 8002118:	4649      	mov	r1, r9
 800211a:	4628      	mov	r0, r5
 800211c:	f001 faa8 	bl	8003670 <USB_FlushTxFifo>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002120:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8002124:	2202      	movs	r2, #2
 8002126:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
 800212a:	e7b2      	b.n	8002092 <HAL_PCD_IRQHandler+0x2c2>
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800212c:	4649      	mov	r1, r9
 800212e:	4620      	mov	r0, r4
 8002130:	f7ff fc86 	bl	8001a40 <PCD_WriteEmptyTxFifo>
 8002134:	e7b0      	b.n	8002098 <HAL_PCD_IRQHandler+0x2c8>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002136:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
 800213a:	f023 0301 	bic.w	r3, r3, #1
 800213e:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 8002142:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 8002146:	2b01      	cmp	r3, #1
 8002148:	d008      	beq.n	800215c <HAL_PCD_IRQHandler+0x38c>
        HAL_PCD_ResumeCallback(hpcd);
 800214a:	4620      	mov	r0, r4
 800214c:	f003 f9e8 	bl	8005520 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002150:	6822      	ldr	r2, [r4, #0]
 8002152:	6953      	ldr	r3, [r2, #20]
 8002154:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002158:	6153      	str	r3, [r2, #20]
 800215a:	e687      	b.n	8001e6c <HAL_PCD_IRQHandler+0x9c>
        hpcd->LPM_State = LPM_L0;
 800215c:	2100      	movs	r1, #0
 800215e:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002162:	4620      	mov	r0, r4
 8002164:	f000 fa7e 	bl	8002664 <HAL_PCDEx_LPM_Callback>
 8002168:	e7f2      	b.n	8002150 <HAL_PCD_IRQHandler+0x380>
        HAL_PCD_SuspendCallback(hpcd);
 800216a:	4620      	mov	r0, r4
 800216c:	f003 f9c0 	bl	80054f0 <HAL_PCD_SuspendCallback>
 8002170:	e688      	b.n	8001e84 <HAL_PCD_IRQHandler+0xb4>
        HAL_PCD_SuspendCallback(hpcd);
 8002172:	4620      	mov	r0, r4
 8002174:	f003 f9bc 	bl	80054f0 <HAL_PCD_SuspendCallback>
 8002178:	e6a5      	b.n	8001ec6 <HAL_PCD_IRQHandler+0xf6>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800217a:	f505 6800 	add.w	r8, r5, #2048	; 0x800
 800217e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8002182:	f023 0301 	bic.w	r3, r3, #1
 8002186:	f8c8 3004 	str.w	r3, [r8, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800218a:	2110      	movs	r1, #16
 800218c:	6820      	ldr	r0, [r4, #0]
 800218e:	f001 fa6f 	bl	8003670 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002192:	e01a      	b.n	80021ca <HAL_PCD_IRQHandler+0x3fa>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002194:	eb07 1346 	add.w	r3, r7, r6, lsl #5
 8002198:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 800219c:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80021a0:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 80021a4:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80021a8:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80021ac:	f8c3 1b08 	str.w	r1, [r3, #2824]	; 0xb08
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80021b0:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 80021b4:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80021b8:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80021bc:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 80021c0:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80021c4:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021c8:	3601      	adds	r6, #1
 80021ca:	6863      	ldr	r3, [r4, #4]
 80021cc:	42b3      	cmp	r3, r6
 80021ce:	d8e1      	bhi.n	8002194 <HAL_PCD_IRQHandler+0x3c4>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80021d0:	f8d8 301c 	ldr.w	r3, [r8, #28]
 80021d4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80021d8:	f8c8 301c 	str.w	r3, [r8, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80021dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80021de:	b1eb      	cbz	r3, 800221c <HAL_PCD_IRQHandler+0x44c>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80021e0:	f8d8 3084 	ldr.w	r3, [r8, #132]	; 0x84
 80021e4:	f043 030b 	orr.w	r3, r3, #11
 80021e8:	f8c8 3084 	str.w	r3, [r8, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80021ec:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 80021f0:	f043 030b 	orr.w	r3, r3, #11
 80021f4:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80021f8:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
 80021fc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002200:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002204:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8002208:	7c21      	ldrb	r1, [r4, #16]
 800220a:	6820      	ldr	r0, [r4, #0]
 800220c:	f001 fede 	bl	8003fcc <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002210:	6822      	ldr	r2, [r4, #0]
 8002212:	6953      	ldr	r3, [r2, #20]
 8002214:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002218:	6153      	str	r3, [r2, #20]
 800221a:	e65b      	b.n	8001ed4 <HAL_PCD_IRQHandler+0x104>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800221c:	f8d8 2014 	ldr.w	r2, [r8, #20]
 8002220:	f242 032b 	movw	r3, #8235	; 0x202b
 8002224:	4313      	orrs	r3, r2
 8002226:	f8c8 3014 	str.w	r3, [r8, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800222a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800222e:	f043 030b 	orr.w	r3, r3, #11
 8002232:	f8c8 3010 	str.w	r3, [r8, #16]
 8002236:	e7df      	b.n	80021f8 <HAL_PCD_IRQHandler+0x428>
      (void)USB_ActivateSetup(hpcd->Instance);
 8002238:	6820      	ldr	r0, [r4, #0]
 800223a:	f001 feb7 	bl	8003fac <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800223e:	6820      	ldr	r0, [r4, #0]
 8002240:	f001 fb30 	bl	80038a4 <USB_GetDevSpeed>
 8002244:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002246:	6825      	ldr	r5, [r4, #0]
 8002248:	f000 fb10 	bl	800286c <HAL_RCC_GetHCLKFreq>
 800224c:	4601      	mov	r1, r0
 800224e:	7b22      	ldrb	r2, [r4, #12]
 8002250:	4628      	mov	r0, r5
 8002252:	f001 f98f 	bl	8003574 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 8002256:	4620      	mov	r0, r4
 8002258:	f003 f933 	bl	80054c2 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800225c:	6822      	ldr	r2, [r4, #0]
 800225e:	6953      	ldr	r3, [r2, #20]
 8002260:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002264:	6153      	str	r3, [r2, #20]
 8002266:	e63c      	b.n	8001ee2 <HAL_PCD_IRQHandler+0x112>
      HAL_PCD_SOFCallback(hpcd);
 8002268:	4620      	mov	r0, r4
 800226a:	f003 f924 	bl	80054b6 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800226e:	6822      	ldr	r2, [r4, #0]
 8002270:	6953      	ldr	r3, [r2, #20]
 8002272:	f003 0308 	and.w	r3, r3, #8
 8002276:	6153      	str	r3, [r2, #20]
 8002278:	e63a      	b.n	8001ef0 <HAL_PCD_IRQHandler+0x120>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800227a:	2100      	movs	r1, #0
 800227c:	4620      	mov	r0, r4
 800227e:	f003 f95b 	bl	8005538 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002282:	6822      	ldr	r2, [r4, #0]
 8002284:	6953      	ldr	r3, [r2, #20]
 8002286:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800228a:	6153      	str	r3, [r2, #20]
 800228c:	e637      	b.n	8001efe <HAL_PCD_IRQHandler+0x12e>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800228e:	2100      	movs	r1, #0
 8002290:	4620      	mov	r0, r4
 8002292:	f003 f94b 	bl	800552c <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002296:	6822      	ldr	r2, [r4, #0]
 8002298:	6953      	ldr	r3, [r2, #20]
 800229a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800229e:	6153      	str	r3, [r2, #20]
 80022a0:	e634      	b.n	8001f0c <HAL_PCD_IRQHandler+0x13c>
      HAL_PCD_ConnectCallback(hpcd);
 80022a2:	4620      	mov	r0, r4
 80022a4:	f003 f94e 	bl	8005544 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80022a8:	6822      	ldr	r2, [r4, #0]
 80022aa:	6953      	ldr	r3, [r2, #20]
 80022ac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80022b0:	6153      	str	r3, [r2, #20]
 80022b2:	e632      	b.n	8001f1a <HAL_PCD_IRQHandler+0x14a>
        HAL_PCD_DisconnectCallback(hpcd);
 80022b4:	4620      	mov	r0, r4
 80022b6:	f003 f94b 	bl	8005550 <HAL_PCD_DisconnectCallback>
 80022ba:	e63b      	b.n	8001f34 <HAL_PCD_IRQHandler+0x164>

080022bc <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 80022bc:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d00d      	beq.n	80022e0 <HAL_PCD_SetAddress+0x24>
{
 80022c4:	b510      	push	{r4, lr}
 80022c6:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80022c8:	2301      	movs	r3, #1
 80022ca:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80022ce:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80022d2:	6800      	ldr	r0, [r0, #0]
 80022d4:	f001 fdd7 	bl	8003e86 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80022d8:	2000      	movs	r0, #0
 80022da:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 80022de:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80022e0:	2002      	movs	r0, #2
}
 80022e2:	4770      	bx	lr

080022e4 <HAL_PCD_EP_Open>:
{
 80022e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022e6:	4607      	mov	r7, r0
 80022e8:	460c      	mov	r4, r1
  if ((ep_addr & 0x80U) == 0x80U)
 80022ea:	f011 0f80 	tst.w	r1, #128	; 0x80
 80022ee:	d129      	bne.n	8002344 <HAL_PCD_EP_Open+0x60>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022f0:	f001 050f 	and.w	r5, r1, #15
 80022f4:	ebc5 06c5 	rsb	r6, r5, r5, lsl #3
 80022f8:	00b6      	lsls	r6, r6, #2
 80022fa:	f506 76fc 	add.w	r6, r6, #504	; 0x1f8
 80022fe:	4406      	add	r6, r0
 8002300:	1d31      	adds	r1, r6, #4
    ep->is_in = 0U;
 8002302:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
 8002306:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800230a:	2000      	movs	r0, #0
 800230c:	f885 01fd 	strb.w	r0, [r5, #509]	; 0x1fd
  if(ep_addr == 1) {
 8002310:	2c01      	cmp	r4, #1
 8002312:	d027      	beq.n	8002364 <HAL_PCD_EP_Open+0x80>
  ep->num = ep_addr & EP_ADDR_MSK;
 8002314:	f004 040f 	and.w	r4, r4, #15
 8002318:	700c      	strb	r4, [r1, #0]
  ep->maxpacket = ep_mps;
 800231a:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;
 800231c:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 800231e:	784a      	ldrb	r2, [r1, #1]
 8002320:	b102      	cbz	r2, 8002324 <HAL_PCD_EP_Open+0x40>
    ep->tx_fifo_num = ep->num;
 8002322:	80cc      	strh	r4, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 8002324:	2b02      	cmp	r3, #2
 8002326:	d023      	beq.n	8002370 <HAL_PCD_EP_Open+0x8c>
  __HAL_LOCK(hpcd);
 8002328:	f897 33bc 	ldrb.w	r3, [r7, #956]	; 0x3bc
 800232c:	2b01      	cmp	r3, #1
 800232e:	d022      	beq.n	8002376 <HAL_PCD_EP_Open+0x92>
 8002330:	2301      	movs	r3, #1
 8002332:	f887 33bc 	strb.w	r3, [r7, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002336:	6838      	ldr	r0, [r7, #0]
 8002338:	f001 fac4 	bl	80038c4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800233c:	2000      	movs	r0, #0
 800233e:	f887 03bc 	strb.w	r0, [r7, #956]	; 0x3bc
}
 8002342:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002344:	f001 000f 	and.w	r0, r1, #15
 8002348:	ebc0 01c0 	rsb	r1, r0, r0, lsl #3
 800234c:	0089      	lsls	r1, r1, #2
 800234e:	3138      	adds	r1, #56	; 0x38
 8002350:	4439      	add	r1, r7
 8002352:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8002354:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8002358:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 800235c:	2501      	movs	r5, #1
 800235e:	f880 503d 	strb.w	r5, [r0, #61]	; 0x3d
 8002362:	e7d5      	b.n	8002310 <HAL_PCD_EP_Open+0x2c>
	  q += 1;
 8002364:	4d05      	ldr	r5, [pc, #20]	; (800237c <HAL_PCD_EP_Open+0x98>)
 8002366:	7828      	ldrb	r0, [r5, #0]
 8002368:	3001      	adds	r0, #1
 800236a:	b2c0      	uxtb	r0, r0
 800236c:	7028      	strb	r0, [r5, #0]
 800236e:	e7d1      	b.n	8002314 <HAL_PCD_EP_Open+0x30>
    ep->data_pid_start = 0U;
 8002370:	2300      	movs	r3, #0
 8002372:	710b      	strb	r3, [r1, #4]
 8002374:	e7d8      	b.n	8002328 <HAL_PCD_EP_Open+0x44>
  __HAL_LOCK(hpcd);
 8002376:	2002      	movs	r0, #2
 8002378:	e7e3      	b.n	8002342 <HAL_PCD_EP_Open+0x5e>
 800237a:	bf00      	nop
 800237c:	240001d8 	.word	0x240001d8

08002380 <HAL_PCD_EP_Close>:
{
 8002380:	b510      	push	{r4, lr}
 8002382:	4604      	mov	r4, r0
 8002384:	460a      	mov	r2, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8002386:	f011 0f80 	tst.w	r1, #128	; 0x80
 800238a:	d120      	bne.n	80023ce <HAL_PCD_EP_Close+0x4e>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800238c:	f001 000f 	and.w	r0, r1, #15
 8002390:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800239a:	4423      	add	r3, r4
 800239c:	1d19      	adds	r1, r3, #4
    ep->is_in = 0U;
 800239e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80023a2:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80023a6:	2300      	movs	r3, #0
 80023a8:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 80023ac:	f002 020f 	and.w	r2, r2, #15
 80023b0:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 80023b2:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d019      	beq.n	80023ee <HAL_PCD_EP_Close+0x6e>
 80023ba:	2301      	movs	r3, #1
 80023bc:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80023c0:	6820      	ldr	r0, [r4, #0]
 80023c2:	f001 fac7 	bl	8003954 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80023c6:	2000      	movs	r0, #0
 80023c8:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 80023cc:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023ce:	f001 000f 	and.w	r0, r1, #15
 80023d2:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	3338      	adds	r3, #56	; 0x38
 80023da:	4423      	add	r3, r4
 80023dc:	1d19      	adds	r1, r3, #4
    ep->is_in = 1U;
 80023de:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80023e2:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80023e6:	2301      	movs	r3, #1
 80023e8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 80023ec:	e7de      	b.n	80023ac <HAL_PCD_EP_Close+0x2c>
  __HAL_LOCK(hpcd);
 80023ee:	2002      	movs	r0, #2
 80023f0:	e7ec      	b.n	80023cc <HAL_PCD_EP_Close+0x4c>

080023f2 <HAL_PCD_EP_Receive>:
{
 80023f2:	b538      	push	{r3, r4, r5, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023f4:	f001 040f 	and.w	r4, r1, #15
 80023f8:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 80023fc:	0089      	lsls	r1, r1, #2
 80023fe:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
 8002402:	4401      	add	r1, r0
 8002404:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 8002406:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 800240a:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800240e:	f8c5 2208 	str.w	r2, [r5, #520]	; 0x208
  ep->xfer_len = len;
 8002412:	f8c5 3210 	str.w	r3, [r5, #528]	; 0x210
  ep->xfer_count = 0U;
 8002416:	2300      	movs	r3, #0
 8002418:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
  ep->is_in = 0U;
 800241c:	f885 31fd 	strb.w	r3, [r5, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 8002420:	f885 41fc 	strb.w	r4, [r5, #508]	; 0x1fc
  if (hpcd->Init.dma_enable == 1U)
 8002424:	6903      	ldr	r3, [r0, #16]
 8002426:	2b01      	cmp	r3, #1
 8002428:	d006      	beq.n	8002438 <HAL_PCD_EP_Receive+0x46>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800242a:	b964      	cbnz	r4, 8002446 <HAL_PCD_EP_Receive+0x54>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800242c:	b2da      	uxtb	r2, r3
 800242e:	6800      	ldr	r0, [r0, #0]
 8002430:	f001 fafe 	bl	8003a30 <USB_EP0StartXfer>
}
 8002434:	2000      	movs	r0, #0
 8002436:	bd38      	pop	{r3, r4, r5, pc}
    ep->dma_addr = (uint32_t)pBuf;
 8002438:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 800243c:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8002440:	f8c5 220c 	str.w	r2, [r5, #524]	; 0x20c
 8002444:	e7f1      	b.n	800242a <HAL_PCD_EP_Receive+0x38>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002446:	b2da      	uxtb	r2, r3
 8002448:	6800      	ldr	r0, [r0, #0]
 800244a:	f001 fb91 	bl	8003b70 <USB_EPStartXfer>
 800244e:	e7f1      	b.n	8002434 <HAL_PCD_EP_Receive+0x42>

08002450 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002450:	f001 010f 	and.w	r1, r1, #15
 8002454:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8002458:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 800245c:	f8d1 0214 	ldr.w	r0, [r1, #532]	; 0x214
 8002460:	4770      	bx	lr

08002462 <HAL_PCD_EP_Transmit>:
{
 8002462:	b538      	push	{r3, r4, r5, lr}
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002464:	f001 040f 	and.w	r4, r1, #15
 8002468:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 800246c:	0089      	lsls	r1, r1, #2
 800246e:	3138      	adds	r1, #56	; 0x38
 8002470:	4401      	add	r1, r0
 8002472:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 8002474:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 8002478:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800247c:	64aa      	str	r2, [r5, #72]	; 0x48
  ep->xfer_len = len;
 800247e:	652b      	str	r3, [r5, #80]	; 0x50
  ep->xfer_count = 0U;
 8002480:	2300      	movs	r3, #0
 8002482:	656b      	str	r3, [r5, #84]	; 0x54
  ep->is_in = 1U;
 8002484:	2301      	movs	r3, #1
 8002486:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 800248a:	f885 403c 	strb.w	r4, [r5, #60]	; 0x3c
  if (hpcd->Init.dma_enable == 1U)
 800248e:	6903      	ldr	r3, [r0, #16]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d006      	beq.n	80024a2 <HAL_PCD_EP_Transmit+0x40>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002494:	b95c      	cbnz	r4, 80024ae <HAL_PCD_EP_Transmit+0x4c>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002496:	b2da      	uxtb	r2, r3
 8002498:	6800      	ldr	r0, [r0, #0]
 800249a:	f001 fac9 	bl	8003a30 <USB_EP0StartXfer>
}
 800249e:	2000      	movs	r0, #0
 80024a0:	bd38      	pop	{r3, r4, r5, pc}
    ep->dma_addr = (uint32_t)pBuf;
 80024a2:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 80024a6:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80024aa:	64ea      	str	r2, [r5, #76]	; 0x4c
 80024ac:	e7f2      	b.n	8002494 <HAL_PCD_EP_Transmit+0x32>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80024ae:	b2da      	uxtb	r2, r3
 80024b0:	6800      	ldr	r0, [r0, #0]
 80024b2:	f001 fb5d 	bl	8003b70 <USB_EPStartXfer>
 80024b6:	e7f2      	b.n	800249e <HAL_PCD_EP_Transmit+0x3c>

080024b8 <HAL_PCD_EP_SetStall>:
{
 80024b8:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80024ba:	f001 050f 	and.w	r5, r1, #15
 80024be:	6842      	ldr	r2, [r0, #4]
 80024c0:	4295      	cmp	r5, r2
 80024c2:	d839      	bhi.n	8002538 <HAL_PCD_EP_SetStall+0x80>
 80024c4:	4604      	mov	r4, r0
 80024c6:	460b      	mov	r3, r1
  if ((0x80U & ep_addr) == 0x80U)
 80024c8:	f011 0f80 	tst.w	r1, #128	; 0x80
 80024cc:	d11f      	bne.n	800250e <HAL_PCD_EP_SetStall+0x56>
    ep = &hpcd->OUT_ep[ep_addr];
 80024ce:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80024d2:	0089      	lsls	r1, r1, #2
 80024d4:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
 80024d8:	4401      	add	r1, r0
 80024da:	3104      	adds	r1, #4
    ep->is_in = 0U;
 80024dc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80024e0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  ep->is_stall = 1U;
 80024ea:	2301      	movs	r3, #1
 80024ec:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024ee:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 80024f0:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d021      	beq.n	800253c <HAL_PCD_EP_SetStall+0x84>
 80024f8:	2301      	movs	r3, #1
 80024fa:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80024fe:	6820      	ldr	r0, [r4, #0]
 8002500:	f001 fc66 	bl	8003dd0 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002504:	b18d      	cbz	r5, 800252a <HAL_PCD_EP_SetStall+0x72>
  __HAL_UNLOCK(hpcd);
 8002506:	2000      	movs	r0, #0
 8002508:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 800250c:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800250e:	ebc5 01c5 	rsb	r1, r5, r5, lsl #3
 8002512:	0089      	lsls	r1, r1, #2
 8002514:	3138      	adds	r1, #56	; 0x38
 8002516:	4401      	add	r1, r0
 8002518:	3104      	adds	r1, #4
    ep->is_in = 1U;
 800251a:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 800251e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8002522:	2201      	movs	r2, #1
 8002524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002528:	e7df      	b.n	80024ea <HAL_PCD_EP_SetStall+0x32>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800252a:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800252e:	7c21      	ldrb	r1, [r4, #16]
 8002530:	6820      	ldr	r0, [r4, #0]
 8002532:	f001 fd4b 	bl	8003fcc <USB_EP0_OutStart>
 8002536:	e7e6      	b.n	8002506 <HAL_PCD_EP_SetStall+0x4e>
    return HAL_ERROR;
 8002538:	2001      	movs	r0, #1
 800253a:	e7e7      	b.n	800250c <HAL_PCD_EP_SetStall+0x54>
  __HAL_LOCK(hpcd);
 800253c:	2002      	movs	r0, #2
 800253e:	e7e5      	b.n	800250c <HAL_PCD_EP_SetStall+0x54>

08002540 <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002540:	f001 030f 	and.w	r3, r1, #15
 8002544:	6842      	ldr	r2, [r0, #4]
 8002546:	4293      	cmp	r3, r2
 8002548:	d831      	bhi.n	80025ae <HAL_PCD_EP_ClrStall+0x6e>
{
 800254a:	b510      	push	{r4, lr}
 800254c:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 800254e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002552:	d11e      	bne.n	8002592 <HAL_PCD_EP_ClrStall+0x52>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002554:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 8002558:	0089      	lsls	r1, r1, #2
 800255a:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
 800255e:	4401      	add	r1, r0
 8002560:	3104      	adds	r1, #4
    ep->is_in = 0U;
 8002562:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8002566:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800256a:	2000      	movs	r0, #0
 800256c:	f882 01fd 	strb.w	r0, [r2, #509]	; 0x1fd
  ep->is_stall = 0U;
 8002570:	2200      	movs	r2, #0
 8002572:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002574:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8002576:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800257a:	2b01      	cmp	r3, #1
 800257c:	d019      	beq.n	80025b2 <HAL_PCD_EP_ClrStall+0x72>
 800257e:	2301      	movs	r3, #1
 8002580:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002584:	6820      	ldr	r0, [r4, #0]
 8002586:	f001 fc50 	bl	8003e2a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800258a:	2000      	movs	r0, #0
 800258c:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8002590:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002592:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 8002596:	0089      	lsls	r1, r1, #2
 8002598:	3138      	adds	r1, #56	; 0x38
 800259a:	4401      	add	r1, r0
 800259c:	3104      	adds	r1, #4
    ep->is_in = 1U;
 800259e:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 80025a2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80025a6:	2001      	movs	r0, #1
 80025a8:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
 80025ac:	e7e0      	b.n	8002570 <HAL_PCD_EP_ClrStall+0x30>
    return HAL_ERROR;
 80025ae:	2001      	movs	r0, #1
}
 80025b0:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 80025b2:	2002      	movs	r0, #2
 80025b4:	e7ec      	b.n	8002590 <HAL_PCD_EP_ClrStall+0x50>

080025b6 <HAL_PCD_EP_Flush>:
  __HAL_LOCK(hpcd);
 80025b6:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d014      	beq.n	80025e8 <HAL_PCD_EP_Flush+0x32>
{
 80025be:	b510      	push	{r4, lr}
 80025c0:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80025c2:	2301      	movs	r3, #1
 80025c4:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  if ((ep_addr & 0x80U) == 0x80U)
 80025c8:	f011 0f80 	tst.w	r1, #128	; 0x80
 80025cc:	d106      	bne.n	80025dc <HAL_PCD_EP_Flush+0x26>
    (void)USB_FlushRxFifo(hpcd->Instance);
 80025ce:	6800      	ldr	r0, [r0, #0]
 80025d0:	f001 f874 	bl	80036bc <USB_FlushRxFifo>
  __HAL_UNLOCK(hpcd);
 80025d4:	2000      	movs	r0, #0
 80025d6:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 80025da:	bd10      	pop	{r4, pc}
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 80025dc:	f001 010f 	and.w	r1, r1, #15
 80025e0:	6800      	ldr	r0, [r0, #0]
 80025e2:	f001 f845 	bl	8003670 <USB_FlushTxFifo>
 80025e6:	e7f5      	b.n	80025d4 <HAL_PCD_EP_Flush+0x1e>
  __HAL_LOCK(hpcd);
 80025e8:	2002      	movs	r0, #2
}
 80025ea:	4770      	bx	lr

080025ec <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80025ec:	b430      	push	{r4, r5}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80025ee:	6804      	ldr	r4, [r0, #0]
 80025f0:	6a60      	ldr	r0, [r4, #36]	; 0x24

  if (fifo == 0U)
 80025f2:	b919      	cbnz	r1, 80025fc <HAL_PCDEx_SetTxFiFo+0x10>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80025f4:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80025f8:	62a0      	str	r0, [r4, #40]	; 0x28
 80025fa:	e018      	b.n	800262e <HAL_PCDEx_SetTxFiFo+0x42>
 80025fc:	460d      	mov	r5, r1
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80025fe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002600:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8002604:	2300      	movs	r3, #0
 8002606:	1e69      	subs	r1, r5, #1
 8002608:	428b      	cmp	r3, r1
 800260a:	d209      	bcs.n	8002620 <HAL_PCDEx_SetTxFiFo+0x34>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800260c:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8002610:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8002614:	6849      	ldr	r1, [r1, #4]
 8002616:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800261a:	3301      	adds	r3, #1
 800261c:	b2db      	uxtb	r3, r3
 800261e:	e7f2      	b.n	8002606 <HAL_PCDEx_SetTxFiFo+0x1a>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002620:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8002624:	f105 013f 	add.w	r1, r5, #63	; 0x3f
 8002628:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800262c:	6048      	str	r0, [r1, #4]
  }

  return HAL_OK;
}
 800262e:	2000      	movs	r0, #0
 8002630:	bc30      	pop	{r4, r5}
 8002632:	4770      	bx	lr

08002634 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8002634:	6803      	ldr	r3, [r0, #0]
 8002636:	6259      	str	r1, [r3, #36]	; 0x24

  return HAL_OK;
}
 8002638:	2000      	movs	r0, #0
 800263a:	4770      	bx	lr

0800263c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800263c:	4603      	mov	r3, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800263e:	6802      	ldr	r2, [r0, #0]

  hpcd->lpm_active = 1U;
 8002640:	2101      	movs	r1, #1
 8002642:	f8c0 13fc 	str.w	r1, [r0, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002646:	2000      	movs	r0, #0
 8002648:	f883 03f4 	strb.w	r0, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800264c:	6993      	ldr	r3, [r2, #24]
 800264e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002652:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002654:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8002656:	4b02      	ldr	r3, [pc, #8]	; (8002660 <HAL_PCDEx_ActivateLPM+0x24>)
 8002658:	430b      	orrs	r3, r1
 800265a:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	10000003 	.word	0x10000003

08002664 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002664:	4770      	bx	lr
	...

08002668 <HAL_PWREx_EnableUSBVoltageDetector>:
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002668:	4a02      	ldr	r2, [pc, #8]	; (8002674 <HAL_PWREx_EnableUSBVoltageDetector+0xc>)
 800266a:	68d3      	ldr	r3, [r2, #12]
 800266c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002670:	60d3      	str	r3, [r2, #12]
}
 8002672:	4770      	bx	lr
 8002674:	58024800 	.word	0x58024800

08002678 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002678:	4b74      	ldr	r3, [pc, #464]	; (800284c <HAL_RCC_GetSysClockFreq+0x1d4>)
 800267a:	691b      	ldr	r3, [r3, #16]
 800267c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002680:	2b10      	cmp	r3, #16
 8002682:	f000 80df 	beq.w	8002844 <HAL_RCC_GetSysClockFreq+0x1cc>
 8002686:	2b18      	cmp	r3, #24
 8002688:	d010      	beq.n	80026ac <HAL_RCC_GetSysClockFreq+0x34>
 800268a:	b10b      	cbz	r3, 8002690 <HAL_RCC_GetSysClockFreq+0x18>
 800268c:	4870      	ldr	r0, [pc, #448]	; (8002850 <HAL_RCC_GetSysClockFreq+0x1d8>)
 800268e:	4770      	bx	lr
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002690:	4b6e      	ldr	r3, [pc, #440]	; (800284c <HAL_RCC_GetSysClockFreq+0x1d4>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f013 0f20 	tst.w	r3, #32
 8002698:	f000 80d6 	beq.w	8002848 <HAL_RCC_GetSysClockFreq+0x1d0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800269c:	4b6b      	ldr	r3, [pc, #428]	; (800284c <HAL_RCC_GetSysClockFreq+0x1d4>)
 800269e:	6818      	ldr	r0, [r3, #0]
 80026a0:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 80026a4:	4b6b      	ldr	r3, [pc, #428]	; (8002854 <HAL_RCC_GetSysClockFreq+0x1dc>)
 80026a6:	fa23 f000 	lsr.w	r0, r3, r0
 80026aa:	4770      	bx	lr
{
 80026ac:	b410      	push	{r4}
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80026ae:	4a67      	ldr	r2, [pc, #412]	; (800284c <HAL_RCC_GetSysClockFreq+0x1d4>)
 80026b0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80026b2:	f001 0103 	and.w	r1, r1, #3
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80026b6:	6a94      	ldr	r4, [r2, #40]	; 0x28
 80026b8:	f3c4 1005 	ubfx	r0, r4, #4, #6
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80026bc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80026be:	f003 0301 	and.w	r3, r3, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80026c2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80026c4:	f3c2 02cc 	ubfx	r2, r2, #3, #13
 80026c8:	fb03 f302 	mul.w	r3, r3, r2
 80026cc:	ee07 3a90 	vmov	s15, r3
 80026d0:	eef8 7a67 	vcvt.f32.u32	s15, s15

    if (pllm != 0U)
 80026d4:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
 80026d8:	f000 8094 	beq.w	8002804 <HAL_RCC_GetSysClockFreq+0x18c>
    {
      switch (pllsource)
 80026dc:	2901      	cmp	r1, #1
 80026de:	d066      	beq.n	80027ae <HAL_RCC_GetSysClockFreq+0x136>
 80026e0:	2902      	cmp	r1, #2
 80026e2:	f000 8092 	beq.w	800280a <HAL_RCC_GetSysClockFreq+0x192>
 80026e6:	b1e1      	cbz	r1, 8002722 <HAL_RCC_GetSysClockFreq+0xaa>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80026e8:	ee07 0a10 	vmov	s14, r0
 80026ec:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80026f0:	ed9f 6a59 	vldr	s12, [pc, #356]	; 8002858 <HAL_RCC_GetSysClockFreq+0x1e0>
 80026f4:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80026f8:	4b54      	ldr	r3, [pc, #336]	; (800284c <HAL_RCC_GetSysClockFreq+0x1d4>)
 80026fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002700:	ee06 3a90 	vmov	s13, r3
 8002704:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8002708:	ed9f 6a54 	vldr	s12, [pc, #336]	; 800285c <HAL_RCC_GetSysClockFreq+0x1e4>
 800270c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002710:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002714:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002718:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800271c:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 8002720:	e061      	b.n	80027e6 <HAL_RCC_GetSysClockFreq+0x16e>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002722:	4b4a      	ldr	r3, [pc, #296]	; (800284c <HAL_RCC_GetSysClockFreq+0x1d4>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f013 0f20 	tst.w	r3, #32
 800272a:	d023      	beq.n	8002774 <HAL_RCC_GetSysClockFreq+0xfc>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800272c:	4947      	ldr	r1, [pc, #284]	; (800284c <HAL_RCC_GetSysClockFreq+0x1d4>)
 800272e:	680a      	ldr	r2, [r1, #0]
 8002730:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8002734:	4b47      	ldr	r3, [pc, #284]	; (8002854 <HAL_RCC_GetSysClockFreq+0x1dc>)
 8002736:	40d3      	lsrs	r3, r2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002738:	ee07 3a10 	vmov	s14, r3
 800273c:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8002740:	ee07 0a10 	vmov	s14, r0
 8002744:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 8002748:	ee86 7a86 	vdiv.f32	s14, s13, s12
 800274c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800274e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002752:	ee06 3a90 	vmov	s13, r3
 8002756:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800275a:	ed9f 6a40 	vldr	s12, [pc, #256]	; 800285c <HAL_RCC_GetSysClockFreq+0x1e4>
 800275e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002762:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002766:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800276a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800276e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002772:	e038      	b.n	80027e6 <HAL_RCC_GetSysClockFreq+0x16e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002774:	ee07 0a10 	vmov	s14, r0
 8002778:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800277c:	ed9f 6a38 	vldr	s12, [pc, #224]	; 8002860 <HAL_RCC_GetSysClockFreq+0x1e8>
 8002780:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8002784:	4b31      	ldr	r3, [pc, #196]	; (800284c <HAL_RCC_GetSysClockFreq+0x1d4>)
 8002786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002788:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800278c:	ee06 3a90 	vmov	s13, r3
 8002790:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8002794:	ed9f 6a31 	vldr	s12, [pc, #196]	; 800285c <HAL_RCC_GetSysClockFreq+0x1e4>
 8002798:	ee67 7a86 	vmul.f32	s15, s15, s12
 800279c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80027a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027ac:	e01b      	b.n	80027e6 <HAL_RCC_GetSysClockFreq+0x16e>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80027ae:	ee07 0a10 	vmov	s14, r0
 80027b2:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80027b6:	ed9f 6a28 	vldr	s12, [pc, #160]	; 8002858 <HAL_RCC_GetSysClockFreq+0x1e0>
 80027ba:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80027be:	4b23      	ldr	r3, [pc, #140]	; (800284c <HAL_RCC_GetSysClockFreq+0x1d4>)
 80027c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027c6:	ee06 3a90 	vmov	s13, r3
 80027ca:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80027ce:	ed9f 6a23 	vldr	s12, [pc, #140]	; 800285c <HAL_RCC_GetSysClockFreq+0x1e4>
 80027d2:	ee67 7a86 	vmul.f32	s15, s15, s12
 80027d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80027de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027e2:	ee27 7a27 	vmul.f32	s14, s14, s15
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80027e6:	4b19      	ldr	r3, [pc, #100]	; (800284c <HAL_RCC_GetSysClockFreq+0x1d4>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ea:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80027ee:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80027f0:	ee07 3a90 	vmov	s15, r3
 80027f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027f8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80027fc:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8002800:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8002804:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002808:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800280a:	ee07 0a10 	vmov	s14, r0
 800280e:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8002812:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8002864 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002816:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800281a:	4b0c      	ldr	r3, [pc, #48]	; (800284c <HAL_RCC_GetSysClockFreq+0x1d4>)
 800281c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002822:	ee06 3a90 	vmov	s13, r3
 8002826:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800282a:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 800285c <HAL_RCC_GetSysClockFreq+0x1e4>
 800282e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002832:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002836:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800283a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800283e:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 8002842:	e7d0      	b.n	80027e6 <HAL_RCC_GetSysClockFreq+0x16e>
    sysclockfreq = HSE_VALUE;
 8002844:	4808      	ldr	r0, [pc, #32]	; (8002868 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002846:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002848:	4802      	ldr	r0, [pc, #8]	; (8002854 <HAL_RCC_GetSysClockFreq+0x1dc>)
}
 800284a:	4770      	bx	lr
 800284c:	58024400 	.word	0x58024400
 8002850:	003d0900 	.word	0x003d0900
 8002854:	03d09000 	.word	0x03d09000
 8002858:	4a742400 	.word	0x4a742400
 800285c:	39000000 	.word	0x39000000
 8002860:	4c742400 	.word	0x4c742400
 8002864:	4bb71b00 	.word	0x4bb71b00
 8002868:	016e3600 	.word	0x016e3600

0800286c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800286c:	b508      	push	{r3, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800286e:	f7ff ff03 	bl	8002678 <HAL_RCC_GetSysClockFreq>
 8002872:	4a0b      	ldr	r2, [pc, #44]	; (80028a0 <HAL_RCC_GetHCLKFreq+0x34>)
 8002874:	6993      	ldr	r3, [r2, #24]
 8002876:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800287a:	490a      	ldr	r1, [pc, #40]	; (80028a4 <HAL_RCC_GetHCLKFreq+0x38>)
 800287c:	5ccb      	ldrb	r3, [r1, r3]
 800287e:	f003 031f 	and.w	r3, r3, #31
 8002882:	fa20 f303 	lsr.w	r3, r0, r3
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002886:	6992      	ldr	r2, [r2, #24]
 8002888:	f002 020f 	and.w	r2, r2, #15
 800288c:	5c88      	ldrb	r0, [r1, r2]
 800288e:	f000 001f 	and.w	r0, r0, #31
 8002892:	fa23 f000 	lsr.w	r0, r3, r0
 8002896:	4a04      	ldr	r2, [pc, #16]	; (80028a8 <HAL_RCC_GetHCLKFreq+0x3c>)
 8002898:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800289a:	4a04      	ldr	r2, [pc, #16]	; (80028ac <HAL_RCC_GetHCLKFreq+0x40>)
 800289c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800289e:	bd08      	pop	{r3, pc}
 80028a0:	58024400 	.word	0x58024400
 80028a4:	08005b3c 	.word	0x08005b3c
 80028a8:	2400000c 	.word	0x2400000c
 80028ac:	24000008 	.word	0x24000008

080028b0 <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80028b0:	4b40      	ldr	r3, [pc, #256]	; (80029b4 <RCCEx_PLL2_Config+0x104>)
 80028b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b4:	f003 0303 	and.w	r3, r3, #3
 80028b8:	2b03      	cmp	r3, #3
 80028ba:	d079      	beq.n	80029b0 <RCCEx_PLL2_Config+0x100>
{
 80028bc:	b570      	push	{r4, r5, r6, lr}
 80028be:	4605      	mov	r5, r0
 80028c0:	460e      	mov	r6, r1


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80028c2:	4a3c      	ldr	r2, [pc, #240]	; (80029b4 <RCCEx_PLL2_Config+0x104>)
 80028c4:	6813      	ldr	r3, [r2, #0]
 80028c6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80028ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028cc:	f7fe ff40 	bl	8001750 <HAL_GetTick>
 80028d0:	4604      	mov	r4, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80028d2:	4b38      	ldr	r3, [pc, #224]	; (80029b4 <RCCEx_PLL2_Config+0x104>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80028da:	d006      	beq.n	80028ea <RCCEx_PLL2_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80028dc:	f7fe ff38 	bl	8001750 <HAL_GetTick>
 80028e0:	1b03      	subs	r3, r0, r4
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d9f5      	bls.n	80028d2 <RCCEx_PLL2_Config+0x22>
      {
        return HAL_TIMEOUT;
 80028e6:	2003      	movs	r0, #3

  }


  return status;
}
 80028e8:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80028ea:	4b32      	ldr	r3, [pc, #200]	; (80029b4 <RCCEx_PLL2_Config+0x104>)
 80028ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028ee:	f422 327c 	bic.w	r2, r2, #258048	; 0x3f000
 80028f2:	6829      	ldr	r1, [r5, #0]
 80028f4:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 80028f8:	629a      	str	r2, [r3, #40]	; 0x28
 80028fa:	686a      	ldr	r2, [r5, #4]
 80028fc:	3a01      	subs	r2, #1
 80028fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002902:	68a9      	ldr	r1, [r5, #8]
 8002904:	3901      	subs	r1, #1
 8002906:	0249      	lsls	r1, r1, #9
 8002908:	b289      	uxth	r1, r1
 800290a:	430a      	orrs	r2, r1
 800290c:	68e9      	ldr	r1, [r5, #12]
 800290e:	3901      	subs	r1, #1
 8002910:	0409      	lsls	r1, r1, #16
 8002912:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 8002916:	430a      	orrs	r2, r1
 8002918:	6929      	ldr	r1, [r5, #16]
 800291a:	3901      	subs	r1, #1
 800291c:	0609      	lsls	r1, r1, #24
 800291e:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 8002922:	430a      	orrs	r2, r1
 8002924:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8002926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002928:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800292c:	6969      	ldr	r1, [r5, #20]
 800292e:	430a      	orrs	r2, r1
 8002930:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8002932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002934:	f022 0220 	bic.w	r2, r2, #32
 8002938:	69a9      	ldr	r1, [r5, #24]
 800293a:	430a      	orrs	r2, r1
 800293c:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 800293e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002940:	f022 0210 	bic.w	r2, r2, #16
 8002944:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8002946:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002948:	4a1b      	ldr	r2, [pc, #108]	; (80029b8 <RCCEx_PLL2_Config+0x108>)
 800294a:	400a      	ands	r2, r1
 800294c:	69e9      	ldr	r1, [r5, #28]
 800294e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8002952:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_RCC_PLL2FRACN_ENABLE();
 8002954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002956:	f042 0210 	orr.w	r2, r2, #16
 800295a:	62da      	str	r2, [r3, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 800295c:	b9c6      	cbnz	r6, 8002990 <RCCEx_PLL2_Config+0xe0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800295e:	461a      	mov	r2, r3
 8002960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002962:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002966:	62d3      	str	r3, [r2, #44]	; 0x2c
    __HAL_RCC_PLL2_ENABLE();
 8002968:	4a12      	ldr	r2, [pc, #72]	; (80029b4 <RCCEx_PLL2_Config+0x104>)
 800296a:	6813      	ldr	r3, [r2, #0]
 800296c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002970:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002972:	f7fe feed 	bl	8001750 <HAL_GetTick>
 8002976:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8002978:	4b0e      	ldr	r3, [pc, #56]	; (80029b4 <RCCEx_PLL2_Config+0x104>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8002980:	d114      	bne.n	80029ac <RCCEx_PLL2_Config+0xfc>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8002982:	f7fe fee5 	bl	8001750 <HAL_GetTick>
 8002986:	1b00      	subs	r0, r0, r4
 8002988:	2802      	cmp	r0, #2
 800298a:	d9f5      	bls.n	8002978 <RCCEx_PLL2_Config+0xc8>
        return HAL_TIMEOUT;
 800298c:	2003      	movs	r0, #3
 800298e:	e7ab      	b.n	80028e8 <RCCEx_PLL2_Config+0x38>
    else if(Divider == DIVIDER_Q_UPDATE)
 8002990:	2e01      	cmp	r6, #1
 8002992:	d005      	beq.n	80029a0 <RCCEx_PLL2_Config+0xf0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8002994:	4a07      	ldr	r2, [pc, #28]	; (80029b4 <RCCEx_PLL2_Config+0x104>)
 8002996:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002998:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800299c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800299e:	e7e3      	b.n	8002968 <RCCEx_PLL2_Config+0xb8>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80029a0:	4a04      	ldr	r2, [pc, #16]	; (80029b4 <RCCEx_PLL2_Config+0x104>)
 80029a2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80029a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029a8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80029aa:	e7dd      	b.n	8002968 <RCCEx_PLL2_Config+0xb8>
  return status;
 80029ac:	2000      	movs	r0, #0
 80029ae:	e79b      	b.n	80028e8 <RCCEx_PLL2_Config+0x38>
    return HAL_ERROR;
 80029b0:	2001      	movs	r0, #1
}
 80029b2:	4770      	bx	lr
 80029b4:	58024400 	.word	0x58024400
 80029b8:	ffff0007 	.word	0xffff0007

080029bc <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80029bc:	4b40      	ldr	r3, [pc, #256]	; (8002ac0 <RCCEx_PLL3_Config+0x104>)
 80029be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c0:	f003 0303 	and.w	r3, r3, #3
 80029c4:	2b03      	cmp	r3, #3
 80029c6:	d079      	beq.n	8002abc <RCCEx_PLL3_Config+0x100>
{
 80029c8:	b570      	push	{r4, r5, r6, lr}
 80029ca:	4605      	mov	r5, r0
 80029cc:	460e      	mov	r6, r1


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80029ce:	4a3c      	ldr	r2, [pc, #240]	; (8002ac0 <RCCEx_PLL3_Config+0x104>)
 80029d0:	6813      	ldr	r3, [r2, #0]
 80029d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029d8:	f7fe feba 	bl	8001750 <HAL_GetTick>
 80029dc:	4604      	mov	r4, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80029de:	4b38      	ldr	r3, [pc, #224]	; (8002ac0 <RCCEx_PLL3_Config+0x104>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80029e6:	d006      	beq.n	80029f6 <RCCEx_PLL3_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80029e8:	f7fe feb2 	bl	8001750 <HAL_GetTick>
 80029ec:	1b03      	subs	r3, r0, r4
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d9f5      	bls.n	80029de <RCCEx_PLL3_Config+0x22>
      {
        return HAL_TIMEOUT;
 80029f2:	2003      	movs	r0, #3

  }


  return status;
}
 80029f4:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80029f6:	4b32      	ldr	r3, [pc, #200]	; (8002ac0 <RCCEx_PLL3_Config+0x104>)
 80029f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029fa:	f022 727c 	bic.w	r2, r2, #66060288	; 0x3f00000
 80029fe:	6829      	ldr	r1, [r5, #0]
 8002a00:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8002a04:	629a      	str	r2, [r3, #40]	; 0x28
 8002a06:	686a      	ldr	r2, [r5, #4]
 8002a08:	3a01      	subs	r2, #1
 8002a0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a0e:	68a9      	ldr	r1, [r5, #8]
 8002a10:	3901      	subs	r1, #1
 8002a12:	0249      	lsls	r1, r1, #9
 8002a14:	b289      	uxth	r1, r1
 8002a16:	430a      	orrs	r2, r1
 8002a18:	68e9      	ldr	r1, [r5, #12]
 8002a1a:	3901      	subs	r1, #1
 8002a1c:	0409      	lsls	r1, r1, #16
 8002a1e:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 8002a22:	430a      	orrs	r2, r1
 8002a24:	6929      	ldr	r1, [r5, #16]
 8002a26:	3901      	subs	r1, #1
 8002a28:	0609      	lsls	r1, r1, #24
 8002a2a:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 8002a2e:	430a      	orrs	r2, r1
 8002a30:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8002a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a34:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002a38:	6969      	ldr	r1, [r5, #20]
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8002a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a40:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a44:	69a9      	ldr	r1, [r5, #24]
 8002a46:	430a      	orrs	r2, r1
 8002a48:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8002a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a50:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8002a52:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002a54:	4a1b      	ldr	r2, [pc, #108]	; (8002ac4 <RCCEx_PLL3_Config+0x108>)
 8002a56:	400a      	ands	r2, r1
 8002a58:	69e9      	ldr	r1, [r5, #28]
 8002a5a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8002a5e:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_RCC_PLL3FRACN_ENABLE();
 8002a60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a66:	62da      	str	r2, [r3, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8002a68:	b9c6      	cbnz	r6, 8002a9c <RCCEx_PLL3_Config+0xe0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a72:	62d3      	str	r3, [r2, #44]	; 0x2c
    __HAL_RCC_PLL3_ENABLE();
 8002a74:	4a12      	ldr	r2, [pc, #72]	; (8002ac0 <RCCEx_PLL3_Config+0x104>)
 8002a76:	6813      	ldr	r3, [r2, #0]
 8002a78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a7c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002a7e:	f7fe fe67 	bl	8001750 <HAL_GetTick>
 8002a82:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8002a84:	4b0e      	ldr	r3, [pc, #56]	; (8002ac0 <RCCEx_PLL3_Config+0x104>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8002a8c:	d114      	bne.n	8002ab8 <RCCEx_PLL3_Config+0xfc>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8002a8e:	f7fe fe5f 	bl	8001750 <HAL_GetTick>
 8002a92:	1b00      	subs	r0, r0, r4
 8002a94:	2802      	cmp	r0, #2
 8002a96:	d9f5      	bls.n	8002a84 <RCCEx_PLL3_Config+0xc8>
        return HAL_TIMEOUT;
 8002a98:	2003      	movs	r0, #3
 8002a9a:	e7ab      	b.n	80029f4 <RCCEx_PLL3_Config+0x38>
    else if(Divider == DIVIDER_Q_UPDATE)
 8002a9c:	2e01      	cmp	r6, #1
 8002a9e:	d005      	beq.n	8002aac <RCCEx_PLL3_Config+0xf0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8002aa0:	4a07      	ldr	r2, [pc, #28]	; (8002ac0 <RCCEx_PLL3_Config+0x104>)
 8002aa2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002aa4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002aa8:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002aaa:	e7e3      	b.n	8002a74 <RCCEx_PLL3_Config+0xb8>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8002aac:	4a04      	ldr	r2, [pc, #16]	; (8002ac0 <RCCEx_PLL3_Config+0x104>)
 8002aae:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002ab0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ab4:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002ab6:	e7dd      	b.n	8002a74 <RCCEx_PLL3_Config+0xb8>
  return status;
 8002ab8:	2000      	movs	r0, #0
 8002aba:	e79b      	b.n	80029f4 <RCCEx_PLL3_Config+0x38>
    return HAL_ERROR;
 8002abc:	2001      	movs	r0, #1
}
 8002abe:	4770      	bx	lr
 8002ac0:	58024400 	.word	0x58024400
 8002ac4:	ffff0007 	.word	0xffff0007

08002ac8 <HAL_RCCEx_PeriphCLKConfig>:
{
 8002ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aca:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002acc:	6803      	ldr	r3, [r0, #0]
 8002ace:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8002ad2:	d030      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8002ad4:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8002ad6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ada:	d026      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002adc:	d80e      	bhi.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x34>
 8002ade:	b1eb      	cbz	r3, 8002b1c <HAL_RCCEx_PeriphCLKConfig+0x54>
 8002ae0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ae4:	d107      	bne.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x2e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002ae6:	2102      	movs	r1, #2
 8002ae8:	3004      	adds	r0, #4
 8002aea:	f7ff fee1 	bl	80028b0 <RCCEx_PLL2_Config>
 8002aee:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002af0:	b145      	cbz	r5, 8002b04 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8002af2:	462e      	mov	r6, r5
 8002af4:	e021      	b.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x72>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8002af6:	2601      	movs	r6, #1
 8002af8:	4635      	mov	r5, r6
 8002afa:	e01e      	b.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002afc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002b00:	d109      	bne.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002b02:	2500      	movs	r5, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002b04:	4a96      	ldr	r2, [pc, #600]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8002b06:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8002b08:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002b0c:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8002b0e:	430b      	orrs	r3, r1
 8002b10:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b12:	2600      	movs	r6, #0
 8002b14:	e011      	b.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x72>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8002b16:	2601      	movs	r6, #1
 8002b18:	4635      	mov	r5, r6
 8002b1a:	e00e      	b.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x72>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b1c:	4a90      	ldr	r2, [pc, #576]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8002b1e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002b20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b24:	62d3      	str	r3, [r2, #44]	; 0x2c
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b26:	2500      	movs	r5, #0
 8002b28:	e7ec      	b.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x3c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002b2a:	2102      	movs	r1, #2
 8002b2c:	3024      	adds	r0, #36	; 0x24
 8002b2e:	f7ff ff45 	bl	80029bc <RCCEx_PLL3_Config>
 8002b32:	4605      	mov	r5, r0
      break;
 8002b34:	e7dc      	b.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x28>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b36:	2600      	movs	r6, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b38:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002b3a:	6823      	ldr	r3, [r4, #0]
 8002b3c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002b40:	d014      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0xa4>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002b42:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002b44:	2b04      	cmp	r3, #4
 8002b46:	d830      	bhi.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002b48:	e8df f003 	tbb	[pc, r3]
 8002b4c:	08282203 	.word	0x08282203
 8002b50:	08          	.byte	0x08
 8002b51:	00          	.byte	0x00
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b52:	4a83      	ldr	r2, [pc, #524]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8002b54:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002b56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b5a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8002b5c:	bb45      	cbnz	r5, 8002bb0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b5e:	4a80      	ldr	r2, [pc, #512]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8002b60:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8002b62:	f023 0307 	bic.w	r3, r3, #7
 8002b66:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8002b68:	430b      	orrs	r3, r1
 8002b6a:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002b6c:	6823      	ldr	r3, [r4, #0]
 8002b6e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002b72:	d02f      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
    switch(PeriphClkInit->Sai23ClockSelection)
 8002b74:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002b76:	2b80      	cmp	r3, #128	; 0x80
 8002b78:	d04a      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8002b7a:	d81e      	bhi.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0xf2>
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d041      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002b80:	2b40      	cmp	r3, #64	; 0x40
 8002b82:	d117      	bne.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002b84:	2100      	movs	r1, #0
 8002b86:	1d20      	adds	r0, r4, #4
 8002b88:	f7ff fe92 	bl	80028b0 <RCCEx_PLL2_Config>
 8002b8c:	4605      	mov	r5, r0
      break;
 8002b8e:	e019      	b.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002b90:	2100      	movs	r1, #0
 8002b92:	1d20      	adds	r0, r4, #4
 8002b94:	f7ff fe8c 	bl	80028b0 <RCCEx_PLL2_Config>
 8002b98:	4605      	mov	r5, r0
      break;
 8002b9a:	e7df      	b.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x94>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002b9c:	2100      	movs	r1, #0
 8002b9e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002ba2:	f7ff ff0b 	bl	80029bc <RCCEx_PLL3_Config>
 8002ba6:	4605      	mov	r5, r0
      break;
 8002ba8:	e7d8      	b.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002baa:	2601      	movs	r6, #1
 8002bac:	4635      	mov	r5, r6
 8002bae:	e7dd      	b.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002bb0:	462e      	mov	r6, r5
 8002bb2:	e7db      	b.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0xa4>
    switch(PeriphClkInit->Sai23ClockSelection)
 8002bb4:	2601      	movs	r6, #1
 8002bb6:	4635      	mov	r5, r6
 8002bb8:	e00c      	b.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002bba:	2bc0      	cmp	r3, #192	; 0xc0
 8002bbc:	d002      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8002bbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bc2:	d11c      	bne.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x136>
    if(ret == HAL_OK)
 8002bc4:	bb5d      	cbnz	r5, 8002c1e <HAL_RCCEx_PeriphCLKConfig+0x156>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002bc6:	4a66      	ldr	r2, [pc, #408]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8002bc8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8002bca:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 8002bce:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8002bd0:	430b      	orrs	r3, r1
 8002bd2:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002bd4:	6823      	ldr	r3, [r4, #0]
 8002bd6:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002bda:	d034      	beq.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    switch(PeriphClkInit->Sai4AClockSelection)
 8002bdc:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8002be0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002be4:	d04d      	beq.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
 8002be6:	d81f      	bhi.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d044      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8002bec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002bf0:	d117      	bne.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002bf2:	2100      	movs	r1, #0
 8002bf4:	1d20      	adds	r0, r4, #4
 8002bf6:	f7ff fe5b 	bl	80028b0 <RCCEx_PLL2_Config>
 8002bfa:	4605      	mov	r5, r0
      break;
 8002bfc:	e01a      	b.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    switch(PeriphClkInit->Sai23ClockSelection)
 8002bfe:	2601      	movs	r6, #1
 8002c00:	4635      	mov	r5, r6
 8002c02:	e7e7      	b.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c04:	4a56      	ldr	r2, [pc, #344]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8002c06:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002c08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c0c:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8002c0e:	e7d9      	b.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002c10:	2100      	movs	r1, #0
 8002c12:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002c16:	f7ff fed1 	bl	80029bc <RCCEx_PLL3_Config>
 8002c1a:	4605      	mov	r5, r0
      break;
 8002c1c:	e7d2      	b.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8002c1e:	462e      	mov	r6, r5
 8002c20:	e7d8      	b.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
    switch(PeriphClkInit->Sai4AClockSelection)
 8002c22:	2601      	movs	r6, #1
 8002c24:	4635      	mov	r5, r6
 8002c26:	e00e      	b.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x17e>
 8002c28:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002c2c:	d002      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002c2e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c32:	d11d      	bne.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    if(ret == HAL_OK)
 8002c34:	bb65      	cbnz	r5, 8002c90 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002c36:	4a4a      	ldr	r2, [pc, #296]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8002c38:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002c3a:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8002c3e:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8002c42:	430b      	orrs	r3, r1
 8002c44:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002c46:	6823      	ldr	r3, [r4, #0]
 8002c48:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8002c4c:	d035      	beq.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x1f2>
    switch(PeriphClkInit->Sai4BClockSelection)
 8002c4e:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 8002c52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c56:	d053      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8002c58:	d81f      	bhi.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d04a      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
 8002c5e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c62:	d117      	bne.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002c64:	2100      	movs	r1, #0
 8002c66:	1d20      	adds	r0, r4, #4
 8002c68:	f7ff fe22 	bl	80028b0 <RCCEx_PLL2_Config>
 8002c6c:	4605      	mov	r5, r0
      break;
 8002c6e:	e01a      	b.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x1de>
    switch(PeriphClkInit->Sai4AClockSelection)
 8002c70:	2601      	movs	r6, #1
 8002c72:	4635      	mov	r5, r6
 8002c74:	e7e7      	b.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x17e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c76:	4a3a      	ldr	r2, [pc, #232]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8002c78:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002c7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c7e:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8002c80:	e7d8      	b.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002c82:	2100      	movs	r1, #0
 8002c84:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002c88:	f7ff fe98 	bl	80029bc <RCCEx_PLL3_Config>
 8002c8c:	4605      	mov	r5, r0
      break;
 8002c8e:	e7d1      	b.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002c90:	462e      	mov	r6, r5
 8002c92:	e7d8      	b.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    switch(PeriphClkInit->Sai4BClockSelection)
 8002c94:	2601      	movs	r6, #1
 8002c96:	4635      	mov	r5, r6
 8002c98:	e00f      	b.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 8002c9a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002c9e:	d002      	beq.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x1de>
 8002ca0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ca4:	d123      	bne.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x226>
    if(ret == HAL_OK)
 8002ca6:	2d00      	cmp	r5, #0
 8002ca8:	d131      	bne.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x246>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002caa:	4a2d      	ldr	r2, [pc, #180]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8002cac:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002cae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002cb2:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 8002cb6:	430b      	orrs	r3, r1
 8002cb8:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002cba:	6823      	ldr	r3, [r4, #0]
 8002cbc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002cc0:	d02e      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x258>
    switch(PeriphClkInit->QspiClockSelection)
 8002cc2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002cc4:	2b20      	cmp	r3, #32
 8002cc6:	d03f      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x280>
 8002cc8:	d826      	bhi.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x250>
 8002cca:	b133      	cbz	r3, 8002cda <HAL_RCCEx_PeriphCLKConfig+0x212>
 8002ccc:	2b10      	cmp	r3, #16
 8002cce:	d120      	bne.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cd0:	4a23      	ldr	r2, [pc, #140]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8002cd2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002cd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cd8:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8002cda:	2d00      	cmp	r5, #0
 8002cdc:	d13a      	bne.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002cde:	4a20      	ldr	r2, [pc, #128]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8002ce0:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8002ce2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002ce6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8002ce8:	430b      	orrs	r3, r1
 8002cea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cec:	e018      	b.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x258>
    switch(PeriphClkInit->Sai4BClockSelection)
 8002cee:	2601      	movs	r6, #1
 8002cf0:	4635      	mov	r5, r6
 8002cf2:	e7e2      	b.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x1f2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cf4:	4a1a      	ldr	r2, [pc, #104]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8002cf6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002cf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cfc:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8002cfe:	e7d2      	b.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002d00:	2100      	movs	r1, #0
 8002d02:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002d06:	f7ff fe59 	bl	80029bc <RCCEx_PLL3_Config>
 8002d0a:	4605      	mov	r5, r0
      break;
 8002d0c:	e7cb      	b.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x1de>
 8002d0e:	462e      	mov	r6, r5
 8002d10:	e7d3      	b.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x1f2>
    switch(PeriphClkInit->QspiClockSelection)
 8002d12:	2601      	movs	r6, #1
 8002d14:	4635      	mov	r5, r6
 8002d16:	e003      	b.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x258>
 8002d18:	2b30      	cmp	r3, #48	; 0x30
 8002d1a:	d0de      	beq.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x212>
 8002d1c:	2601      	movs	r6, #1
 8002d1e:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002d20:	6823      	ldr	r3, [r4, #0]
 8002d22:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002d26:	d02c      	beq.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    switch(PeriphClkInit->Spi123ClockSelection)
 8002d28:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002d2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d2e:	d04d      	beq.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x304>
 8002d30:	d818      	bhi.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x29c>
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d044      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8002d36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d3a:	d10d      	bne.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x290>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002d3c:	2100      	movs	r1, #0
 8002d3e:	1d20      	adds	r0, r4, #4
 8002d40:	f7ff fdb6 	bl	80028b0 <RCCEx_PLL2_Config>
 8002d44:	4605      	mov	r5, r0
      break;
 8002d46:	e013      	b.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002d48:	2102      	movs	r1, #2
 8002d4a:	1d20      	adds	r0, r4, #4
 8002d4c:	f7ff fdb0 	bl	80028b0 <RCCEx_PLL2_Config>
 8002d50:	4605      	mov	r5, r0
      break;
 8002d52:	e7c2      	b.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x212>
 8002d54:	462e      	mov	r6, r5
 8002d56:	e7e3      	b.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x258>
    switch(PeriphClkInit->Spi123ClockSelection)
 8002d58:	2601      	movs	r6, #1
 8002d5a:	4635      	mov	r5, r6
 8002d5c:	e011      	b.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8002d5e:	bf00      	nop
 8002d60:	58024400 	.word	0x58024400
 8002d64:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002d68:	d002      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002d6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d6e:	d124      	bne.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    if(ret == HAL_OK)
 8002d70:	2d00      	cmp	r5, #0
 8002d72:	d132      	bne.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x312>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002d74:	4a98      	ldr	r2, [pc, #608]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8002d76:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8002d78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d7c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002d7e:	430b      	orrs	r3, r1
 8002d80:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002d82:	6823      	ldr	r3, [r4, #0]
 8002d84:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8002d88:	d037      	beq.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x332>
    switch(PeriphClkInit->Spi45ClockSelection)
 8002d8a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002d8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d90:	d051      	beq.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8002d92:	d827      	bhi.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8002d94:	b13b      	cbz	r3, 8002da6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8002d96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d9a:	d120      	bne.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x316>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002d9c:	2101      	movs	r1, #1
 8002d9e:	1d20      	adds	r0, r4, #4
 8002da0:	f7ff fd86 	bl	80028b0 <RCCEx_PLL2_Config>
 8002da4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002da6:	2d00      	cmp	r5, #0
 8002da8:	d14c      	bne.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x37c>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002daa:	4a8b      	ldr	r2, [pc, #556]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8002dac:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8002dae:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8002db2:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8002db4:	430b      	orrs	r3, r1
 8002db6:	6513      	str	r3, [r2, #80]	; 0x50
 8002db8:	e01f      	b.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x332>
    switch(PeriphClkInit->Spi123ClockSelection)
 8002dba:	2601      	movs	r6, #1
 8002dbc:	4635      	mov	r5, r6
 8002dbe:	e7e0      	b.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002dc0:	4a85      	ldr	r2, [pc, #532]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8002dc2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002dc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dc8:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8002dca:	e7d1      	b.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002dcc:	2100      	movs	r1, #0
 8002dce:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002dd2:	f7ff fdf3 	bl	80029bc <RCCEx_PLL3_Config>
 8002dd6:	4605      	mov	r5, r0
      break;
 8002dd8:	e7ca      	b.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002dda:	462e      	mov	r6, r5
 8002ddc:	e7d1      	b.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    switch(PeriphClkInit->Spi45ClockSelection)
 8002dde:	2601      	movs	r6, #1
 8002de0:	4635      	mov	r5, r6
 8002de2:	e00a      	b.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x332>
 8002de4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002de8:	d0dd      	beq.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8002dea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dee:	d0da      	beq.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8002df0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002df4:	d0d7      	beq.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8002df6:	2601      	movs	r6, #1
 8002df8:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002dfa:	6823      	ldr	r3, [r4, #0]
 8002dfc:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8002e00:	d030      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x39c>
    switch(PeriphClkInit->Spi6ClockSelection)
 8002e02:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8002e06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e0a:	d044      	beq.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8002e0c:	d81f      	bhi.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x386>
 8002e0e:	b13b      	cbz	r3, 8002e20 <HAL_RCCEx_PeriphCLKConfig+0x358>
 8002e10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e14:	d118      	bne.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x380>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002e16:	2101      	movs	r1, #1
 8002e18:	1d20      	adds	r0, r4, #4
 8002e1a:	f7ff fd49 	bl	80028b0 <RCCEx_PLL2_Config>
 8002e1e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002e20:	2d00      	cmp	r5, #0
 8002e22:	d13f      	bne.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002e24:	4a6c      	ldr	r2, [pc, #432]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8002e26:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002e28:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8002e2c:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8002e30:	430b      	orrs	r3, r1
 8002e32:	6593      	str	r3, [r2, #88]	; 0x58
 8002e34:	e016      	b.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x39c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002e36:	2101      	movs	r1, #1
 8002e38:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002e3c:	f7ff fdbe 	bl	80029bc <RCCEx_PLL3_Config>
 8002e40:	4605      	mov	r5, r0
      break;
 8002e42:	e7b0      	b.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8002e44:	462e      	mov	r6, r5
 8002e46:	e7d8      	b.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x332>
    switch(PeriphClkInit->Spi6ClockSelection)
 8002e48:	2601      	movs	r6, #1
 8002e4a:	4635      	mov	r5, r6
 8002e4c:	e00a      	b.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x39c>
 8002e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e52:	d0e5      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x358>
 8002e54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e58:	d0e2      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x358>
 8002e5a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002e5e:	d0df      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x358>
 8002e60:	2601      	movs	r6, #1
 8002e62:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002e64:	6823      	ldr	r3, [r4, #0]
 8002e66:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002e6a:	d009      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    switch(PeriphClkInit->FdcanClockSelection)
 8002e6c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8002e6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e72:	d019      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002e74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e78:	d024      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8002e7a:	b1d3      	cbz	r3, 8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8002e7c:	2601      	movs	r6, #1
 8002e7e:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002e80:	6823      	ldr	r3, [r4, #0]
 8002e82:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002e86:	d03d      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    switch(PeriphClkInit->FmcClockSelection)
 8002e88:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002e8a:	2b03      	cmp	r3, #3
 8002e8c:	d836      	bhi.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x434>
 8002e8e:	e8df f003 	tbb	[pc, r3]
 8002e92:	2126      	.short	0x2126
 8002e94:	262f      	.short	0x262f
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002e96:	2101      	movs	r1, #1
 8002e98:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002e9c:	f7ff fd8e 	bl	80029bc <RCCEx_PLL3_Config>
 8002ea0:	4605      	mov	r5, r0
      break;
 8002ea2:	e7bd      	b.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x358>
 8002ea4:	462e      	mov	r6, r5
 8002ea6:	e7dd      	b.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x39c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ea8:	4a4b      	ldr	r2, [pc, #300]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8002eaa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002eac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002eb0:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8002eb2:	b96d      	cbnz	r5, 8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x408>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002eb4:	4a48      	ldr	r2, [pc, #288]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8002eb6:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8002eb8:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002ebc:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8002ebe:	430b      	orrs	r3, r1
 8002ec0:	6513      	str	r3, [r2, #80]	; 0x50
 8002ec2:	e7dd      	b.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002ec4:	2101      	movs	r1, #1
 8002ec6:	1d20      	adds	r0, r4, #4
 8002ec8:	f7ff fcf2 	bl	80028b0 <RCCEx_PLL2_Config>
 8002ecc:	4605      	mov	r5, r0
      break;
 8002ece:	e7f0      	b.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8002ed0:	462e      	mov	r6, r5
 8002ed2:	e7d5      	b.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ed4:	4a40      	ldr	r2, [pc, #256]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8002ed6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002ed8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002edc:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8002ede:	b985      	cbnz	r5, 8002f02 <HAL_RCCEx_PeriphCLKConfig+0x43a>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002ee0:	4a3d      	ldr	r2, [pc, #244]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8002ee2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8002ee4:	f023 0303 	bic.w	r3, r3, #3
 8002ee8:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002eea:	430b      	orrs	r3, r1
 8002eec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002eee:	e009      	b.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x43c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002ef0:	2102      	movs	r1, #2
 8002ef2:	1d20      	adds	r0, r4, #4
 8002ef4:	f7ff fcdc 	bl	80028b0 <RCCEx_PLL2_Config>
 8002ef8:	4605      	mov	r5, r0
      break;
 8002efa:	e7f0      	b.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x416>
    switch(PeriphClkInit->FmcClockSelection)
 8002efc:	2601      	movs	r6, #1
 8002efe:	4635      	mov	r5, r6
 8002f00:	e000      	b.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x43c>
 8002f02:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f04:	6823      	ldr	r3, [r4, #0]
 8002f06:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002f0a:	d11f      	bne.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x484>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002f0c:	6823      	ldr	r3, [r4, #0]
 8002f0e:	f013 0f01 	tst.w	r3, #1
 8002f12:	f000 809b 	beq.w	800304c <HAL_RCCEx_PeriphCLKConfig+0x584>
    switch(PeriphClkInit->Usart16ClockSelection)
 8002f16:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8002f18:	2b28      	cmp	r3, #40	; 0x28
 8002f1a:	f200 8095 	bhi.w	8003048 <HAL_RCCEx_PeriphCLKConfig+0x580>
 8002f1e:	e8df f003 	tbb	[pc, r3]
 8002f22:	9383      	.short	0x9383
 8002f24:	93939393 	.word	0x93939393
 8002f28:	937e9393 	.word	0x937e9393
 8002f2c:	93939393 	.word	0x93939393
 8002f30:	938c9393 	.word	0x938c9393
 8002f34:	93939393 	.word	0x93939393
 8002f38:	93839393 	.word	0x93839393
 8002f3c:	93939393 	.word	0x93939393
 8002f40:	93839393 	.word	0x93839393
 8002f44:	93939393 	.word	0x93939393
 8002f48:	9393      	.short	0x9393
 8002f4a:	83          	.byte	0x83
 8002f4b:	00          	.byte	0x00
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f4c:	4a23      	ldr	r2, [pc, #140]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002f4e:	6813      	ldr	r3, [r2, #0]
 8002f50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f54:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002f56:	f7fe fbfb 	bl	8001750 <HAL_GetTick>
 8002f5a:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f5c:	4b1f      	ldr	r3, [pc, #124]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002f64:	d105      	bne.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f66:	f7fe fbf3 	bl	8001750 <HAL_GetTick>
 8002f6a:	1bc0      	subs	r0, r0, r7
 8002f6c:	2864      	cmp	r0, #100	; 0x64
 8002f6e:	d9f5      	bls.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x494>
        ret = HAL_TIMEOUT;
 8002f70:	2503      	movs	r5, #3
    if(ret == HAL_OK)
 8002f72:	2d00      	cmp	r5, #0
 8002f74:	d14f      	bne.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x54e>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002f76:	4b18      	ldr	r3, [pc, #96]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8002f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f7a:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8002f7e:	4053      	eors	r3, r2
 8002f80:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002f84:	d00c      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f86:	4b14      	ldr	r3, [pc, #80]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8002f88:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002f8a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f8e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002f90:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8002f94:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f96:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002f98:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8002f9c:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8002f9e:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002fa0:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8002fa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fa8:	d01a      	beq.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x518>
      if(ret == HAL_OK)
 8002faa:	2d00      	cmp	r5, #0
 8002fac:	d135      	bne.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x552>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fae:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8002fb2:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8002fb6:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8002fba:	d022      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x53a>
 8002fbc:	4a06      	ldr	r2, [pc, #24]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8002fbe:	6913      	ldr	r3, [r2, #16]
 8002fc0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002fc4:	6113      	str	r3, [r2, #16]
 8002fc6:	4904      	ldr	r1, [pc, #16]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8002fc8:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8002fca:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8002fce:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	670b      	str	r3, [r1, #112]	; 0x70
 8002fd6:	e799      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x444>
 8002fd8:	58024400 	.word	0x58024400
 8002fdc:	58024800 	.word	0x58024800
        tickstart = HAL_GetTick();
 8002fe0:	f7fe fbb6 	bl	8001750 <HAL_GetTick>
 8002fe4:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002fe6:	4b87      	ldr	r3, [pc, #540]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8002fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fea:	f013 0f02 	tst.w	r3, #2
 8002fee:	d1dc      	bne.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x4e2>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ff0:	f7fe fbae 	bl	8001750 <HAL_GetTick>
 8002ff4:	1bc0      	subs	r0, r0, r7
 8002ff6:	f241 3388 	movw	r3, #5000	; 0x1388
 8002ffa:	4298      	cmp	r0, r3
 8002ffc:	d9f3      	bls.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
            ret = HAL_TIMEOUT;
 8002ffe:	2503      	movs	r5, #3
 8003000:	e7d3      	b.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x4e2>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003002:	4880      	ldr	r0, [pc, #512]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8003004:	6902      	ldr	r2, [r0, #16]
 8003006:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 800300a:	497f      	ldr	r1, [pc, #508]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x740>)
 800300c:	ea01 1313 	and.w	r3, r1, r3, lsr #4
 8003010:	4313      	orrs	r3, r2
 8003012:	6103      	str	r3, [r0, #16]
 8003014:	e7d7      	b.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
      status = ret;
 8003016:	462e      	mov	r6, r5
 8003018:	e778      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x444>
        status = ret;
 800301a:	462e      	mov	r6, r5
 800301c:	e776      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x444>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800301e:	2101      	movs	r1, #1
 8003020:	1d20      	adds	r0, r4, #4
 8003022:	f7ff fc45 	bl	80028b0 <RCCEx_PLL2_Config>
 8003026:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003028:	b9e5      	cbnz	r5, 8003064 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800302a:	4a76      	ldr	r2, [pc, #472]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800302c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800302e:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8003032:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8003034:	430b      	orrs	r3, r1
 8003036:	6553      	str	r3, [r2, #84]	; 0x54
 8003038:	e008      	b.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x584>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800303a:	2101      	movs	r1, #1
 800303c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003040:	f7ff fcbc 	bl	80029bc <RCCEx_PLL3_Config>
 8003044:	4605      	mov	r5, r0
      break;
 8003046:	e7ef      	b.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x560>
    switch(PeriphClkInit->Usart16ClockSelection)
 8003048:	2601      	movs	r6, #1
 800304a:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800304c:	6823      	ldr	r3, [r4, #0]
 800304e:	f013 0f02 	tst.w	r3, #2
 8003052:	d022      	beq.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x5d2>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003054:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8003056:	2b05      	cmp	r3, #5
 8003058:	d81b      	bhi.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 800305a:	e8df f003 	tbb	[pc, r3]
 800305e:	050a      	.short	0x050a
 8003060:	0a0a0a13 	.word	0x0a0a0a13
 8003064:	462e      	mov	r6, r5
 8003066:	e7f1      	b.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x584>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003068:	2101      	movs	r1, #1
 800306a:	1d20      	adds	r0, r4, #4
 800306c:	f7ff fc20 	bl	80028b0 <RCCEx_PLL2_Config>
 8003070:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003072:	b98d      	cbnz	r5, 8003098 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003074:	4a63      	ldr	r2, [pc, #396]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8003076:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003078:	f023 0307 	bic.w	r3, r3, #7
 800307c:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800307e:	430b      	orrs	r3, r1
 8003080:	6553      	str	r3, [r2, #84]	; 0x54
 8003082:	e00a      	b.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x5d2>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003084:	2101      	movs	r1, #1
 8003086:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800308a:	f7ff fc97 	bl	80029bc <RCCEx_PLL3_Config>
 800308e:	4605      	mov	r5, r0
      break;
 8003090:	e7ef      	b.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003092:	2601      	movs	r6, #1
 8003094:	4635      	mov	r5, r6
 8003096:	e000      	b.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 8003098:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800309a:	6823      	ldr	r3, [r4, #0]
 800309c:	f013 0f04 	tst.w	r3, #4
 80030a0:	d022      	beq.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x620>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80030a2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80030a6:	2b05      	cmp	r3, #5
 80030a8:	d81a      	bhi.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x618>
 80030aa:	e8df f003 	tbb	[pc, r3]
 80030ae:	0308      	.short	0x0308
 80030b0:	08080812 	.word	0x08080812
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80030b4:	2101      	movs	r1, #1
 80030b6:	1d20      	adds	r0, r4, #4
 80030b8:	f7ff fbfa 	bl	80028b0 <RCCEx_PLL2_Config>
 80030bc:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80030be:	b995      	cbnz	r5, 80030e6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80030c0:	4a50      	ldr	r2, [pc, #320]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80030c2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80030c4:	f023 0307 	bic.w	r3, r3, #7
 80030c8:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 80030cc:	430b      	orrs	r3, r1
 80030ce:	6593      	str	r3, [r2, #88]	; 0x58
 80030d0:	e00a      	b.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x620>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80030d2:	2101      	movs	r1, #1
 80030d4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80030d8:	f7ff fc70 	bl	80029bc <RCCEx_PLL3_Config>
 80030dc:	4605      	mov	r5, r0
      break;
 80030de:	e7ee      	b.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x5f6>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80030e0:	2601      	movs	r6, #1
 80030e2:	4635      	mov	r5, r6
 80030e4:	e000      	b.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x620>
 80030e6:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80030e8:	6823      	ldr	r3, [r4, #0]
 80030ea:	f013 0f20 	tst.w	r3, #32
 80030ee:	d027      	beq.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x678>
    switch(PeriphClkInit->Lptim1ClockSelection)
 80030f0:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80030f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030f8:	d040      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x6b4>
 80030fa:	d816      	bhi.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80030fc:	b13b      	cbz	r3, 800310e <HAL_RCCEx_PeriphCLKConfig+0x646>
 80030fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003102:	d10f      	bne.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003104:	2100      	movs	r1, #0
 8003106:	1d20      	adds	r0, r4, #4
 8003108:	f7ff fbd2 	bl	80028b0 <RCCEx_PLL2_Config>
 800310c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800310e:	2d00      	cmp	r5, #0
 8003110:	d13b      	bne.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x6c2>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003112:	4a3c      	ldr	r2, [pc, #240]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8003114:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003116:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800311a:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800311e:	430b      	orrs	r3, r1
 8003120:	6553      	str	r3, [r2, #84]	; 0x54
 8003122:	e00d      	b.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x678>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003124:	2601      	movs	r6, #1
 8003126:	4635      	mov	r5, r6
 8003128:	e00a      	b.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800312a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800312e:	d0ee      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x646>
 8003130:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003134:	d0eb      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x646>
 8003136:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800313a:	d0e8      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x646>
 800313c:	2601      	movs	r6, #1
 800313e:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003140:	6823      	ldr	r3, [r4, #0]
 8003142:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003146:	d030      	beq.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x6e2>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003148:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800314c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003150:	d04b      	beq.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x722>
 8003152:	d81f      	bhi.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8003154:	b13b      	cbz	r3, 8003166 <HAL_RCCEx_PeriphCLKConfig+0x69e>
 8003156:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800315a:	d118      	bne.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800315c:	2100      	movs	r1, #0
 800315e:	1d20      	adds	r0, r4, #4
 8003160:	f7ff fba6 	bl	80028b0 <RCCEx_PLL2_Config>
 8003164:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003166:	2d00      	cmp	r5, #0
 8003168:	d146      	bne.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x730>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800316a:	4a26      	ldr	r2, [pc, #152]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800316c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800316e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8003172:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8003176:	430b      	orrs	r3, r1
 8003178:	6593      	str	r3, [r2, #88]	; 0x58
 800317a:	e016      	b.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800317c:	2102      	movs	r1, #2
 800317e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003182:	f7ff fc1b 	bl	80029bc <RCCEx_PLL3_Config>
 8003186:	4605      	mov	r5, r0
      break;
 8003188:	e7c1      	b.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x646>
 800318a:	462e      	mov	r6, r5
 800318c:	e7d8      	b.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x678>
    switch(PeriphClkInit->Lptim2ClockSelection)
 800318e:	2601      	movs	r6, #1
 8003190:	4635      	mov	r5, r6
 8003192:	e00a      	b.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8003194:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003198:	d0e5      	beq.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x69e>
 800319a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800319e:	d0e2      	beq.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x69e>
 80031a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80031a4:	d0df      	beq.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x69e>
 80031a6:	2601      	movs	r6, #1
 80031a8:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80031aa:	6823      	ldr	r3, [r4, #0]
 80031ac:	f013 0f80 	tst.w	r3, #128	; 0x80
 80031b0:	d037      	beq.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x75a>
    switch(PeriphClkInit->Lptim345ClockSelection)
 80031b2:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 80031b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031ba:	f000 80a2 	beq.w	8003302 <HAL_RCCEx_PeriphCLKConfig+0x83a>
 80031be:	d825      	bhi.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x744>
 80031c0:	b13b      	cbz	r3, 80031d2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
 80031c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031c6:	d119      	bne.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x734>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80031c8:	2100      	movs	r1, #0
 80031ca:	1d20      	adds	r0, r4, #4
 80031cc:	f7ff fb70 	bl	80028b0 <RCCEx_PLL2_Config>
 80031d0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80031d2:	2d00      	cmp	r5, #0
 80031d4:	f040 809c 	bne.w	8003310 <HAL_RCCEx_PeriphCLKConfig+0x848>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80031d8:	4a0a      	ldr	r2, [pc, #40]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80031da:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80031dc:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80031e0:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 80031e4:	430b      	orrs	r3, r1
 80031e6:	6593      	str	r3, [r2, #88]	; 0x58
 80031e8:	e01b      	b.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x75a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80031ea:	2102      	movs	r1, #2
 80031ec:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80031f0:	f7ff fbe4 	bl	80029bc <RCCEx_PLL3_Config>
 80031f4:	4605      	mov	r5, r0
      break;
 80031f6:	e7b6      	b.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x69e>
 80031f8:	462e      	mov	r6, r5
 80031fa:	e7d6      	b.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x6e2>
    switch(PeriphClkInit->Lptim345ClockSelection)
 80031fc:	2601      	movs	r6, #1
 80031fe:	4635      	mov	r5, r6
 8003200:	e00f      	b.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8003202:	bf00      	nop
 8003204:	58024400 	.word	0x58024400
 8003208:	00ffffcf 	.word	0x00ffffcf
 800320c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003210:	d0df      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
 8003212:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003216:	d0dc      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
 8003218:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800321c:	d0d9      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
 800321e:	2601      	movs	r6, #1
 8003220:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003222:	6823      	ldr	r3, [r4, #0]
 8003224:	f013 0f08 	tst.w	r3, #8
 8003228:	d00c      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x77c>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800322a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800322e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003232:	d06f      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x84c>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003234:	4a94      	ldr	r2, [pc, #592]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8003236:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003238:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800323c:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8003240:	430b      	orrs	r3, r1
 8003242:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003244:	6823      	ldr	r3, [r4, #0]
 8003246:	f013 0f10 	tst.w	r3, #16
 800324a:	d00c      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800324c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003250:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003254:	d067      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x85e>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003256:	4a8c      	ldr	r2, [pc, #560]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8003258:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800325a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800325e:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8003262:	430b      	orrs	r3, r1
 8003264:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003266:	6823      	ldr	r3, [r4, #0]
 8003268:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800326c:	d00b      	beq.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    switch(PeriphClkInit->AdcClockSelection)
 800326e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8003272:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003276:	d06e      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x88e>
 8003278:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800327c:	d061      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x87a>
 800327e:	2b00      	cmp	r3, #0
 8003280:	d05a      	beq.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x870>
 8003282:	2601      	movs	r6, #1
 8003284:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003286:	6823      	ldr	r3, [r4, #0]
 8003288:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800328c:	d00c      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    switch(PeriphClkInit->UsbClockSelection)
 800328e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8003292:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003296:	d076      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x8be>
 8003298:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800329c:	d069      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
 800329e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032a2:	d061      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x8a0>
 80032a4:	2601      	movs	r6, #1
 80032a6:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80032a8:	6823      	ldr	r3, [r4, #0]
 80032aa:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80032ae:	d007      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x7f8>
    switch(PeriphClkInit->SdmmcClockSelection)
 80032b0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d070      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x8d0>
 80032b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032ba:	d07b      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80032bc:	2601      	movs	r6, #1
 80032be:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80032c0:	6823      	ldr	r3, [r4, #0]
 80032c2:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80032c6:	d17d      	bne.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80032c8:	6823      	ldr	r3, [r4, #0]
 80032ca:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80032ce:	f000 8086 	beq.w	80033de <HAL_RCCEx_PeriphCLKConfig+0x916>
    switch(PeriphClkInit->RngClockSelection)
 80032d2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80032d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032d8:	f000 80c6 	beq.w	8003468 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 80032dc:	d97c      	bls.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x910>
 80032de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032e2:	d003      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x824>
 80032e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032e8:	f040 80bc 	bne.w	8003464 <HAL_RCCEx_PeriphCLKConfig+0x99c>
    if(ret == HAL_OK)
 80032ec:	2d00      	cmp	r5, #0
 80032ee:	f040 80c1 	bne.w	8003474 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80032f2:	4a65      	ldr	r2, [pc, #404]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 80032f4:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80032f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032fa:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80032fc:	430b      	orrs	r3, r1
 80032fe:	6553      	str	r3, [r2, #84]	; 0x54
 8003300:	e06d      	b.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x916>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003302:	2102      	movs	r1, #2
 8003304:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003308:	f7ff fb58 	bl	80029bc <RCCEx_PLL3_Config>
 800330c:	4605      	mov	r5, r0
      break;
 800330e:	e760      	b.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
 8003310:	462e      	mov	r6, r5
 8003312:	e786      	b.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x75a>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003314:	2102      	movs	r1, #2
 8003316:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800331a:	f7ff fb4f 	bl	80029bc <RCCEx_PLL3_Config>
 800331e:	2800      	cmp	r0, #0
 8003320:	d088      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x76c>
          status = HAL_ERROR;
 8003322:	2601      	movs	r6, #1
 8003324:	e786      	b.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x76c>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003326:	2102      	movs	r1, #2
 8003328:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800332c:	f7ff fb46 	bl	80029bc <RCCEx_PLL3_Config>
 8003330:	2800      	cmp	r0, #0
 8003332:	d090      	beq.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x78e>
        status = HAL_ERROR;
 8003334:	2601      	movs	r6, #1
 8003336:	e78e      	b.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x78e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003338:	2100      	movs	r1, #0
 800333a:	1d20      	adds	r0, r4, #4
 800333c:	f7ff fab8 	bl	80028b0 <RCCEx_PLL2_Config>
 8003340:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003342:	b97d      	cbnz	r5, 8003364 <HAL_RCCEx_PeriphCLKConfig+0x89c>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003344:	4a50      	ldr	r2, [pc, #320]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8003346:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003348:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800334c:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8003350:	430b      	orrs	r3, r1
 8003352:	6593      	str	r3, [r2, #88]	; 0x58
 8003354:	e797      	b.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003356:	2102      	movs	r1, #2
 8003358:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800335c:	f7ff fb2e 	bl	80029bc <RCCEx_PLL3_Config>
 8003360:	4605      	mov	r5, r0
      break;
 8003362:	e7ee      	b.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x87a>
 8003364:	462e      	mov	r6, r5
 8003366:	e78e      	b.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003368:	4a47      	ldr	r2, [pc, #284]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800336a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800336c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003370:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8003372:	b97d      	cbnz	r5, 8003394 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003374:	4a44      	ldr	r2, [pc, #272]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8003376:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003378:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800337c:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8003380:	430b      	orrs	r3, r1
 8003382:	6553      	str	r3, [r2, #84]	; 0x54
 8003384:	e790      	b.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003386:	2101      	movs	r1, #1
 8003388:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800338c:	f7ff fb16 	bl	80029bc <RCCEx_PLL3_Config>
 8003390:	4605      	mov	r5, r0
      break;
 8003392:	e7ee      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
 8003394:	462e      	mov	r6, r5
 8003396:	e787      	b.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003398:	4a3b      	ldr	r2, [pc, #236]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800339a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800339c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033a0:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80033a2:	b96d      	cbnz	r5, 80033c0 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80033a4:	4a38      	ldr	r2, [pc, #224]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 80033a6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80033a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033ac:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80033ae:	430b      	orrs	r3, r1
 80033b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80033b2:	e785      	b.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x7f8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80033b4:	2102      	movs	r1, #2
 80033b6:	1d20      	adds	r0, r4, #4
 80033b8:	f7ff fa7a 	bl	80028b0 <RCCEx_PLL2_Config>
 80033bc:	4605      	mov	r5, r0
      break;
 80033be:	e7f0      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
 80033c0:	462e      	mov	r6, r5
 80033c2:	e77d      	b.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x7f8>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80033c4:	2102      	movs	r1, #2
 80033c6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80033ca:	f7ff faf7 	bl	80029bc <RCCEx_PLL3_Config>
 80033ce:	2800      	cmp	r0, #0
 80033d0:	f43f af7a 	beq.w	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x800>
      status=HAL_ERROR;
 80033d4:	2601      	movs	r6, #1
 80033d6:	e777      	b.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x800>
    switch(PeriphClkInit->RngClockSelection)
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d087      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x824>
 80033dc:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80033de:	6823      	ldr	r3, [r4, #0]
 80033e0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80033e4:	d006      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x92c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80033e6:	4a28      	ldr	r2, [pc, #160]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 80033e8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80033ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80033ee:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80033f0:	430b      	orrs	r3, r1
 80033f2:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80033f4:	6823      	ldr	r3, [r4, #0]
 80033f6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80033fa:	d007      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x944>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80033fc:	4a22      	ldr	r2, [pc, #136]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 80033fe:	6913      	ldr	r3, [r2, #16]
 8003400:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003404:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
 8003408:	430b      	orrs	r3, r1
 800340a:	6113      	str	r3, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800340c:	6823      	ldr	r3, [r4, #0]
 800340e:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8003412:	d006      	beq.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x95a>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003414:	4a1c      	ldr	r2, [pc, #112]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8003416:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003418:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800341c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800341e:	430b      	orrs	r3, r1
 8003420:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003422:	6823      	ldr	r3, [r4, #0]
 8003424:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8003428:	d009      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x976>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800342a:	4b17      	ldr	r3, [pc, #92]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800342c:	691a      	ldr	r2, [r3, #16]
 800342e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003432:	611a      	str	r2, [r3, #16]
 8003434:	691a      	ldr	r2, [r3, #16]
 8003436:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
 800343a:	430a      	orrs	r2, r1
 800343c:	611a      	str	r2, [r3, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800343e:	6823      	ldr	r3, [r4, #0]
 8003440:	2b00      	cmp	r3, #0
 8003442:	db19      	blt.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003444:	6823      	ldr	r3, [r4, #0]
 8003446:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800344a:	d007      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x994>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800344c:	4a0e      	ldr	r2, [pc, #56]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800344e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003450:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003454:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8003458:	430b      	orrs	r3, r1
 800345a:	6553      	str	r3, [r2, #84]	; 0x54
  if (status == HAL_OK)
 800345c:	b106      	cbz	r6, 8003460 <HAL_RCCEx_PeriphCLKConfig+0x998>
  return HAL_ERROR;
 800345e:	2601      	movs	r6, #1
}
 8003460:	4630      	mov	r0, r6
 8003462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PeriphClkInit->RngClockSelection)
 8003464:	2601      	movs	r6, #1
 8003466:	e7ba      	b.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x916>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003468:	4a07      	ldr	r2, [pc, #28]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800346a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800346c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003470:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8003472:	e73b      	b.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x824>
 8003474:	462e      	mov	r6, r5
 8003476:	e7b2      	b.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x916>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003478:	4a03      	ldr	r2, [pc, #12]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800347a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800347c:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8003480:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003482:	430b      	orrs	r3, r1
 8003484:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003486:	e7dd      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8003488:	58024400 	.word	0x58024400

0800348c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800348c:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800348e:	2300      	movs	r3, #0
 8003490:	9301      	str	r3, [sp, #4]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003492:	9b01      	ldr	r3, [sp, #4]
 8003494:	3301      	adds	r3, #1
 8003496:	9301      	str	r3, [sp, #4]
 8003498:	4a0e      	ldr	r2, [pc, #56]	; (80034d4 <USB_CoreReset+0x48>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d814      	bhi.n	80034c8 <USB_CoreReset+0x3c>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800349e:	6903      	ldr	r3, [r0, #16]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	daf6      	bge.n	8003492 <USB_CoreReset+0x6>

  /* Core Soft Reset */
  count = 0U;
 80034a4:	2300      	movs	r3, #0
 80034a6:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80034a8:	6903      	ldr	r3, [r0, #16]
 80034aa:	f043 0301 	orr.w	r3, r3, #1
 80034ae:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 80034b0:	9b01      	ldr	r3, [sp, #4]
 80034b2:	3301      	adds	r3, #1
 80034b4:	9301      	str	r3, [sp, #4]
 80034b6:	4a07      	ldr	r2, [pc, #28]	; (80034d4 <USB_CoreReset+0x48>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d808      	bhi.n	80034ce <USB_CoreReset+0x42>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80034bc:	6903      	ldr	r3, [r0, #16]
 80034be:	f013 0f01 	tst.w	r3, #1
 80034c2:	d1f5      	bne.n	80034b0 <USB_CoreReset+0x24>

  return HAL_OK;
 80034c4:	2000      	movs	r0, #0
 80034c6:	e000      	b.n	80034ca <USB_CoreReset+0x3e>
      return HAL_TIMEOUT;
 80034c8:	2003      	movs	r0, #3
}
 80034ca:	b002      	add	sp, #8
 80034cc:	4770      	bx	lr
      return HAL_TIMEOUT;
 80034ce:	2003      	movs	r0, #3
 80034d0:	e7fb      	b.n	80034ca <USB_CoreReset+0x3e>
 80034d2:	bf00      	nop
 80034d4:	00030d40 	.word	0x00030d40

080034d8 <USB_CoreInit>:
{
 80034d8:	b084      	sub	sp, #16
 80034da:	b510      	push	{r4, lr}
 80034dc:	4604      	mov	r4, r0
 80034de:	a803      	add	r0, sp, #12
 80034e0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80034e4:	9b08      	ldr	r3, [sp, #32]
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d11d      	bne.n	8003526 <USB_CoreInit+0x4e>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80034ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80034ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034f0:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80034f2:	68e2      	ldr	r2, [r4, #12]
 80034f4:	4b1d      	ldr	r3, [pc, #116]	; (800356c <USB_CoreInit+0x94>)
 80034f6:	4013      	ands	r3, r2
 80034f8:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80034fa:	68e3      	ldr	r3, [r4, #12]
 80034fc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003500:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 8003502:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003504:	2b01      	cmp	r3, #1
 8003506:	d009      	beq.n	800351c <USB_CoreInit+0x44>
    ret = USB_CoreReset(USBx);
 8003508:	4620      	mov	r0, r4
 800350a:	f7ff ffbf 	bl	800348c <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 800350e:	9b06      	ldr	r3, [sp, #24]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d01b      	beq.n	800354c <USB_CoreInit+0x74>
}
 8003514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003518:	b004      	add	sp, #16
 800351a:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800351c:	68e3      	ldr	r3, [r4, #12]
 800351e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003522:	60e3      	str	r3, [r4, #12]
 8003524:	e7f0      	b.n	8003508 <USB_CoreInit+0x30>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003526:	68e3      	ldr	r3, [r4, #12]
 8003528:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800352c:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 800352e:	4620      	mov	r0, r4
 8003530:	f7ff ffac 	bl	800348c <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 8003534:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003536:	b923      	cbnz	r3, 8003542 <USB_CoreInit+0x6a>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003538:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800353a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800353e:	63a3      	str	r3, [r4, #56]	; 0x38
 8003540:	e7e5      	b.n	800350e <USB_CoreInit+0x36>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003542:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003544:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003548:	63a3      	str	r3, [r4, #56]	; 0x38
 800354a:	e7e0      	b.n	800350e <USB_CoreInit+0x36>
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800354c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800354e:	b29b      	uxth	r3, r3
 8003550:	65e3      	str	r3, [r4, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8003552:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003554:	4b06      	ldr	r3, [pc, #24]	; (8003570 <USB_CoreInit+0x98>)
 8003556:	4313      	orrs	r3, r2
 8003558:	65e3      	str	r3, [r4, #92]	; 0x5c
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800355a:	68a3      	ldr	r3, [r4, #8]
 800355c:	f043 0306 	orr.w	r3, r3, #6
 8003560:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003562:	68a3      	ldr	r3, [r4, #8]
 8003564:	f043 0320 	orr.w	r3, r3, #32
 8003568:	60a3      	str	r3, [r4, #8]
 800356a:	e7d3      	b.n	8003514 <USB_CoreInit+0x3c>
 800356c:	ffbdffbf 	.word	0xffbdffbf
 8003570:	03ee0000 	.word	0x03ee0000

08003574 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 8003574:	2a02      	cmp	r2, #2
 8003576:	d00a      	beq.n	800358e <USB_SetTurnaroundTime+0x1a>
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003578:	2109      	movs	r1, #9
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800357a:	68c2      	ldr	r2, [r0, #12]
 800357c:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 8003580:	60c2      	str	r2, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003582:	68c3      	ldr	r3, [r0, #12]
 8003584:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8003588:	60c3      	str	r3, [r0, #12]
}
 800358a:	2000      	movs	r0, #0
 800358c:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800358e:	4b20      	ldr	r3, [pc, #128]	; (8003610 <USB_SetTurnaroundTime+0x9c>)
 8003590:	440b      	add	r3, r1
 8003592:	4a20      	ldr	r2, [pc, #128]	; (8003614 <USB_SetTurnaroundTime+0xa0>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d929      	bls.n	80035ec <USB_SetTurnaroundTime+0x78>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003598:	4b1f      	ldr	r3, [pc, #124]	; (8003618 <USB_SetTurnaroundTime+0xa4>)
 800359a:	440b      	add	r3, r1
 800359c:	4a1f      	ldr	r2, [pc, #124]	; (800361c <USB_SetTurnaroundTime+0xa8>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d926      	bls.n	80035f0 <USB_SetTurnaroundTime+0x7c>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80035a2:	4b1f      	ldr	r3, [pc, #124]	; (8003620 <USB_SetTurnaroundTime+0xac>)
 80035a4:	440b      	add	r3, r1
 80035a6:	4a1f      	ldr	r2, [pc, #124]	; (8003624 <USB_SetTurnaroundTime+0xb0>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d923      	bls.n	80035f4 <USB_SetTurnaroundTime+0x80>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80035ac:	4b1e      	ldr	r3, [pc, #120]	; (8003628 <USB_SetTurnaroundTime+0xb4>)
 80035ae:	440b      	add	r3, r1
 80035b0:	4a1e      	ldr	r2, [pc, #120]	; (800362c <USB_SetTurnaroundTime+0xb8>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d320      	bcc.n	80035f8 <USB_SetTurnaroundTime+0x84>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80035b6:	4b1e      	ldr	r3, [pc, #120]	; (8003630 <USB_SetTurnaroundTime+0xbc>)
 80035b8:	440b      	add	r3, r1
 80035ba:	4a1e      	ldr	r2, [pc, #120]	; (8003634 <USB_SetTurnaroundTime+0xc0>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d91d      	bls.n	80035fc <USB_SetTurnaroundTime+0x88>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80035c0:	4b1d      	ldr	r3, [pc, #116]	; (8003638 <USB_SetTurnaroundTime+0xc4>)
 80035c2:	440b      	add	r3, r1
 80035c4:	4a1d      	ldr	r2, [pc, #116]	; (800363c <USB_SetTurnaroundTime+0xc8>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d31a      	bcc.n	8003600 <USB_SetTurnaroundTime+0x8c>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80035ca:	4b1d      	ldr	r3, [pc, #116]	; (8003640 <USB_SetTurnaroundTime+0xcc>)
 80035cc:	440b      	add	r3, r1
 80035ce:	4a1d      	ldr	r2, [pc, #116]	; (8003644 <USB_SetTurnaroundTime+0xd0>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d317      	bcc.n	8003604 <USB_SetTurnaroundTime+0x90>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80035d4:	4b1c      	ldr	r3, [pc, #112]	; (8003648 <USB_SetTurnaroundTime+0xd4>)
 80035d6:	440b      	add	r3, r1
 80035d8:	4a1c      	ldr	r2, [pc, #112]	; (800364c <USB_SetTurnaroundTime+0xd8>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d314      	bcc.n	8003608 <USB_SetTurnaroundTime+0x94>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80035de:	4b1c      	ldr	r3, [pc, #112]	; (8003650 <USB_SetTurnaroundTime+0xdc>)
 80035e0:	440b      	add	r3, r1
 80035e2:	4a1c      	ldr	r2, [pc, #112]	; (8003654 <USB_SetTurnaroundTime+0xe0>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d211      	bcs.n	800360c <USB_SetTurnaroundTime+0x98>
      UsbTrd = 0x7U;
 80035e8:	2107      	movs	r1, #7
 80035ea:	e7c6      	b.n	800357a <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xFU;
 80035ec:	210f      	movs	r1, #15
 80035ee:	e7c4      	b.n	800357a <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xEU;
 80035f0:	210e      	movs	r1, #14
 80035f2:	e7c2      	b.n	800357a <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xDU;
 80035f4:	210d      	movs	r1, #13
 80035f6:	e7c0      	b.n	800357a <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xCU;
 80035f8:	210c      	movs	r1, #12
 80035fa:	e7be      	b.n	800357a <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xBU;
 80035fc:	210b      	movs	r1, #11
 80035fe:	e7bc      	b.n	800357a <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xAU;
 8003600:	210a      	movs	r1, #10
 8003602:	e7ba      	b.n	800357a <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x9U;
 8003604:	2109      	movs	r1, #9
 8003606:	e7b8      	b.n	800357a <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x8U;
 8003608:	2108      	movs	r1, #8
 800360a:	e7b6      	b.n	800357a <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x6U;
 800360c:	2106      	movs	r1, #6
 800360e:	e7b4      	b.n	800357a <USB_SetTurnaroundTime+0x6>
 8003610:	ff275340 	.word	0xff275340
 8003614:	000c34ff 	.word	0x000c34ff
 8003618:	ff1b1e40 	.word	0xff1b1e40
 800361c:	000f423f 	.word	0x000f423f
 8003620:	ff0bdc00 	.word	0xff0bdc00
 8003624:	00124f7f 	.word	0x00124f7f
 8003628:	fef98c80 	.word	0xfef98c80
 800362c:	0013d620 	.word	0x0013d620
 8003630:	fee5b660 	.word	0xfee5b660
 8003634:	0016e35f 	.word	0x0016e35f
 8003638:	feced300 	.word	0xfeced300
 800363c:	001b7740 	.word	0x001b7740
 8003640:	feb35bc0 	.word	0xfeb35bc0
 8003644:	002191c0 	.word	0x002191c0
 8003648:	fe91ca00 	.word	0xfe91ca00
 800364c:	00387520 	.word	0x00387520
 8003650:	fe5954e0 	.word	0xfe5954e0
 8003654:	00419ce0 	.word	0x00419ce0

08003658 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003658:	6883      	ldr	r3, [r0, #8]
 800365a:	f043 0301 	orr.w	r3, r3, #1
 800365e:	6083      	str	r3, [r0, #8]
}
 8003660:	2000      	movs	r0, #0
 8003662:	4770      	bx	lr

08003664 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003664:	6883      	ldr	r3, [r0, #8]
 8003666:	f023 0301 	bic.w	r3, r3, #1
 800366a:	6083      	str	r3, [r0, #8]
}
 800366c:	2000      	movs	r0, #0
 800366e:	4770      	bx	lr

08003670 <USB_FlushTxFifo>:
{
 8003670:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8003672:	2300      	movs	r3, #0
 8003674:	9301      	str	r3, [sp, #4]
    if (++count > 200000U)
 8003676:	9b01      	ldr	r3, [sp, #4]
 8003678:	3301      	adds	r3, #1
 800367a:	9301      	str	r3, [sp, #4]
 800367c:	4a0e      	ldr	r2, [pc, #56]	; (80036b8 <USB_FlushTxFifo+0x48>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d814      	bhi.n	80036ac <USB_FlushTxFifo+0x3c>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003682:	6903      	ldr	r3, [r0, #16]
 8003684:	2b00      	cmp	r3, #0
 8003686:	daf6      	bge.n	8003676 <USB_FlushTxFifo+0x6>
  count = 0U;
 8003688:	2300      	movs	r3, #0
 800368a:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800368c:	0189      	lsls	r1, r1, #6
 800368e:	f041 0120 	orr.w	r1, r1, #32
 8003692:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 8003694:	9b01      	ldr	r3, [sp, #4]
 8003696:	3301      	adds	r3, #1
 8003698:	9301      	str	r3, [sp, #4]
 800369a:	4a07      	ldr	r2, [pc, #28]	; (80036b8 <USB_FlushTxFifo+0x48>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d808      	bhi.n	80036b2 <USB_FlushTxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80036a0:	6903      	ldr	r3, [r0, #16]
 80036a2:	f013 0f20 	tst.w	r3, #32
 80036a6:	d1f5      	bne.n	8003694 <USB_FlushTxFifo+0x24>
  return HAL_OK;
 80036a8:	2000      	movs	r0, #0
 80036aa:	e000      	b.n	80036ae <USB_FlushTxFifo+0x3e>
      return HAL_TIMEOUT;
 80036ac:	2003      	movs	r0, #3
}
 80036ae:	b002      	add	sp, #8
 80036b0:	4770      	bx	lr
      return HAL_TIMEOUT;
 80036b2:	2003      	movs	r0, #3
 80036b4:	e7fb      	b.n	80036ae <USB_FlushTxFifo+0x3e>
 80036b6:	bf00      	nop
 80036b8:	00030d40 	.word	0x00030d40

080036bc <USB_FlushRxFifo>:
{
 80036bc:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80036be:	2300      	movs	r3, #0
 80036c0:	9301      	str	r3, [sp, #4]
    if (++count > 200000U)
 80036c2:	9b01      	ldr	r3, [sp, #4]
 80036c4:	3301      	adds	r3, #1
 80036c6:	9301      	str	r3, [sp, #4]
 80036c8:	4a0d      	ldr	r2, [pc, #52]	; (8003700 <USB_FlushRxFifo+0x44>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d812      	bhi.n	80036f4 <USB_FlushRxFifo+0x38>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80036ce:	6903      	ldr	r3, [r0, #16]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	daf6      	bge.n	80036c2 <USB_FlushRxFifo+0x6>
  count = 0U;
 80036d4:	2300      	movs	r3, #0
 80036d6:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80036d8:	2310      	movs	r3, #16
 80036da:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 80036dc:	9b01      	ldr	r3, [sp, #4]
 80036de:	3301      	adds	r3, #1
 80036e0:	9301      	str	r3, [sp, #4]
 80036e2:	4a07      	ldr	r2, [pc, #28]	; (8003700 <USB_FlushRxFifo+0x44>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d808      	bhi.n	80036fa <USB_FlushRxFifo+0x3e>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80036e8:	6903      	ldr	r3, [r0, #16]
 80036ea:	f013 0f10 	tst.w	r3, #16
 80036ee:	d1f5      	bne.n	80036dc <USB_FlushRxFifo+0x20>
  return HAL_OK;
 80036f0:	2000      	movs	r0, #0
 80036f2:	e000      	b.n	80036f6 <USB_FlushRxFifo+0x3a>
      return HAL_TIMEOUT;
 80036f4:	2003      	movs	r0, #3
}
 80036f6:	b002      	add	sp, #8
 80036f8:	4770      	bx	lr
      return HAL_TIMEOUT;
 80036fa:	2003      	movs	r0, #3
 80036fc:	e7fb      	b.n	80036f6 <USB_FlushRxFifo+0x3a>
 80036fe:	bf00      	nop
 8003700:	00030d40 	.word	0x00030d40

08003704 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8003704:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8003708:	4319      	orrs	r1, r3
 800370a:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 800370e:	2000      	movs	r0, #0
 8003710:	4770      	bx	lr
	...

08003714 <USB_DevInit>:
{
 8003714:	b084      	sub	sp, #16
 8003716:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800371a:	4604      	mov	r4, r0
 800371c:	a809      	add	r0, sp, #36	; 0x24
 800371e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003722:	4625      	mov	r5, r4
  for (i = 0U; i < 15U; i++)
 8003724:	2300      	movs	r3, #0
 8003726:	e006      	b.n	8003736 <USB_DevInit+0x22>
    USBx->DIEPTXF[i] = 0U;
 8003728:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800372c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8003730:	2100      	movs	r1, #0
 8003732:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8003734:	3301      	adds	r3, #1
 8003736:	2b0e      	cmp	r3, #14
 8003738:	d9f6      	bls.n	8003728 <USB_DevInit+0x14>
  if (cfg.vbus_sensing_enable == 0U)
 800373a:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
 800373e:	f1b8 0f00 	cmp.w	r8, #0
 8003742:	d124      	bne.n	800378e <USB_DevInit+0x7a>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003744:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
 8003748:	f043 0302 	orr.w	r3, r3, #2
 800374c:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003750:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003752:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003756:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003758:	6823      	ldr	r3, [r4, #0]
 800375a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800375e:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003760:	6823      	ldr	r3, [r4, #0]
 8003762:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003766:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 8003768:	2300      	movs	r3, #0
 800376a:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800376e:	f504 6600 	add.w	r6, r4, #2048	; 0x800
 8003772:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8003776:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800377a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800377c:	2b01      	cmp	r3, #1
 800377e:	d110      	bne.n	80037a2 <USB_DevInit+0x8e>
    if (cfg.speed == USBD_HS_SPEED)
 8003780:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003782:	b94b      	cbnz	r3, 8003798 <USB_DevInit+0x84>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003784:	2100      	movs	r1, #0
 8003786:	4620      	mov	r0, r4
 8003788:	f7ff ffbc 	bl	8003704 <USB_SetDevSpeed>
 800378c:	e00d      	b.n	80037aa <USB_DevInit+0x96>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800378e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003790:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003794:	63a3      	str	r3, [r4, #56]	; 0x38
 8003796:	e7e7      	b.n	8003768 <USB_DevInit+0x54>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003798:	2101      	movs	r1, #1
 800379a:	4620      	mov	r0, r4
 800379c:	f7ff ffb2 	bl	8003704 <USB_SetDevSpeed>
 80037a0:	e003      	b.n	80037aa <USB_DevInit+0x96>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80037a2:	2103      	movs	r1, #3
 80037a4:	4620      	mov	r0, r4
 80037a6:	f7ff ffad 	bl	8003704 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80037aa:	2110      	movs	r1, #16
 80037ac:	4620      	mov	r0, r4
 80037ae:	f7ff ff5f 	bl	8003670 <USB_FlushTxFifo>
 80037b2:	4681      	mov	r9, r0
 80037b4:	b108      	cbz	r0, 80037ba <USB_DevInit+0xa6>
    ret = HAL_ERROR;
 80037b6:	f04f 0901 	mov.w	r9, #1
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80037ba:	4620      	mov	r0, r4
 80037bc:	f7ff ff7e 	bl	80036bc <USB_FlushRxFifo>
 80037c0:	b108      	cbz	r0, 80037c6 <USB_DevInit+0xb2>
    ret = HAL_ERROR;
 80037c2:	f04f 0901 	mov.w	r9, #1
  USBx_DEVICE->DIEPMSK = 0U;
 80037c6:	2300      	movs	r3, #0
 80037c8:	6133      	str	r3, [r6, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80037ca:	6173      	str	r3, [r6, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80037cc:	61f3      	str	r3, [r6, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80037ce:	e00a      	b.n	80037e6 <USB_DevInit+0xd2>
      if (i == 0U)
 80037d0:	b9c3      	cbnz	r3, 8003804 <USB_DevInit+0xf0>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80037d2:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80037d6:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
    USBx_INEP(i)->DIEPTSIZ = 0U;
 80037da:	2200      	movs	r2, #0
 80037dc:	610a      	str	r2, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80037de:	f64f 327f 	movw	r2, #64383	; 0xfb7f
 80037e2:	608a      	str	r2, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80037e4:	3301      	adds	r3, #1
 80037e6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80037e8:	429f      	cmp	r7, r3
 80037ea:	d910      	bls.n	800380e <USB_DevInit+0xfa>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80037ec:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 80037f0:	f502 6110 	add.w	r1, r2, #2304	; 0x900
 80037f4:	f8d2 0900 	ldr.w	r0, [r2, #2304]	; 0x900
 80037f8:	2800      	cmp	r0, #0
 80037fa:	dbe9      	blt.n	80037d0 <USB_DevInit+0xbc>
      USBx_INEP(i)->DIEPCTL = 0U;
 80037fc:	2000      	movs	r0, #0
 80037fe:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 8003802:	e7ea      	b.n	80037da <USB_DevInit+0xc6>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003804:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003808:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 800380c:	e7e5      	b.n	80037da <USB_DevInit+0xc6>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800380e:	2300      	movs	r3, #0
 8003810:	e00a      	b.n	8003828 <USB_DevInit+0x114>
      if (i == 0U)
 8003812:	b1bb      	cbz	r3, 8003844 <USB_DevInit+0x130>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003814:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003818:	f8c2 0b00 	str.w	r0, [r2, #2816]	; 0xb00
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800381c:	2200      	movs	r2, #0
 800381e:	610a      	str	r2, [r1, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003820:	f64f 327f 	movw	r2, #64383	; 0xfb7f
 8003824:	608a      	str	r2, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003826:	3301      	adds	r3, #1
 8003828:	429f      	cmp	r7, r3
 800382a:	d910      	bls.n	800384e <USB_DevInit+0x13a>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800382c:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 8003830:	f502 6130 	add.w	r1, r2, #2816	; 0xb00
 8003834:	f8d2 0b00 	ldr.w	r0, [r2, #2816]	; 0xb00
 8003838:	2800      	cmp	r0, #0
 800383a:	dbea      	blt.n	8003812 <USB_DevInit+0xfe>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800383c:	2000      	movs	r0, #0
 800383e:	f8c2 0b00 	str.w	r0, [r2, #2816]	; 0xb00
 8003842:	e7eb      	b.n	800381c <USB_DevInit+0x108>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003844:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8003848:	f8c2 0b00 	str.w	r0, [r2, #2816]	; 0xb00
 800384c:	e7e6      	b.n	800381c <USB_DevInit+0x108>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800384e:	6933      	ldr	r3, [r6, #16]
 8003850:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003854:	6133      	str	r3, [r6, #16]
  USBx->GINTMSK = 0U;
 8003856:	2300      	movs	r3, #0
 8003858:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 800385a:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 800385e:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 8003860:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003862:	b91b      	cbnz	r3, 800386c <USB_DevInit+0x158>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003864:	69a3      	ldr	r3, [r4, #24]
 8003866:	f043 0310 	orr.w	r3, r3, #16
 800386a:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800386c:	69a2      	ldr	r2, [r4, #24]
 800386e:	4b0b      	ldr	r3, [pc, #44]	; (800389c <USB_DevInit+0x188>)
 8003870:	4313      	orrs	r3, r2
 8003872:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8003874:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003876:	b11b      	cbz	r3, 8003880 <USB_DevInit+0x16c>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003878:	69a3      	ldr	r3, [r4, #24]
 800387a:	f043 0308 	orr.w	r3, r3, #8
 800387e:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8003880:	f1b8 0f01 	cmp.w	r8, #1
 8003884:	d004      	beq.n	8003890 <USB_DevInit+0x17c>
}
 8003886:	4648      	mov	r0, r9
 8003888:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800388c:	b004      	add	sp, #16
 800388e:	4770      	bx	lr
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003890:	69a2      	ldr	r2, [r4, #24]
 8003892:	4b03      	ldr	r3, [pc, #12]	; (80038a0 <USB_DevInit+0x18c>)
 8003894:	4313      	orrs	r3, r2
 8003896:	61a3      	str	r3, [r4, #24]
 8003898:	e7f5      	b.n	8003886 <USB_DevInit+0x172>
 800389a:	bf00      	nop
 800389c:	803c3800 	.word	0x803c3800
 80038a0:	40000004 	.word	0x40000004

080038a4 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80038a4:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80038a8:	f013 0306 	ands.w	r3, r3, #6
 80038ac:	d005      	beq.n	80038ba <USB_GetDevSpeed+0x16>
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80038ae:	2b06      	cmp	r3, #6
 80038b0:	bf18      	it	ne
 80038b2:	2b02      	cmpne	r3, #2
 80038b4:	d103      	bne.n	80038be <USB_GetDevSpeed+0x1a>
    speed = USBD_FS_SPEED;
 80038b6:	2002      	movs	r0, #2
 80038b8:	4770      	bx	lr
    speed = USBD_HS_SPEED;
 80038ba:	2000      	movs	r0, #0
 80038bc:	4770      	bx	lr
    speed = 0xFU;
 80038be:	200f      	movs	r0, #15
}
 80038c0:	4770      	bx	lr
	...

080038c4 <USB_ActivateEndpoint>:
{
 80038c4:	b470      	push	{r4, r5, r6}
  uint32_t epnum = (uint32_t)ep->num;
 80038c6:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 80038c8:	784b      	ldrb	r3, [r1, #1]
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d020      	beq.n	8003910 <USB_ActivateEndpoint+0x4c>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80038ce:	f8d0 381c 	ldr.w	r3, [r0, #2076]	; 0x81c
 80038d2:	f004 060f 	and.w	r6, r4, #15
 80038d6:	2201      	movs	r2, #1
 80038d8:	40b2      	lsls	r2, r6
 80038da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80038de:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80038e2:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 80038e6:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80038ea:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80038ee:	d10c      	bne.n	800390a <USB_ActivateEndpoint+0x46>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80038f0:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 80038f4:	688b      	ldr	r3, [r1, #8]
 80038f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80038fa:	78c9      	ldrb	r1, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80038fc:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 8003900:	4313      	orrs	r3, r2
 8003902:	4a13      	ldr	r2, [pc, #76]	; (8003950 <USB_ActivateEndpoint+0x8c>)
 8003904:	431a      	orrs	r2, r3
 8003906:	f8c0 2b00 	str.w	r2, [r0, #2816]	; 0xb00
}
 800390a:	2000      	movs	r0, #0
 800390c:	bc70      	pop	{r4, r5, r6}
 800390e:	4770      	bx	lr
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003910:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 8003914:	f004 060f 	and.w	r6, r4, #15
 8003918:	40b3      	lsls	r3, r6
 800391a:	b29b      	uxth	r3, r3
 800391c:	4313      	orrs	r3, r2
 800391e:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003922:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 8003926:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800392a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800392e:	d1ec      	bne.n	800390a <USB_ActivateEndpoint+0x46>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003930:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8003934:	688b      	ldr	r3, [r1, #8]
 8003936:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800393a:	78c9      	ldrb	r1, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800393c:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003940:	ea43 5484 	orr.w	r4, r3, r4, lsl #22
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003944:	4314      	orrs	r4, r2
 8003946:	4b02      	ldr	r3, [pc, #8]	; (8003950 <USB_ActivateEndpoint+0x8c>)
 8003948:	4323      	orrs	r3, r4
 800394a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 800394e:	e7dc      	b.n	800390a <USB_ActivateEndpoint+0x46>
 8003950:	10008000 	.word	0x10008000

08003954 <USB_DeactivateEndpoint>:
{
 8003954:	b430      	push	{r4, r5}
  uint32_t epnum = (uint32_t)ep->num;
 8003956:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8003958:	784a      	ldrb	r2, [r1, #1]
 800395a:	2a01      	cmp	r2, #1
 800395c:	d024      	beq.n	80039a8 <USB_DeactivateEndpoint+0x54>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800395e:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8003962:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8003966:	2a00      	cmp	r2, #0
 8003968:	db50      	blt.n	8003a0c <USB_DeactivateEndpoint+0xb8>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800396a:	f8d0 583c 	ldr.w	r5, [r0, #2108]	; 0x83c
 800396e:	780a      	ldrb	r2, [r1, #0]
 8003970:	f002 020f 	and.w	r2, r2, #15
 8003974:	2401      	movs	r4, #1
 8003976:	fa04 f202 	lsl.w	r2, r4, r2
 800397a:	ea25 4202 	bic.w	r2, r5, r2, lsl #16
 800397e:	f8c0 283c 	str.w	r2, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003982:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 8003986:	7809      	ldrb	r1, [r1, #0]
 8003988:	f001 010f 	and.w	r1, r1, #15
 800398c:	408c      	lsls	r4, r1
 800398e:	ea22 4404 	bic.w	r4, r2, r4, lsl #16
 8003992:	f8c0 481c 	str.w	r4, [r0, #2076]	; 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003996:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	; 0xb00
 800399a:	4a23      	ldr	r2, [pc, #140]	; (8003a28 <USB_DeactivateEndpoint+0xd4>)
 800399c:	400a      	ands	r2, r1
 800399e:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
}
 80039a2:	2000      	movs	r0, #0
 80039a4:	bc30      	pop	{r4, r5}
 80039a6:	4770      	bx	lr
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80039a8:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80039ac:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 80039b0:	2a00      	cmp	r2, #0
 80039b2:	db1e      	blt.n	80039f2 <USB_DeactivateEndpoint+0x9e>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80039b4:	f8d0 583c 	ldr.w	r5, [r0, #2108]	; 0x83c
 80039b8:	780a      	ldrb	r2, [r1, #0]
 80039ba:	f002 020f 	and.w	r2, r2, #15
 80039be:	2401      	movs	r4, #1
 80039c0:	fa04 f202 	lsl.w	r2, r4, r2
 80039c4:	b292      	uxth	r2, r2
 80039c6:	ea25 0202 	bic.w	r2, r5, r2
 80039ca:	f8c0 283c 	str.w	r2, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80039ce:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 80039d2:	7809      	ldrb	r1, [r1, #0]
 80039d4:	f001 010f 	and.w	r1, r1, #15
 80039d8:	408c      	lsls	r4, r1
 80039da:	b2a4      	uxth	r4, r4
 80039dc:	ea22 0404 	bic.w	r4, r2, r4
 80039e0:	f8c0 481c 	str.w	r4, [r0, #2076]	; 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80039e4:	f8d3 1900 	ldr.w	r1, [r3, #2304]	; 0x900
 80039e8:	4a10      	ldr	r2, [pc, #64]	; (8003a2c <USB_DeactivateEndpoint+0xd8>)
 80039ea:	400a      	ands	r2, r1
 80039ec:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 80039f0:	e7d7      	b.n	80039a2 <USB_DeactivateEndpoint+0x4e>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80039f2:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 80039f6:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80039fa:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80039fe:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8003a02:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003a06:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 8003a0a:	e7d3      	b.n	80039b4 <USB_DeactivateEndpoint+0x60>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003a0c:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8003a10:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8003a14:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003a18:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8003a1c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003a20:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 8003a24:	e7a1      	b.n	800396a <USB_DeactivateEndpoint+0x16>
 8003a26:	bf00      	nop
 8003a28:	eff37800 	.word	0xeff37800
 8003a2c:	ec337800 	.word	0xec337800

08003a30 <USB_EP0StartXfer>:
{
 8003a30:	b470      	push	{r4, r5, r6}
  uint32_t epnum = (uint32_t)ep->num;
 8003a32:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8003a34:	784c      	ldrb	r4, [r1, #1]
 8003a36:	2c01      	cmp	r4, #1
 8003a38:	d024      	beq.n	8003a84 <USB_EP0StartXfer+0x54>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003a3a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8003a3e:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8003a42:	691d      	ldr	r5, [r3, #16]
 8003a44:	4c3e      	ldr	r4, [pc, #248]	; (8003b40 <USB_EP0StartXfer+0x110>)
 8003a46:	402c      	ands	r4, r5
 8003a48:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003a4a:	691d      	ldr	r5, [r3, #16]
 8003a4c:	4c3d      	ldr	r4, [pc, #244]	; (8003b44 <USB_EP0StartXfer+0x114>)
 8003a4e:	402c      	ands	r4, r5
 8003a50:	611c      	str	r4, [r3, #16]
    if (ep->xfer_len > 0U)
 8003a52:	694c      	ldr	r4, [r1, #20]
 8003a54:	b10c      	cbz	r4, 8003a5a <USB_EP0StartXfer+0x2a>
      ep->xfer_len = ep->maxpacket;
 8003a56:	688c      	ldr	r4, [r1, #8]
 8003a58:	614c      	str	r4, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003a5a:	691c      	ldr	r4, [r3, #16]
 8003a5c:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8003a60:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8003a62:	691c      	ldr	r4, [r3, #16]
 8003a64:	688d      	ldr	r5, [r1, #8]
 8003a66:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8003a6a:	432c      	orrs	r4, r5
 8003a6c:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 8003a6e:	2a01      	cmp	r2, #1
 8003a70:	d061      	beq.n	8003b36 <USB_EP0StartXfer+0x106>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003a72:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8003a76:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003a7a:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8003a7e:	2000      	movs	r0, #0
 8003a80:	bc70      	pop	{r4, r5, r6}
 8003a82:	4770      	bx	lr
    if (ep->xfer_len == 0U)
 8003a84:	694c      	ldr	r4, [r1, #20]
 8003a86:	bb5c      	cbnz	r4, 8003ae0 <USB_EP0StartXfer+0xb0>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003a88:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8003a8c:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 8003a90:	4d2c      	ldr	r5, [pc, #176]	; (8003b44 <USB_EP0StartXfer+0x114>)
 8003a92:	4035      	ands	r5, r6
 8003a94:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003a98:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8003a9c:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8003aa0:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003aa4:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 8003aa8:	4d25      	ldr	r5, [pc, #148]	; (8003b40 <USB_EP0StartXfer+0x110>)
 8003aaa:	4035      	ands	r5, r6
 8003aac:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
    if (dma == 1U)
 8003ab0:	2a01      	cmp	r2, #1
 8003ab2:	d031      	beq.n	8003b18 <USB_EP0StartXfer+0xe8>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003ab4:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8003ab8:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8003abc:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8003ac0:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 8003ac4:	694b      	ldr	r3, [r1, #20]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d0d9      	beq.n	8003a7e <USB_EP0StartXfer+0x4e>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003aca:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 8003ace:	780a      	ldrb	r2, [r1, #0]
 8003ad0:	f002 010f 	and.w	r1, r2, #15
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	408a      	lsls	r2, r1
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 8003ade:	e7ce      	b.n	8003a7e <USB_EP0StartXfer+0x4e>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003ae0:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8003ae4:	f504 6410 	add.w	r4, r4, #2304	; 0x900
 8003ae8:	6926      	ldr	r6, [r4, #16]
 8003aea:	4d15      	ldr	r5, [pc, #84]	; (8003b40 <USB_EP0StartXfer+0x110>)
 8003aec:	4035      	ands	r5, r6
 8003aee:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003af0:	6926      	ldr	r6, [r4, #16]
 8003af2:	4d14      	ldr	r5, [pc, #80]	; (8003b44 <USB_EP0StartXfer+0x114>)
 8003af4:	4035      	ands	r5, r6
 8003af6:	6125      	str	r5, [r4, #16]
      if (ep->xfer_len > ep->maxpacket)
 8003af8:	694e      	ldr	r6, [r1, #20]
 8003afa:	688d      	ldr	r5, [r1, #8]
 8003afc:	42ae      	cmp	r6, r5
 8003afe:	d900      	bls.n	8003b02 <USB_EP0StartXfer+0xd2>
        ep->xfer_len = ep->maxpacket;
 8003b00:	614d      	str	r5, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003b02:	6925      	ldr	r5, [r4, #16]
 8003b04:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8003b08:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003b0a:	6925      	ldr	r5, [r4, #16]
 8003b0c:	694e      	ldr	r6, [r1, #20]
 8003b0e:	f3c6 0612 	ubfx	r6, r6, #0, #19
 8003b12:	4335      	orrs	r5, r6
 8003b14:	6125      	str	r5, [r4, #16]
 8003b16:	e7cb      	b.n	8003ab0 <USB_EP0StartXfer+0x80>
      if ((uint32_t)ep->dma_addr != 0U)
 8003b18:	690a      	ldr	r2, [r1, #16]
 8003b1a:	b11a      	cbz	r2, 8003b24 <USB_EP0StartXfer+0xf4>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003b1c:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 8003b20:	f8c1 2914 	str.w	r2, [r1, #2324]	; 0x914
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003b24:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8003b28:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8003b2c:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8003b30:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
 8003b34:	e7a3      	b.n	8003a7e <USB_EP0StartXfer+0x4e>
      if ((uint32_t)ep->xfer_buff != 0U)
 8003b36:	68ca      	ldr	r2, [r1, #12]
 8003b38:	2a00      	cmp	r2, #0
 8003b3a:	d09a      	beq.n	8003a72 <USB_EP0StartXfer+0x42>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003b3c:	615a      	str	r2, [r3, #20]
 8003b3e:	e798      	b.n	8003a72 <USB_EP0StartXfer+0x42>
 8003b40:	fff80000 	.word	0xfff80000
 8003b44:	e007ffff 	.word	0xe007ffff

08003b48 <USB_WritePacket>:
{
 8003b48:	b470      	push	{r4, r5, r6}
 8003b4a:	f89d 400c 	ldrb.w	r4, [sp, #12]
  if (dma == 0U)
 8003b4e:	b964      	cbnz	r4, 8003b6a <USB_WritePacket+0x22>
    count32b = ((uint32_t)len + 3U) / 4U;
 8003b50:	3303      	adds	r3, #3
 8003b52:	089d      	lsrs	r5, r3, #2
    for (i = 0U; i < count32b; i++)
 8003b54:	42ac      	cmp	r4, r5
 8003b56:	d208      	bcs.n	8003b6a <USB_WritePacket+0x22>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003b58:	eb00 3302 	add.w	r3, r0, r2, lsl #12
 8003b5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b60:	f851 6b04 	ldr.w	r6, [r1], #4
 8003b64:	601e      	str	r6, [r3, #0]
    for (i = 0U; i < count32b; i++)
 8003b66:	3401      	adds	r4, #1
 8003b68:	e7f4      	b.n	8003b54 <USB_WritePacket+0xc>
}
 8003b6a:	2000      	movs	r0, #0
 8003b6c:	bc70      	pop	{r4, r5, r6}
 8003b6e:	4770      	bx	lr

08003b70 <USB_EPStartXfer>:
{
 8003b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b72:	b083      	sub	sp, #12
  uint32_t epnum = (uint32_t)ep->num;
 8003b74:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8003b76:	784c      	ldrb	r4, [r1, #1]
 8003b78:	2c01      	cmp	r4, #1
 8003b7a:	d029      	beq.n	8003bd0 <USB_EPStartXfer+0x60>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003b7c:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8003b80:	f503 6430 	add.w	r4, r3, #2816	; 0xb00
 8003b84:	6926      	ldr	r6, [r4, #16]
 8003b86:	4d7c      	ldr	r5, [pc, #496]	; (8003d78 <USB_EPStartXfer+0x208>)
 8003b88:	4035      	ands	r5, r6
 8003b8a:	6125      	str	r5, [r4, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003b8c:	6926      	ldr	r6, [r4, #16]
 8003b8e:	4d7b      	ldr	r5, [pc, #492]	; (8003d7c <USB_EPStartXfer+0x20c>)
 8003b90:	4035      	ands	r5, r6
 8003b92:	6125      	str	r5, [r4, #16]
    if (ep->xfer_len == 0U)
 8003b94:	694d      	ldr	r5, [r1, #20]
 8003b96:	2d00      	cmp	r5, #0
 8003b98:	f040 80bf 	bne.w	8003d1a <USB_EPStartXfer+0x1aa>
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003b9c:	6925      	ldr	r5, [r4, #16]
 8003b9e:	688e      	ldr	r6, [r1, #8]
 8003ba0:	f3c6 0612 	ubfx	r6, r6, #0, #19
 8003ba4:	4335      	orrs	r5, r6
 8003ba6:	6125      	str	r5, [r4, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003ba8:	6925      	ldr	r5, [r4, #16]
 8003baa:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8003bae:	6125      	str	r5, [r4, #16]
    if (dma == 1U)
 8003bb0:	2a01      	cmp	r2, #1
 8003bb2:	f000 80c7 	beq.w	8003d44 <USB_EPStartXfer+0x1d4>
    if (ep->type == EP_TYPE_ISOC)
 8003bb6:	78ca      	ldrb	r2, [r1, #3]
 8003bb8:	2a01      	cmp	r2, #1
 8003bba:	f000 80c9 	beq.w	8003d50 <USB_EPStartXfer+0x1e0>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003bbe:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8003bc2:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8003bc6:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
}
 8003bca:	2000      	movs	r0, #0
 8003bcc:	b003      	add	sp, #12
 8003bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (ep->xfer_len == 0U)
 8003bd0:	694c      	ldr	r4, [r1, #20]
 8003bd2:	bb74      	cbnz	r4, 8003c32 <USB_EPStartXfer+0xc2>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003bd4:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8003bd8:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 8003bdc:	4d67      	ldr	r5, [pc, #412]	; (8003d7c <USB_EPStartXfer+0x20c>)
 8003bde:	4035      	ands	r5, r6
 8003be0:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003be4:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8003be8:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8003bec:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003bf0:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 8003bf4:	4d60      	ldr	r5, [pc, #384]	; (8003d78 <USB_EPStartXfer+0x208>)
 8003bf6:	4035      	ands	r5, r6
 8003bf8:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
    if (dma == 1U)
 8003bfc:	2a01      	cmp	r2, #1
 8003bfe:	d04a      	beq.n	8003c96 <USB_EPStartXfer+0x126>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003c00:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8003c04:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 8003c08:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8003c0c:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 8003c10:	78cc      	ldrb	r4, [r1, #3]
 8003c12:	2c01      	cmp	r4, #1
 8003c14:	d068      	beq.n	8003ce8 <USB_EPStartXfer+0x178>
        if (ep->xfer_len > 0U)
 8003c16:	694b      	ldr	r3, [r1, #20]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d0d6      	beq.n	8003bca <USB_EPStartXfer+0x5a>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003c1c:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 8003c20:	7809      	ldrb	r1, [r1, #0]
 8003c22:	f001 040f 	and.w	r4, r1, #15
 8003c26:	2101      	movs	r1, #1
 8003c28:	40a1      	lsls	r1, r4
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	f8c0 2834 	str.w	r2, [r0, #2100]	; 0x834
 8003c30:	e7cb      	b.n	8003bca <USB_EPStartXfer+0x5a>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003c32:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8003c36:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 8003c3a:	4d4f      	ldr	r5, [pc, #316]	; (8003d78 <USB_EPStartXfer+0x208>)
 8003c3c:	4035      	ands	r5, r6
 8003c3e:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003c42:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 8003c46:	4d4d      	ldr	r5, [pc, #308]	; (8003d7c <USB_EPStartXfer+0x20c>)
 8003c48:	4035      	ands	r5, r6
 8003c4a:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003c4e:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003c52:	694d      	ldr	r5, [r1, #20]
 8003c54:	688f      	ldr	r7, [r1, #8]
 8003c56:	443d      	add	r5, r7
 8003c58:	3d01      	subs	r5, #1
 8003c5a:	fbb5 f5f7 	udiv	r5, r5, r7
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003c5e:	4f48      	ldr	r7, [pc, #288]	; (8003d80 <USB_EPStartXfer+0x210>)
 8003c60:	ea07 45c5 	and.w	r5, r7, r5, lsl #19
 8003c64:	4335      	orrs	r5, r6
 8003c66:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003c6a:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8003c6e:	694e      	ldr	r6, [r1, #20]
 8003c70:	f3c6 0612 	ubfx	r6, r6, #0, #19
 8003c74:	4335      	orrs	r5, r6
 8003c76:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003c7a:	f504 6410 	add.w	r4, r4, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 8003c7e:	78cd      	ldrb	r5, [r1, #3]
 8003c80:	2d01      	cmp	r5, #1
 8003c82:	d1bb      	bne.n	8003bfc <USB_EPStartXfer+0x8c>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003c84:	6925      	ldr	r5, [r4, #16]
 8003c86:	f025 45c0 	bic.w	r5, r5, #1610612736	; 0x60000000
 8003c8a:	6125      	str	r5, [r4, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003c8c:	6925      	ldr	r5, [r4, #16]
 8003c8e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8003c92:	6125      	str	r5, [r4, #16]
 8003c94:	e7b2      	b.n	8003bfc <USB_EPStartXfer+0x8c>
      if ((uint32_t)ep->dma_addr != 0U)
 8003c96:	690a      	ldr	r2, [r1, #16]
 8003c98:	b11a      	cbz	r2, 8003ca2 <USB_EPStartXfer+0x132>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003c9a:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8003c9e:	f8c4 2914 	str.w	r2, [r4, #2324]	; 0x914
      if (ep->type == EP_TYPE_ISOC)
 8003ca2:	78ca      	ldrb	r2, [r1, #3]
 8003ca4:	2a01      	cmp	r2, #1
 8003ca6:	d008      	beq.n	8003cba <USB_EPStartXfer+0x14a>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003ca8:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8003cac:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8003cb0:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8003cb4:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 8003cb8:	e787      	b.n	8003bca <USB_EPStartXfer+0x5a>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003cba:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 8003cbe:	f412 7f80 	tst.w	r2, #256	; 0x100
 8003cc2:	d108      	bne.n	8003cd6 <USB_EPStartXfer+0x166>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003cc4:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 8003cc8:	f8d1 2900 	ldr.w	r2, [r1, #2304]	; 0x900
 8003ccc:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003cd0:	f8c1 2900 	str.w	r2, [r1, #2304]	; 0x900
 8003cd4:	e7e8      	b.n	8003ca8 <USB_EPStartXfer+0x138>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003cd6:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 8003cda:	f8d1 2900 	ldr.w	r2, [r1, #2304]	; 0x900
 8003cde:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003ce2:	f8c1 2900 	str.w	r2, [r1, #2304]	; 0x900
 8003ce6:	e7df      	b.n	8003ca8 <USB_EPStartXfer+0x138>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003ce8:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 8003cec:	f414 7f80 	tst.w	r4, #256	; 0x100
 8003cf0:	d10c      	bne.n	8003d0c <USB_EPStartXfer+0x19c>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003cf2:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 8003cf6:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 8003cfa:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003cfe:	9200      	str	r2, [sp, #0]
 8003d00:	8a8b      	ldrh	r3, [r1, #20]
 8003d02:	780a      	ldrb	r2, [r1, #0]
 8003d04:	68c9      	ldr	r1, [r1, #12]
 8003d06:	f7ff ff1f 	bl	8003b48 <USB_WritePacket>
 8003d0a:	e75e      	b.n	8003bca <USB_EPStartXfer+0x5a>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003d0c:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 8003d10:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 8003d14:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
 8003d18:	e7f1      	b.n	8003cfe <USB_EPStartXfer+0x18e>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003d1a:	688e      	ldr	r6, [r1, #8]
 8003d1c:	4435      	add	r5, r6
 8003d1e:	3d01      	subs	r5, #1
 8003d20:	fbb5 f5f6 	udiv	r5, r5, r6
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003d24:	6926      	ldr	r6, [r4, #16]
 8003d26:	4f16      	ldr	r7, [pc, #88]	; (8003d80 <USB_EPStartXfer+0x210>)
 8003d28:	ea07 47c5 	and.w	r7, r7, r5, lsl #19
 8003d2c:	433e      	orrs	r6, r7
 8003d2e:	6126      	str	r6, [r4, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8003d30:	6927      	ldr	r7, [r4, #16]
 8003d32:	688e      	ldr	r6, [r1, #8]
 8003d34:	b2ad      	uxth	r5, r5
 8003d36:	fb06 f505 	mul.w	r5, r6, r5
 8003d3a:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8003d3e:	433d      	orrs	r5, r7
 8003d40:	6125      	str	r5, [r4, #16]
 8003d42:	e735      	b.n	8003bb0 <USB_EPStartXfer+0x40>
      if ((uint32_t)ep->xfer_buff != 0U)
 8003d44:	68ca      	ldr	r2, [r1, #12]
 8003d46:	2a00      	cmp	r2, #0
 8003d48:	f43f af35 	beq.w	8003bb6 <USB_EPStartXfer+0x46>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003d4c:	6162      	str	r2, [r4, #20]
 8003d4e:	e732      	b.n	8003bb6 <USB_EPStartXfer+0x46>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003d50:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 8003d54:	f412 7f80 	tst.w	r2, #256	; 0x100
 8003d58:	d106      	bne.n	8003d68 <USB_EPStartXfer+0x1f8>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003d5a:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8003d5e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003d62:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 8003d66:	e72a      	b.n	8003bbe <USB_EPStartXfer+0x4e>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003d68:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8003d6c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003d70:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 8003d74:	e723      	b.n	8003bbe <USB_EPStartXfer+0x4e>
 8003d76:	bf00      	nop
 8003d78:	fff80000 	.word	0xfff80000
 8003d7c:	e007ffff 	.word	0xe007ffff
 8003d80:	1ff80000 	.word	0x1ff80000

08003d84 <USB_ReadPacket>:
{
 8003d84:	b4f0      	push	{r4, r5, r6, r7}
 8003d86:	b082      	sub	sp, #8
 8003d88:	4607      	mov	r7, r0
 8003d8a:	4608      	mov	r0, r1
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d8c:	463e      	mov	r6, r7
  uint32_t count32b = (uint32_t)len >> 2U;
 8003d8e:	0895      	lsrs	r5, r2, #2
  uint16_t remaining_bytes = len % 4U;
 8003d90:	f002 0203 	and.w	r2, r2, #3
  for (i = 0U; i < count32b; i++)
 8003d94:	2300      	movs	r3, #0
 8003d96:	42ab      	cmp	r3, r5
 8003d98:	d206      	bcs.n	8003da8 <USB_ReadPacket+0x24>
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003d9a:	f506 5480 	add.w	r4, r6, #4096	; 0x1000
 8003d9e:	6824      	ldr	r4, [r4, #0]
 8003da0:	f840 4b04 	str.w	r4, [r0], #4
  for (i = 0U; i < count32b; i++)
 8003da4:	3301      	adds	r3, #1
 8003da6:	e7f6      	b.n	8003d96 <USB_ReadPacket+0x12>
  if (remaining_bytes != 0U)
 8003da8:	b17a      	cbz	r2, 8003dca <USB_ReadPacket+0x46>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003daa:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	9301      	str	r3, [sp, #4]
    i = 0U;
 8003db2:	2500      	movs	r5, #0
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003db4:	b2eb      	uxtb	r3, r5
 8003db6:	00dc      	lsls	r4, r3, #3
 8003db8:	9b01      	ldr	r3, [sp, #4]
 8003dba:	40e3      	lsrs	r3, r4
 8003dbc:	f800 3b01 	strb.w	r3, [r0], #1
      i++;
 8003dc0:	3501      	adds	r5, #1
      remaining_bytes--;
 8003dc2:	3a01      	subs	r2, #1
 8003dc4:	b292      	uxth	r2, r2
    } while (remaining_bytes != 0U);
 8003dc6:	2a00      	cmp	r2, #0
 8003dc8:	d1f4      	bne.n	8003db4 <USB_ReadPacket+0x30>
}
 8003dca:	b002      	add	sp, #8
 8003dcc:	bcf0      	pop	{r4, r5, r6, r7}
 8003dce:	4770      	bx	lr

08003dd0 <USB_EPSetStall>:
  uint32_t epnum = (uint32_t)ep->num;
 8003dd0:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8003dd2:	784a      	ldrb	r2, [r1, #1]
 8003dd4:	2a01      	cmp	r2, #1
 8003dd6:	d014      	beq.n	8003e02 <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003dd8:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8003ddc:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8003de0:	2a00      	cmp	r2, #0
 8003de2:	db06      	blt.n	8003df2 <USB_EPSetStall+0x22>
 8003de4:	b12b      	cbz	r3, 8003df2 <USB_EPSetStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003de6:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8003dea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003dee:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003df2:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8003df6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003dfa:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8003dfe:	2000      	movs	r0, #0
 8003e00:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003e02:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8003e06:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8003e0a:	2a00      	cmp	r2, #0
 8003e0c:	db06      	blt.n	8003e1c <USB_EPSetStall+0x4c>
 8003e0e:	b12b      	cbz	r3, 8003e1c <USB_EPSetStall+0x4c>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003e10:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8003e14:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003e18:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003e1c:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8003e20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e24:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 8003e28:	e7e9      	b.n	8003dfe <USB_EPSetStall+0x2e>

08003e2a <USB_EPClearStall>:
  uint32_t epnum = (uint32_t)ep->num;
 8003e2a:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8003e2c:	784a      	ldrb	r2, [r1, #1]
 8003e2e:	2a01      	cmp	r2, #1
 8003e30:	d00e      	beq.n	8003e50 <USB_EPClearStall+0x26>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003e32:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8003e36:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8003e3a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003e3e:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003e42:	78cb      	ldrb	r3, [r1, #3]
 8003e44:	3b02      	subs	r3, #2
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d915      	bls.n	8003e78 <USB_EPClearStall+0x4e>
}
 8003e4c:	2000      	movs	r0, #0
 8003e4e:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003e50:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8003e54:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8003e58:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003e5c:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003e60:	78cb      	ldrb	r3, [r1, #3]
 8003e62:	3b02      	subs	r3, #2
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d8f0      	bhi.n	8003e4c <USB_EPClearStall+0x22>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003e6a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8003e6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e72:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 8003e76:	e7e9      	b.n	8003e4c <USB_EPClearStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003e78:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8003e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e80:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8003e84:	e7e2      	b.n	8003e4c <USB_EPClearStall+0x22>

08003e86 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003e86:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8003e8a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003e8e:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8003e92:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8003e96:	0109      	lsls	r1, r1, #4
 8003e98:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 8003e9c:	4319      	orrs	r1, r3
 8003e9e:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8003ea2:	2000      	movs	r0, #0
 8003ea4:	4770      	bx	lr

08003ea6 <USB_DevConnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003ea6:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 8003eaa:	f023 0303 	bic.w	r3, r3, #3
 8003eae:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8003eb2:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8003eb6:	f023 0302 	bic.w	r3, r3, #2
 8003eba:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 8003ebe:	2000      	movs	r0, #0
 8003ec0:	4770      	bx	lr

08003ec2 <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003ec2:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 8003ec6:	f023 0303 	bic.w	r3, r3, #3
 8003eca:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003ece:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8003ed2:	f043 0302 	orr.w	r3, r3, #2
 8003ed6:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 8003eda:	2000      	movs	r0, #0
 8003edc:	4770      	bx	lr

08003ede <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8003ede:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8003ee0:	6980      	ldr	r0, [r0, #24]
}
 8003ee2:	4010      	ands	r0, r2
 8003ee4:	4770      	bx	lr

08003ee6 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8003ee6:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8003eea:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003eee:	69c0      	ldr	r0, [r0, #28]
 8003ef0:	4018      	ands	r0, r3
}
 8003ef2:	0c00      	lsrs	r0, r0, #16
 8003ef4:	4770      	bx	lr

08003ef6 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8003ef6:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8003efa:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003efe:	69c0      	ldr	r0, [r0, #28]
 8003f00:	4018      	ands	r0, r3
}
 8003f02:	b280      	uxth	r0, r0
 8003f04:	4770      	bx	lr

08003f06 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8003f06:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8003f0a:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8003f0e:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8003f12:	6940      	ldr	r0, [r0, #20]
}
 8003f14:	4010      	ands	r0, r2
 8003f16:	4770      	bx	lr

08003f18 <USB_ReadDevInEPInterrupt>:
{
 8003f18:	b410      	push	{r4}
  msk = USBx_DEVICE->DIEPMSK;
 8003f1a:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8003f1e:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8003f22:	f001 020f 	and.w	r2, r1, #15
 8003f26:	40d3      	lsrs	r3, r2
 8003f28:	01db      	lsls	r3, r3, #7
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	4323      	orrs	r3, r4
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8003f2e:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 8003f32:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 8003f36:	6880      	ldr	r0, [r0, #8]
}
 8003f38:	4018      	ands	r0, r3
 8003f3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8003f40:	6940      	ldr	r0, [r0, #20]
}
 8003f42:	f000 0001 	and.w	r0, r0, #1
 8003f46:	4770      	bx	lr

08003f48 <USB_SetCurrentMode>:
{
 8003f48:	b538      	push	{r3, r4, r5, lr}
 8003f4a:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003f4c:	68c3      	ldr	r3, [r0, #12]
 8003f4e:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003f52:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8003f54:	2901      	cmp	r1, #1
 8003f56:	d013      	beq.n	8003f80 <USB_SetCurrentMode+0x38>
  else if (mode == USB_DEVICE_MODE)
 8003f58:	bb19      	cbnz	r1, 8003fa2 <USB_SetCurrentMode+0x5a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003f5a:	68c3      	ldr	r3, [r0, #12]
 8003f5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003f60:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8003f62:	2400      	movs	r4, #0
      HAL_Delay(1U);
 8003f64:	2001      	movs	r0, #1
 8003f66:	f7fd fbf9 	bl	800175c <HAL_Delay>
      ms++;
 8003f6a:	3401      	adds	r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003f6c:	4628      	mov	r0, r5
 8003f6e:	f7ff ffe7 	bl	8003f40 <USB_GetMode>
 8003f72:	b108      	cbz	r0, 8003f78 <USB_SetCurrentMode+0x30>
 8003f74:	2c31      	cmp	r4, #49	; 0x31
 8003f76:	d9f5      	bls.n	8003f64 <USB_SetCurrentMode+0x1c>
  if (ms == 50U)
 8003f78:	2c32      	cmp	r4, #50	; 0x32
 8003f7a:	d014      	beq.n	8003fa6 <USB_SetCurrentMode+0x5e>
  return HAL_OK;
 8003f7c:	2000      	movs	r0, #0
}
 8003f7e:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003f80:	68c3      	ldr	r3, [r0, #12]
 8003f82:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003f86:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8003f88:	2400      	movs	r4, #0
      HAL_Delay(1U);
 8003f8a:	2001      	movs	r0, #1
 8003f8c:	f7fd fbe6 	bl	800175c <HAL_Delay>
      ms++;
 8003f90:	3401      	adds	r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003f92:	4628      	mov	r0, r5
 8003f94:	f7ff ffd4 	bl	8003f40 <USB_GetMode>
 8003f98:	2801      	cmp	r0, #1
 8003f9a:	d0ed      	beq.n	8003f78 <USB_SetCurrentMode+0x30>
 8003f9c:	2c31      	cmp	r4, #49	; 0x31
 8003f9e:	d9f4      	bls.n	8003f8a <USB_SetCurrentMode+0x42>
 8003fa0:	e7ea      	b.n	8003f78 <USB_SetCurrentMode+0x30>
    return HAL_ERROR;
 8003fa2:	2001      	movs	r0, #1
 8003fa4:	e7eb      	b.n	8003f7e <USB_SetCurrentMode+0x36>
    return HAL_ERROR;
 8003fa6:	2001      	movs	r0, #1
 8003fa8:	e7e9      	b.n	8003f7e <USB_SetCurrentMode+0x36>
	...

08003fac <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8003fac:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8003fb0:	4b05      	ldr	r3, [pc, #20]	; (8003fc8 <USB_ActivateSetup+0x1c>)
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8003fb8:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8003fbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fc0:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 8003fc4:	2000      	movs	r0, #0
 8003fc6:	4770      	bx	lr
 8003fc8:	fffff800 	.word	0xfffff800

08003fcc <USB_EP0_OutStart>:
{
 8003fcc:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003fce:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8003fd0:	4b15      	ldr	r3, [pc, #84]	; (8004028 <USB_EP0_OutStart+0x5c>)
 8003fd2:	429c      	cmp	r4, r3
 8003fd4:	d903      	bls.n	8003fde <USB_EP0_OutStart+0x12>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003fd6:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	db16      	blt.n	800400c <USB_EP0_OutStart+0x40>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8003fde:	2400      	movs	r4, #0
 8003fe0:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003fe4:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8003fe8:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8003fec:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8003ff0:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8003ff4:	f044 0418 	orr.w	r4, r4, #24
 8003ff8:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8003ffc:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8004000:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 8004004:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  if (dma == 1U)
 8004008:	2901      	cmp	r1, #1
 800400a:	d003      	beq.n	8004014 <USB_EP0_OutStart+0x48>
}
 800400c:	2000      	movs	r0, #0
 800400e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004012:	4770      	bx	lr
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004014:	f8c0 2b14 	str.w	r2, [r0, #2836]	; 0xb14
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004018:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800401c:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004020:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8004024:	e7f2      	b.n	800400c <USB_EP0_OutStart+0x40>
 8004026:	bf00      	nop
 8004028:	4f54300a 	.word	0x4f54300a

0800402c <USBD_AUDIO_GetCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_GetCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_AUDIO_CfgDesc);
 800402c:	23c9      	movs	r3, #201	; 0xc9
 800402e:	8003      	strh	r3, [r0, #0]

  return USBD_AUDIO_CfgDesc;
}
 8004030:	4800      	ldr	r0, [pc, #0]	; (8004034 <USBD_AUDIO_GetCfgDesc+0x8>)
 8004032:	4770      	bx	lr
 8004034:	24000050 	.word	0x24000050

08004038 <USBD_AUDIO_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004038:	b510      	push	{r4, lr}
	USBD_AUDIO_HandleTypeDef* haudio = pdev->pClassData;
 800403a:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
	USBD_AUDIO_ItfTypeDef* itf = pdev->pUserData;
 800403e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0

	switch (haudio->control.unit)
 8004042:	f893 2262 	ldrb.w	r2, [r3, #610]	; 0x262
 8004046:	2a02      	cmp	r2, #2
 8004048:	d03a      	beq.n	80040c0 <USBD_AUDIO_EP0_RxReady+0x88>
 800404a:	2a04      	cmp	r2, #4
 800404c:	d152      	bne.n	80040f4 <USBD_AUDIO_EP0_RxReady+0xbc>
	{
	case CLOCK_SOURCE_ID:
		if (haudio->control.cmd == CS_SAM_FREQ_CONTROL)
 800404e:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 8004052:	2a01      	cmp	r2, #1
 8004054:	d150      	bne.n	80040f8 <USBD_AUDIO_EP0_RxReady+0xc0>
		{
			haudio->sam_freq = *(uint32_t*)haudio->control.data;
 8004056:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800405a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			uint32_t packetSize = (haudio->sam_freq % 48000U == 0) ?
					(haudio->sam_freq / 1000U) :
					(haudio->sam_freq / 147U * 160U / 1000U);

			uint32_t multiplier;
			if (haudio->sam_freq % 44100U) {
 800405e:	4927      	ldr	r1, [pc, #156]	; (80040fc <USBD_AUDIO_EP0_RxReady+0xc4>)
 8004060:	fba1 4102 	umull	r4, r1, r1, r2
 8004064:	0bc9      	lsrs	r1, r1, #15
 8004066:	f64a 4444 	movw	r4, #44100	; 0xac44
 800406a:	fb04 2111 	mls	r1, r4, r1, r2
 800406e:	b1b9      	cbz	r1, 80040a0 <USBD_AUDIO_EP0_RxReady+0x68>
					multiplier = haudio->sam_freq / 48000U;
 8004070:	4923      	ldr	r1, [pc, #140]	; (8004100 <USBD_AUDIO_EP0_RxReady+0xc8>)
 8004072:	fba1 1202 	umull	r1, r2, r1, r2
 8004076:	0a92      	lsrs	r2, r2, #10
					haudio->feedback_base = multiplier * AUDIO_48K_FEEDBACK_VALUE;
 8004078:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 800407c:	0449      	lsls	r1, r1, #17
 800407e:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
					haudio->feedback_base_mult = multiplier;
 8004082:	ee07 2a90 	vmov	s15, r2
 8004086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800408a:	edc3 7aa0 	vstr	s15, [r3, #640]	; 0x280
				multiplier = haudio->sam_freq / 44100U;
				haudio->feedback_base = multiplier * AUDIO_44K1_FEEDBACK_VALUE;
				haudio->feedback_base_mult = multiplier;
			}

			itf->AudioCmd(haudio->control.data, haudio->control.len, AUDIO_CMD_FREQ);
 800408e:	6884      	ldr	r4, [r0, #8]
 8004090:	2202      	movs	r2, #2
 8004092:	f893 1261 	ldrb.w	r1, [r3, #609]	; 0x261
 8004096:	f503 7008 	add.w	r0, r3, #544	; 0x220
 800409a:	47a0      	blx	r4

	default:
		return USBD_FAIL;
		break;
	}
  return USBD_OK;
 800409c:	2000      	movs	r0, #0
		break;
 800409e:	e02a      	b.n	80040f6 <USBD_AUDIO_EP0_RxReady+0xbe>
				multiplier = haudio->sam_freq / 44100U;
 80040a0:	4916      	ldr	r1, [pc, #88]	; (80040fc <USBD_AUDIO_EP0_RxReady+0xc4>)
 80040a2:	fba1 1202 	umull	r1, r2, r1, r2
 80040a6:	0bd2      	lsrs	r2, r2, #15
				haudio->feedback_base = multiplier * AUDIO_44K1_FEEDBACK_VALUE;
 80040a8:	4916      	ldr	r1, [pc, #88]	; (8004104 <USBD_AUDIO_EP0_RxReady+0xcc>)
 80040aa:	fb01 f102 	mul.w	r1, r1, r2
 80040ae:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
				haudio->feedback_base_mult = multiplier;
 80040b2:	ee07 2a90 	vmov	s15, r2
 80040b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040ba:	edc3 7aa0 	vstr	s15, [r3, #640]	; 0x280
 80040be:	e7e6      	b.n	800408e <USBD_AUDIO_EP0_RxReady+0x56>
		switch (haudio->control.cmd)
 80040c0:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 80040c4:	2a01      	cmp	r2, #1
 80040c6:	d003      	beq.n	80040d0 <USBD_AUDIO_EP0_RxReady+0x98>
 80040c8:	2a02      	cmp	r2, #2
 80040ca:	d00a      	beq.n	80040e2 <USBD_AUDIO_EP0_RxReady+0xaa>
 80040cc:	2003      	movs	r0, #3
 80040ce:	e012      	b.n	80040f6 <USBD_AUDIO_EP0_RxReady+0xbe>
			itf->AudioCmd(haudio->control.data, haudio->control.len, AUDIO_CMD_MUTE);
 80040d0:	6884      	ldr	r4, [r0, #8]
 80040d2:	2203      	movs	r2, #3
 80040d4:	f893 1261 	ldrb.w	r1, [r3, #609]	; 0x261
 80040d8:	f503 7008 	add.w	r0, r3, #544	; 0x220
 80040dc:	47a0      	blx	r4
  return USBD_OK;
 80040de:	2000      	movs	r0, #0
			break;
 80040e0:	e009      	b.n	80040f6 <USBD_AUDIO_EP0_RxReady+0xbe>
			itf->AudioCmd(haudio->control.data, haudio->control.len, AUDIO_CMD_VOLUME);
 80040e2:	6884      	ldr	r4, [r0, #8]
 80040e4:	2204      	movs	r2, #4
 80040e6:	f893 1261 	ldrb.w	r1, [r3, #609]	; 0x261
 80040ea:	f503 7008 	add.w	r0, r3, #544	; 0x220
 80040ee:	47a0      	blx	r4
  return USBD_OK;
 80040f0:	2000      	movs	r0, #0
			break;
 80040f2:	e000      	b.n	80040f6 <USBD_AUDIO_EP0_RxReady+0xbe>
	switch (haudio->control.unit)
 80040f4:	2003      	movs	r0, #3
}
 80040f6:	bd10      	pop	{r4, pc}
			return USBD_FAIL;
 80040f8:	2003      	movs	r0, #3
 80040fa:	e7fc      	b.n	80040f6 <USBD_AUDIO_EP0_RxReady+0xbe>
 80040fc:	be37c63b 	.word	0xbe37c63b
 8004100:	057619f1 	.word	0x057619f1
 8004104:	00058333 	.word	0x00058333

08004108 <USBD_AUDIO_EP0_TxReady>:
{
  UNUSED(pdev);

  /* Only OUT control data are processed */
  return (uint8_t)USBD_OK;
}
 8004108:	2000      	movs	r0, #0
 800410a:	4770      	bx	lr

0800410c <USBD_AUDIO_GetDeviceQualifierDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_GetDeviceQualifierDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_AUDIO_DeviceQualifierDesc);
 800410c:	230a      	movs	r3, #10
 800410e:	8003      	strh	r3, [r0, #0]

  return USBD_AUDIO_DeviceQualifierDesc;
}
 8004110:	4800      	ldr	r0, [pc, #0]	; (8004114 <USBD_AUDIO_GetDeviceQualifierDesc+0x8>)
 8004112:	4770      	bx	lr
 8004114:	2400011c 	.word	0x2400011c

08004118 <USBD_AUDIO_IsoOutIncomplete>:
{
 8004118:	b508      	push	{r3, lr}
	  incomplete_packet[pcnt_pos] += 1;
 800411a:	4b07      	ldr	r3, [pc, #28]	; (8004138 <USBD_AUDIO_IsoOutIncomplete+0x20>)
 800411c:	881a      	ldrh	r2, [r3, #0]
 800411e:	4907      	ldr	r1, [pc, #28]	; (800413c <USBD_AUDIO_IsoOutIncomplete+0x24>)
 8004120:	5c8b      	ldrb	r3, [r1, r2]
 8004122:	3301      	adds	r3, #1
 8004124:	548b      	strb	r3, [r1, r2]
	  (void)USBD_LL_PrepareReceive(pdev, STREAMING_EP_NUM, (uint8_t*)&haudio->packet_buffer, USB_HS_MAX_PACKET_SIZE);
 8004126:	f44f 7300 	mov.w	r3, #512	; 0x200
 800412a:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 800412e:	2101      	movs	r1, #1
 8004130:	f001 fab6 	bl	80056a0 <USBD_LL_PrepareReceive>
}
 8004134:	2000      	movs	r0, #0
 8004136:	bd08      	pop	{r3, pc}
 8004138:	240001e2 	.word	0x240001e2
 800413c:	24002ca0 	.word	0x24002ca0

08004140 <USBD_AUDIO_IsoINIncomplete>:
	USBD_AUDIO_HandleTypeDef* haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 8004140:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
	if (epnum == FEEDBACK_EP_NUM)
 8004144:	2901      	cmp	r1, #1
 8004146:	d001      	beq.n	800414c <USBD_AUDIO_IsoINIncomplete+0xc>
}
 8004148:	2000      	movs	r0, #0
 800414a:	4770      	bx	lr
{
 800414c:	b508      	push	{r3, lr}
		USBD_LL_Transmit(pdev, FEEDBACK_EP_ADDR, (uint8_t*)&haudio->feedback_value, FEEDBACK_PACKET_SIZE);
 800414e:	2304      	movs	r3, #4
 8004150:	f502 7202 	add.w	r2, r2, #520	; 0x208
 8004154:	2181      	movs	r1, #129	; 0x81
 8004156:	f001 fa9b 	bl	8005690 <USBD_LL_Transmit>
}
 800415a:	2000      	movs	r0, #0
 800415c:	bd08      	pop	{r3, pc}
	...

08004160 <USBD_AUDIO_DataIn>:
	USBD_AUDIO_HandleTypeDef* haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 8004160:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
	if (epnum == FEEDBACK_EP_NUM)
 8004164:	2901      	cmp	r1, #1
 8004166:	d001      	beq.n	800416c <USBD_AUDIO_DataIn+0xc>
}
 8004168:	2000      	movs	r0, #0
 800416a:	4770      	bx	lr
{
 800416c:	b508      	push	{r3, lr}
		float sf = sai_feedback;
 800416e:	4b07      	ldr	r3, [pc, #28]	; (800418c <USBD_AUDIO_DataIn+0x2c>)
 8004170:	681b      	ldr	r3, [r3, #0]
		haudio->feedback_value = haudio->feedback_base/* + sf */;
 8004172:	f8d2 3204 	ldr.w	r3, [r2, #516]	; 0x204
 8004176:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208
		USBD_LL_Transmit(pdev, FEEDBACK_EP_ADDR, (uint8_t*)&haudio->feedback_value, FEEDBACK_PACKET_SIZE);
 800417a:	2304      	movs	r3, #4
 800417c:	f502 7202 	add.w	r2, r2, #520	; 0x208
 8004180:	2181      	movs	r1, #129	; 0x81
 8004182:	f001 fa85 	bl	8005690 <USBD_LL_Transmit>
}
 8004186:	2000      	movs	r0, #0
 8004188:	bd08      	pop	{r3, pc}
 800418a:	bf00      	nop
 800418c:	240001c4 	.word	0x240001c4

08004190 <USBD_AUDIO_SOF>:
{
 8004190:	b570      	push	{r4, r5, r6, lr}
 8004192:	4606      	mov	r6, r0
  USBD_AUDIO_HandleTypeDef* haudio = pdev->pClassData;
 8004194:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc
  USBD_AUDIO_ItfTypeDef* itf = pdev->pUserData;
 8004198:	f8d0 52c0 	ldr.w	r5, [r0, #704]	; 0x2c0
  haudio->feedback_base = usb_fb_value() * haudio->feedback_base_mult;
 800419c:	f7fd f91e 	bl	80013dc <usb_fb_value>
 80041a0:	ee07 0a90 	vmov	s15, r0
 80041a4:	ed94 7aa0 	vldr	s14, [r4, #640]	; 0x280
 80041a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80041b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041b4:	edc4 7a81 	vstr	s15, [r4, #516]	; 0x204
  if (first_counter < 100) {
 80041b8:	4b2c      	ldr	r3, [pc, #176]	; (800426c <USBD_AUDIO_SOF+0xdc>)
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	2b63      	cmp	r3, #99	; 0x63
 80041be:	d928      	bls.n	8004212 <USBD_AUDIO_SOF+0x82>
  if(pcnt_pos < 299) {pcnt_pos += 1;}
 80041c0:	4b2b      	ldr	r3, [pc, #172]	; (8004270 <USBD_AUDIO_SOF+0xe0>)
 80041c2:	881b      	ldrh	r3, [r3, #0]
 80041c4:	f5b3 7f95 	cmp.w	r3, #298	; 0x12a
 80041c8:	d82f      	bhi.n	800422a <USBD_AUDIO_SOF+0x9a>
 80041ca:	3301      	adds	r3, #1
 80041cc:	4a28      	ldr	r2, [pc, #160]	; (8004270 <USBD_AUDIO_SOF+0xe0>)
 80041ce:	8013      	strh	r3, [r2, #0]
  if(haudio->skipped_packets >= 1) {
 80041d0:	f8d4 2290 	ldr.w	r2, [r4, #656]	; 0x290
 80041d4:	b11a      	cbz	r2, 80041de <USBD_AUDIO_SOF+0x4e>
	  errors += 1;
 80041d6:	4927      	ldr	r1, [pc, #156]	; (8004274 <USBD_AUDIO_SOF+0xe4>)
 80041d8:	680b      	ldr	r3, [r1, #0]
 80041da:	3301      	adds	r3, #1
 80041dc:	600b      	str	r3, [r1, #0]
  if(haudio->state == AUDIO_STATE_PLAYING) {
 80041de:	f894 328c 	ldrb.w	r3, [r4, #652]	; 0x28c
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d032      	beq.n	800424c <USBD_AUDIO_SOF+0xbc>
	if(haudio->skipped_packets >= MAX_SKIPPED_PACKETS && haudio->state == AUDIO_STATE_PLAYING) {
 80041e6:	f8d4 2290 	ldr.w	r2, [r4, #656]	; 0x290
 80041ea:	2a04      	cmp	r2, #4
 80041ec:	d901      	bls.n	80041f2 <USBD_AUDIO_SOF+0x62>
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d030      	beq.n	8004254 <USBD_AUDIO_SOF+0xc4>
	} else if (haudio->played_packets >= PACKETS_PLAY_SHIFT && haudio->state == AUDIO_STATE_STOPPED) {
 80041f2:	f8d4 2294 	ldr.w	r2, [r4, #660]	; 0x294
 80041f6:	b152      	cbz	r2, 800420e <USBD_AUDIO_SOF+0x7e>
 80041f8:	b94b      	cbnz	r3, 800420e <USBD_AUDIO_SOF+0x7e>
		haudio->state = AUDIO_STATE_PLAYING;
 80041fa:	2301      	movs	r3, #1
 80041fc:	f884 328c 	strb.w	r3, [r4, #652]	; 0x28c
		haudio->played_packets = 0;
 8004200:	2000      	movs	r0, #0
 8004202:	f8c4 0294 	str.w	r0, [r4, #660]	; 0x294
		itf->AudioCmd(0, 0, AUDIO_CMD_PLAY);
 8004206:	68ab      	ldr	r3, [r5, #8]
 8004208:	4602      	mov	r2, r0
 800420a:	4601      	mov	r1, r0
 800420c:	4798      	blx	r3
}
 800420e:	2000      	movs	r0, #0
 8004210:	bd70      	pop	{r4, r5, r6, pc}
	  USBD_LL_Transmit(pdev, FEEDBACK_EP_ADDR, (uint8_t*)&haudio->feedback_value, FEEDBACK_PACKET_SIZE);
 8004212:	2304      	movs	r3, #4
 8004214:	f504 7202 	add.w	r2, r4, #520	; 0x208
 8004218:	2181      	movs	r1, #129	; 0x81
 800421a:	4630      	mov	r0, r6
 800421c:	f001 fa38 	bl	8005690 <USBD_LL_Transmit>
	  first_counter++;
 8004220:	4a12      	ldr	r2, [pc, #72]	; (800426c <USBD_AUDIO_SOF+0xdc>)
 8004222:	7813      	ldrb	r3, [r2, #0]
 8004224:	3301      	adds	r3, #1
 8004226:	7013      	strb	r3, [r2, #0]
 8004228:	e7ca      	b.n	80041c0 <USBD_AUDIO_SOF+0x30>
	  for(uint16_t i = 0; i < 300; i++) {
 800422a:	2300      	movs	r3, #0
 800422c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8004230:	d208      	bcs.n	8004244 <USBD_AUDIO_SOF+0xb4>
 		  incomplete_packet[i] = 0;
 8004232:	2200      	movs	r2, #0
 8004234:	4910      	ldr	r1, [pc, #64]	; (8004278 <USBD_AUDIO_SOF+0xe8>)
 8004236:	54ca      	strb	r2, [r1, r3]
		  pcnt[i] = 0;
 8004238:	4910      	ldr	r1, [pc, #64]	; (800427c <USBD_AUDIO_SOF+0xec>)
 800423a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	  for(uint16_t i = 0; i < 300; i++) {
 800423e:	3301      	adds	r3, #1
 8004240:	b29b      	uxth	r3, r3
 8004242:	e7f3      	b.n	800422c <USBD_AUDIO_SOF+0x9c>
	  pcnt_pos = 0;
 8004244:	4b0a      	ldr	r3, [pc, #40]	; (8004270 <USBD_AUDIO_SOF+0xe0>)
 8004246:	2200      	movs	r2, #0
 8004248:	801a      	strh	r2, [r3, #0]
 800424a:	e7c1      	b.n	80041d0 <USBD_AUDIO_SOF+0x40>
	  haudio->skipped_packets++;
 800424c:	3201      	adds	r2, #1
 800424e:	f8c4 2290 	str.w	r2, [r4, #656]	; 0x290
 8004252:	e7c8      	b.n	80041e6 <USBD_AUDIO_SOF+0x56>
		haudio->state = AUDIO_STATE_STOPPED;
 8004254:	2000      	movs	r0, #0
 8004256:	f884 028c 	strb.w	r0, [r4, #652]	; 0x28c
		haudio->played_packets = 0;
 800425a:	f8c4 0294 	str.w	r0, [r4, #660]	; 0x294
		haudio->skipped_packets = 0;
 800425e:	f8c4 0290 	str.w	r0, [r4, #656]	; 0x290
		itf->AudioCmd(0, 0, AUDIO_CMD_STOP);
 8004262:	68ab      	ldr	r3, [r5, #8]
 8004264:	2201      	movs	r2, #1
 8004266:	4601      	mov	r1, r0
 8004268:	4798      	blx	r3
 800426a:	e7d0      	b.n	800420e <USBD_AUDIO_SOF+0x7e>
 800426c:	240001e0 	.word	0x240001e0
 8004270:	240001e2 	.word	0x240001e2
 8004274:	240001dc 	.word	0x240001dc
 8004278:	24002ca0 	.word	0x24002ca0
 800427c:	24002dcc 	.word	0x24002dcc

08004280 <USBD_AUDIO_DataOut>:
{
 8004280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	GPIOB->BSRR |= GPIO_BSRR_BS3;
 8004284:	4a38      	ldr	r2, [pc, #224]	; (8004368 <USBD_AUDIO_DataOut+0xe8>)
 8004286:	6993      	ldr	r3, [r2, #24]
 8004288:	f043 0308 	orr.w	r3, r3, #8
 800428c:	6193      	str	r3, [r2, #24]
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 800428e:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  if (haudio == NULL)
 8004292:	2d00      	cmp	r5, #0
 8004294:	d066      	beq.n	8004364 <USBD_AUDIO_DataOut+0xe4>
 8004296:	4604      	mov	r4, r0
  if (epnum == STREAMING_EP_NUM)
 8004298:	2901      	cmp	r1, #1
 800429a:	d007      	beq.n	80042ac <USBD_AUDIO_DataOut+0x2c>
  GPIOB->BSRR |= GPIO_BSRR_BR3;
 800429c:	4a32      	ldr	r2, [pc, #200]	; (8004368 <USBD_AUDIO_DataOut+0xe8>)
 800429e:	6993      	ldr	r3, [r2, #24]
 80042a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80042a4:	6193      	str	r3, [r2, #24]
  return (uint8_t)USBD_OK;
 80042a6:	2000      	movs	r0, #0
}
 80042a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	PacketSize = (uint16_t)USBD_LL_GetRxDataSize(pdev, epnum);
 80042ac:	f001 f9a5 	bl	80055fa <USBD_LL_GetRxDataSize>
 80042b0:	4606      	mov	r6, r0
 80042b2:	fa1f f880 	uxth.w	r8, r0
	(void)USBD_LL_PrepareReceive(pdev, STREAMING_EP_NUM, (uint8_t*)&(haudio->packet_buffer), USB_HS_MAX_PACKET_SIZE);
 80042b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80042ba:	462a      	mov	r2, r5
 80042bc:	2101      	movs	r1, #1
 80042be:	4620      	mov	r0, r4
 80042c0:	f001 f9ee 	bl	80056a0 <USBD_LL_PrepareReceive>
	pcnt[pcnt_pos] += PacketSize;
 80042c4:	4b29      	ldr	r3, [pc, #164]	; (800436c <USBD_AUDIO_DataOut+0xec>)
 80042c6:	8819      	ldrh	r1, [r3, #0]
 80042c8:	4a29      	ldr	r2, [pc, #164]	; (8004370 <USBD_AUDIO_DataOut+0xf0>)
 80042ca:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
 80042ce:	4443      	add	r3, r8
 80042d0:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
	haudio->skipped_packets = 0;
 80042d4:	2300      	movs	r3, #0
 80042d6:	f8c5 3290 	str.w	r3, [r5, #656]	; 0x290
	if(haudio->state == AUDIO_STATE_STOPPED && PacketSize != 0) {haudio->played_packets += 1;}
 80042da:	f895 328c 	ldrb.w	r3, [r5, #652]	; 0x28c
 80042de:	b93b      	cbnz	r3, 80042f0 <USBD_AUDIO_DataOut+0x70>
 80042e0:	f1b8 0f00 	cmp.w	r8, #0
 80042e4:	d004      	beq.n	80042f0 <USBD_AUDIO_DataOut+0x70>
 80042e6:	f8d5 3294 	ldr.w	r3, [r5, #660]	; 0x294
 80042ea:	3301      	adds	r3, #1
 80042ec:	f8c5 3294 	str.w	r3, [r5, #660]	; 0x294
	if(sai_wrpos + PacketSize / 4 <= BUFFER_SIZE) {
 80042f0:	ea4f 0798 	mov.w	r7, r8, lsr #2
 80042f4:	4b1f      	ldr	r3, [pc, #124]	; (8004374 <USBD_AUDIO_DataOut+0xf4>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	eb03 0898 	add.w	r8, r3, r8, lsr #2
 80042fc:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
 8004300:	d81a      	bhi.n	8004338 <USBD_AUDIO_DataOut+0xb8>
		memcpy(&(_sai_outBuf[sai_wrpos]), haudio->packet_buffer, PacketSize);
 8004302:	4b1c      	ldr	r3, [pc, #112]	; (8004374 <USBD_AUDIO_DataOut+0xf4>)
 8004304:	6818      	ldr	r0, [r3, #0]
 8004306:	b2b2      	uxth	r2, r6
 8004308:	4629      	mov	r1, r5
 800430a:	4b1b      	ldr	r3, [pc, #108]	; (8004378 <USBD_AUDIO_DataOut+0xf8>)
 800430c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004310:	f001 f9f2 	bl	80056f8 <memcpy>
	sai_wrpos += PacketSize / 4;
 8004314:	4b17      	ldr	r3, [pc, #92]	; (8004374 <USBD_AUDIO_DataOut+0xf4>)
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	4417      	add	r7, r2
 800431a:	601f      	str	r7, [r3, #0]
	if(sai_wrpos >= BUFFER_SIZE) {sai_wrpos -= BUFFER_SIZE; sai_laps_difference -= 1;}
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004322:	d3bb      	bcc.n	800429c <USBD_AUDIO_DataOut+0x1c>
 8004324:	4a13      	ldr	r2, [pc, #76]	; (8004374 <USBD_AUDIO_DataOut+0xf4>)
 8004326:	6813      	ldr	r3, [r2, #0]
 8004328:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800432c:	6013      	str	r3, [r2, #0]
 800432e:	4a13      	ldr	r2, [pc, #76]	; (800437c <USBD_AUDIO_DataOut+0xfc>)
 8004330:	6813      	ldr	r3, [r2, #0]
 8004332:	3b01      	subs	r3, #1
 8004334:	6013      	str	r3, [r2, #0]
 8004336:	e7b1      	b.n	800429c <USBD_AUDIO_DataOut+0x1c>
		uint8_t cpy = BUFFER_SIZE - sai_wrpos;
 8004338:	4b0e      	ldr	r3, [pc, #56]	; (8004374 <USBD_AUDIO_DataOut+0xf4>)
 800433a:	681c      	ldr	r4, [r3, #0]
 800433c:	b2e4      	uxtb	r4, r4
 800433e:	4264      	negs	r4, r4
 8004340:	b2e4      	uxtb	r4, r4
		memcpy(&(_sai_outBuf[sai_wrpos]), haudio->packet_buffer, cpy * 4);
 8004342:	6818      	ldr	r0, [r3, #0]
 8004344:	f8df 8030 	ldr.w	r8, [pc, #48]	; 8004378 <USBD_AUDIO_DataOut+0xf8>
 8004348:	00a4      	lsls	r4, r4, #2
 800434a:	4622      	mov	r2, r4
 800434c:	4629      	mov	r1, r5
 800434e:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8004352:	f001 f9d1 	bl	80056f8 <memcpy>
		memcpy(&(_sai_outBuf[0]), haudio->packet_buffer + cpy, PacketSize - cpy * 4);
 8004356:	b2b2      	uxth	r2, r6
 8004358:	1b12      	subs	r2, r2, r4
 800435a:	1929      	adds	r1, r5, r4
 800435c:	4640      	mov	r0, r8
 800435e:	f001 f9cb 	bl	80056f8 <memcpy>
 8004362:	e7d7      	b.n	8004314 <USBD_AUDIO_DataOut+0x94>
    return (uint8_t)USBD_FAIL;
 8004364:	2003      	movs	r0, #3
 8004366:	e79f      	b.n	80042a8 <USBD_AUDIO_DataOut+0x28>
 8004368:	58020400 	.word	0x58020400
 800436c:	240001e2 	.word	0x240001e2
 8004370:	24002dcc 	.word	0x24002dcc
 8004374:	240001d4 	.word	0x240001d4
 8004378:	24000200 	.word	0x24000200
 800437c:	240001cc 	.word	0x240001cc

08004380 <AUDIO_REQ_GetCurrent>:
{
 8004380:	b570      	push	{r4, r5, r6, lr}
  USBD_AUDIO_HandleTypeDef* haudio = pdev->pClassData;
 8004382:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  if (haudio == NULL)
 8004386:	b1cd      	cbz	r5, 80043bc <AUDIO_REQ_GetCurrent+0x3c>
 8004388:	4604      	mov	r4, r0
 800438a:	460e      	mov	r6, r1
  USBD_memset(haudio->control.data, 0, USB_MAX_EP0_SIZE);
 800438c:	f505 7508 	add.w	r5, r5, #544	; 0x220
 8004390:	2240      	movs	r2, #64	; 0x40
 8004392:	2100      	movs	r1, #0
 8004394:	4628      	mov	r0, r5
 8004396:	f001 f9bd 	bl	8005714 <memset>
  switch (HIBYTE(req->wIndex))
 800439a:	88b3      	ldrh	r3, [r6, #4]
 800439c:	0a1b      	lsrs	r3, r3, #8
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d004      	beq.n	80043ac <AUDIO_REQ_GetCurrent+0x2c>
 80043a2:	d30c      	bcc.n	80043be <AUDIO_REQ_GetCurrent+0x3e>
 80043a4:	3b04      	subs	r3, #4
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d808      	bhi.n	80043be <AUDIO_REQ_GetCurrent+0x3e>
  USBD_CtlSendData(pdev, haudio->control.data, MIN(req->wLength, USB_MAX_EP0_SIZE));
 80043ac:	88f2      	ldrh	r2, [r6, #6]
 80043ae:	2a40      	cmp	r2, #64	; 0x40
 80043b0:	bf28      	it	cs
 80043b2:	2240      	movcs	r2, #64	; 0x40
 80043b4:	4629      	mov	r1, r5
 80043b6:	4620      	mov	r0, r4
 80043b8:	f000 fe9d 	bl	80050f6 <USBD_CtlSendData>
}
 80043bc:	bd70      	pop	{r4, r5, r6, pc}
  	USBD_CtlError(pdev, req);
 80043be:	4631      	mov	r1, r6
 80043c0:	4620      	mov	r0, r4
 80043c2:	f000 fb59 	bl	8004a78 <USBD_CtlError>
  	break;
 80043c6:	e7f1      	b.n	80043ac <AUDIO_REQ_GetCurrent+0x2c>

080043c8 <AUDIO_REQ_GetRange>:
{
 80043c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	USBD_AUDIO_HandleTypeDef* haudio = pdev->pClassData;
 80043ca:	f8d0 62bc 	ldr.w	r6, [r0, #700]	; 0x2bc
	if (haudio == NULL)
 80043ce:	b366      	cbz	r6, 800442a <AUDIO_REQ_GetRange+0x62>
 80043d0:	4605      	mov	r5, r0
 80043d2:	460c      	mov	r4, r1
	USBD_memset(haudio->control.data, 0, USB_MAX_EP0_SIZE);
 80043d4:	f506 7708 	add.w	r7, r6, #544	; 0x220
 80043d8:	2240      	movs	r2, #64	; 0x40
 80043da:	2100      	movs	r1, #0
 80043dc:	4638      	mov	r0, r7
 80043de:	f001 f999 	bl	8005714 <memset>
	switch (HIBYTE(req->wIndex))
 80043e2:	88a3      	ldrh	r3, [r4, #4]
 80043e4:	0a1b      	lsrs	r3, r3, #8
 80043e6:	2b04      	cmp	r3, #4
 80043e8:	d008      	beq.n	80043fc <AUDIO_REQ_GetRange+0x34>
 80043ea:	2b05      	cmp	r3, #5
 80043ec:	d023      	beq.n	8004436 <AUDIO_REQ_GetRange+0x6e>
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d036      	beq.n	8004460 <AUDIO_REQ_GetRange+0x98>
		USBD_CtlError(pdev, req);
 80043f2:	4621      	mov	r1, r4
 80043f4:	4628      	mov	r0, r5
 80043f6:	f000 fb3f 	bl	8004a78 <USBD_CtlError>
		return;
 80043fa:	e016      	b.n	800442a <AUDIO_REQ_GetRange+0x62>
		if (HIBYTE(req->wValue) == CS_SAM_FREQ_CONTROL)
 80043fc:	8863      	ldrh	r3, [r4, #2]
 80043fe:	0a1b      	lsrs	r3, r3, #8
 8004400:	2b01      	cmp	r3, #1
 8004402:	d113      	bne.n	800442c <AUDIO_REQ_GetRange+0x64>
			PACK_DATA(pbuf, uint16_t, 1U);
 8004404:	f8a6 3220 	strh.w	r3, [r6, #544]	; 0x220
			PACK_DATA(pbuf, uint32_t, AUDIO_MIN_FREQ);
 8004408:	f64a 4244 	movw	r2, #44100	; 0xac44
 800440c:	f8c6 2222 	str.w	r2, [r6, #546]	; 0x222
			PACK_DATA(pbuf, uint32_t, AUDIO_MAX_FREQ);
 8004410:	4a1e      	ldr	r2, [pc, #120]	; (800448c <AUDIO_REQ_GetRange+0xc4>)
 8004412:	f8c6 2226 	str.w	r2, [r6, #550]	; 0x226
			PACK_DATA(pbuf, uint32_t, AUDIO_FREQ_RES);
 8004416:	f8c6 322a 	str.w	r3, [r6, #554]	; 0x22a
	USBD_CtlSendData(pdev, haudio->control.data, MIN(req->wLength, USB_MAX_EP0_SIZE));
 800441a:	88e2      	ldrh	r2, [r4, #6]
 800441c:	2a40      	cmp	r2, #64	; 0x40
 800441e:	bf28      	it	cs
 8004420:	2240      	movcs	r2, #64	; 0x40
 8004422:	4639      	mov	r1, r7
 8004424:	4628      	mov	r0, r5
 8004426:	f000 fe66 	bl	80050f6 <USBD_CtlSendData>
}
 800442a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			USBD_CtlError(pdev, req);
 800442c:	4621      	mov	r1, r4
 800442e:	4628      	mov	r0, r5
 8004430:	f000 fb22 	bl	8004a78 <USBD_CtlError>
			return;
 8004434:	e7f9      	b.n	800442a <AUDIO_REQ_GetRange+0x62>
		if (HIBYTE(req->wValue) == CS_SAM_FREQ_CONTROL)
 8004436:	8863      	ldrh	r3, [r4, #2]
 8004438:	0a1b      	lsrs	r3, r3, #8
 800443a:	2b01      	cmp	r3, #1
 800443c:	d10b      	bne.n	8004456 <AUDIO_REQ_GetRange+0x8e>
			PACK_DATA(pbuf, uint16_t, 1U);
 800443e:	f8a6 3220 	strh.w	r3, [r6, #544]	; 0x220
			PACK_DATA(pbuf, uint32_t, AUDIO_MIN_FREQ);
 8004442:	f64a 4244 	movw	r2, #44100	; 0xac44
 8004446:	f8c6 2222 	str.w	r2, [r6, #546]	; 0x222
			PACK_DATA(pbuf, uint32_t, AUDIO_MAX_FREQ);
 800444a:	4a10      	ldr	r2, [pc, #64]	; (800448c <AUDIO_REQ_GetRange+0xc4>)
 800444c:	f8c6 2226 	str.w	r2, [r6, #550]	; 0x226
			PACK_DATA(pbuf, uint32_t, AUDIO_FREQ_RES);
 8004450:	f8c6 322a 	str.w	r3, [r6, #554]	; 0x22a
		break;
 8004454:	e7e1      	b.n	800441a <AUDIO_REQ_GetRange+0x52>
			USBD_CtlError(pdev, req);
 8004456:	4621      	mov	r1, r4
 8004458:	4628      	mov	r0, r5
 800445a:	f000 fb0d 	bl	8004a78 <USBD_CtlError>
			return;
 800445e:	e7e4      	b.n	800442a <AUDIO_REQ_GetRange+0x62>
		if (HIBYTE(req->wValue) == FU_VOLUME_CONTROL)
 8004460:	8863      	ldrh	r3, [r4, #2]
 8004462:	0a1b      	lsrs	r3, r3, #8
 8004464:	2b02      	cmp	r3, #2
 8004466:	d10b      	bne.n	8004480 <AUDIO_REQ_GetRange+0xb8>
			PACK_DATA(pbuf, uint16_t, 1U);
 8004468:	2301      	movs	r3, #1
 800446a:	f8a6 3220 	strh.w	r3, [r6, #544]	; 0x220
			PACK_DATA(pbuf, uint16_t, AUDIO_MIN_VOL);
 800446e:	2200      	movs	r2, #0
 8004470:	f8a6 2222 	strh.w	r2, [r6, #546]	; 0x222
			PACK_DATA(pbuf, uint16_t, AUDIO_MAX_VOL);
 8004474:	2264      	movs	r2, #100	; 0x64
 8004476:	f8a6 2224 	strh.w	r2, [r6, #548]	; 0x224
			PACK_DATA(pbuf, uint16_t, AUDIO_VOL_RES);
 800447a:	f8a6 3226 	strh.w	r3, [r6, #550]	; 0x226
		break;
 800447e:	e7cc      	b.n	800441a <AUDIO_REQ_GetRange+0x52>
			USBD_CtlError(pdev, req);
 8004480:	4621      	mov	r1, r4
 8004482:	4628      	mov	r0, r5
 8004484:	f000 faf8 	bl	8004a78 <USBD_CtlError>
			return;
 8004488:	e7cf      	b.n	800442a <AUDIO_REQ_GetRange+0x62>
 800448a:	bf00      	nop
 800448c:	00017700 	.word	0x00017700

08004490 <AUDIO_REQ_SetCurrent>:
{
 8004490:	b508      	push	{r3, lr}
  USBD_AUDIO_HandleTypeDef* haudio = pdev->pClassData;
 8004492:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
  if (haudio == NULL)
 8004496:	b19b      	cbz	r3, 80044c0 <AUDIO_REQ_SetCurrent+0x30>
  if (req->wLength != 0U)
 8004498:	88ca      	ldrh	r2, [r1, #6]
 800449a:	b18a      	cbz	r2, 80044c0 <AUDIO_REQ_SetCurrent+0x30>
  	haudio->control.cmd = HIBYTE(req->wValue);
 800449c:	884a      	ldrh	r2, [r1, #2]
 800449e:	0a12      	lsrs	r2, r2, #8
 80044a0:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  	haudio->control.len = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80044a4:	88ca      	ldrh	r2, [r1, #6]
 80044a6:	2a3f      	cmp	r2, #63	; 0x3f
 80044a8:	d80b      	bhi.n	80044c2 <AUDIO_REQ_SetCurrent+0x32>
 80044aa:	b2d2      	uxtb	r2, r2
 80044ac:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  	haudio->control.unit = HIBYTE(req->wIndex);
 80044b0:	8889      	ldrh	r1, [r1, #4]
 80044b2:	0a09      	lsrs	r1, r1, #8
 80044b4:	f883 1262 	strb.w	r1, [r3, #610]	; 0x262
  	USBD_CtlPrepareRx(pdev, haudio->control.data, haudio->control.len);
 80044b8:	f503 7108 	add.w	r1, r3, #544	; 0x220
 80044bc:	f000 fe30 	bl	8005120 <USBD_CtlPrepareRx>
}
 80044c0:	bd08      	pop	{r3, pc}
  	haudio->control.len = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80044c2:	2240      	movs	r2, #64	; 0x40
 80044c4:	e7f2      	b.n	80044ac <AUDIO_REQ_SetCurrent+0x1c>

080044c6 <USBD_AUDIO_GetAudioHeaderDesc>:
  if (desc->wTotalLength > desc->bLength)
 80044c6:	8842      	ldrh	r2, [r0, #2]
 80044c8:	7803      	ldrb	r3, [r0, #0]
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d917      	bls.n	80044fe <USBD_AUDIO_GetAudioHeaderDesc+0x38>
{
 80044ce:	b510      	push	{r4, lr}
 80044d0:	b082      	sub	sp, #8
 80044d2:	4604      	mov	r4, r0
    ptr = desc->bLength;
 80044d4:	f8ad 3006 	strh.w	r3, [sp, #6]
    while (ptr < desc->wTotalLength)
 80044d8:	8862      	ldrh	r2, [r4, #2]
 80044da:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80044de:	429a      	cmp	r2, r3
 80044e0:	d90a      	bls.n	80044f8 <USBD_AUDIO_GetAudioHeaderDesc+0x32>
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80044e2:	f10d 0106 	add.w	r1, sp, #6
 80044e6:	f000 fa99 	bl	8004a1c <USBD_GetNextDesc>
      if ((pdesc->bDescriptorType == CS_INTERFACE) &&
 80044ea:	7843      	ldrb	r3, [r0, #1]
 80044ec:	2b24      	cmp	r3, #36	; 0x24
 80044ee:	d1f3      	bne.n	80044d8 <USBD_AUDIO_GetAudioHeaderDesc+0x12>
          (pdesc->bDescriptorSubType == HEADER))
 80044f0:	7883      	ldrb	r3, [r0, #2]
      if ((pdesc->bDescriptorType == CS_INTERFACE) &&
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d1f0      	bne.n	80044d8 <USBD_AUDIO_GetAudioHeaderDesc+0x12>
 80044f6:	e000      	b.n	80044fa <USBD_AUDIO_GetAudioHeaderDesc+0x34>
  uint8_t *pAudioDesc =  NULL;
 80044f8:	2000      	movs	r0, #0
}
 80044fa:	b002      	add	sp, #8
 80044fc:	bd10      	pop	{r4, pc}
  uint8_t *pAudioDesc =  NULL;
 80044fe:	2000      	movs	r0, #0
}
 8004500:	4770      	bx	lr
	...

08004504 <USBD_AUDIO_Setup>:
{
 8004504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004506:	b083      	sub	sp, #12
 8004508:	4606      	mov	r6, r0
 800450a:	460c      	mov	r4, r1
	  USBD_AUDIO_HandleTypeDef* haudio = pdev->pClassData;
 800450c:	f8d0 12bc 	ldr.w	r1, [r0, #700]	; 0x2bc
	  uint16_t status_info = 0U;
 8004510:	2300      	movs	r3, #0
 8004512:	f8ad 3006 	strh.w	r3, [sp, #6]
	  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004516:	7823      	ldrb	r3, [r4, #0]
 8004518:	f013 0560 	ands.w	r5, r3, #96	; 0x60
 800451c:	d025      	beq.n	800456a <USBD_AUDIO_Setup+0x66>
 800451e:	2d20      	cmp	r5, #32
 8004520:	d106      	bne.n	8004530 <USBD_AUDIO_Setup+0x2c>
	    	switch ((req->bRequest) & 0x7F)
 8004522:	7862      	ldrb	r2, [r4, #1]
 8004524:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004528:	2a01      	cmp	r2, #1
 800452a:	d009      	beq.n	8004540 <USBD_AUDIO_Setup+0x3c>
 800452c:	2a02      	cmp	r2, #2
 800452e:	d014      	beq.n	800455a <USBD_AUDIO_Setup+0x56>
	  	USBD_CtlError(pdev, req);
 8004530:	4621      	mov	r1, r4
 8004532:	4630      	mov	r0, r6
 8004534:	f000 faa0 	bl	8004a78 <USBD_CtlError>
	    return USBD_FAIL;
 8004538:	2503      	movs	r5, #3
}
 800453a:	4628      	mov	r0, r5
 800453c:	b003      	add	sp, #12
 800453e:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if (req->bmRequest & 0x80)
 8004540:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004544:	d104      	bne.n	8004550 <USBD_AUDIO_Setup+0x4c>
							AUDIO_REQ_SetCurrent(pdev, req);
 8004546:	4621      	mov	r1, r4
 8004548:	f7ff ffa2 	bl	8004490 <AUDIO_REQ_SetCurrent>
	  return USBD_OK;
 800454c:	2500      	movs	r5, #0
 800454e:	e7f4      	b.n	800453a <USBD_AUDIO_Setup+0x36>
							AUDIO_REQ_GetCurrent(pdev, req);
 8004550:	4621      	mov	r1, r4
 8004552:	f7ff ff15 	bl	8004380 <AUDIO_REQ_GetCurrent>
	  return USBD_OK;
 8004556:	2500      	movs	r5, #0
 8004558:	e7ef      	b.n	800453a <USBD_AUDIO_Setup+0x36>
						if (req->bmRequest & 0x80)
 800455a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800455e:	d0e7      	beq.n	8004530 <USBD_AUDIO_Setup+0x2c>
							AUDIO_REQ_GetRange(pdev, req);
 8004560:	4621      	mov	r1, r4
 8004562:	f7ff ff31 	bl	80043c8 <AUDIO_REQ_GetRange>
	  return USBD_OK;
 8004566:	2500      	movs	r5, #0
						break;
 8004568:	e7e7      	b.n	800453a <USBD_AUDIO_Setup+0x36>
	      switch ((req->bRequest) & 0x7F)
 800456a:	7867      	ldrb	r7, [r4, #1]
 800456c:	f007 077f 	and.w	r7, r7, #127	; 0x7f
 8004570:	2f0b      	cmp	r7, #11
 8004572:	d8dd      	bhi.n	8004530 <USBD_AUDIO_Setup+0x2c>
 8004574:	a301      	add	r3, pc, #4	; (adr r3, 800457c <USBD_AUDIO_Setup+0x78>)
 8004576:	f853 f027 	ldr.w	pc, [r3, r7, lsl #2]
 800457a:	bf00      	nop
 800457c:	080045ad 	.word	0x080045ad
 8004580:	0800453b 	.word	0x0800453b
 8004584:	08004531 	.word	0x08004531
 8004588:	08004531 	.word	0x08004531
 800458c:	08004531 	.word	0x08004531
 8004590:	08004531 	.word	0x08004531
 8004594:	080045c5 	.word	0x080045c5
 8004598:	08004531 	.word	0x08004531
 800459c:	08004531 	.word	0x08004531
 80045a0:	08004531 	.word	0x08004531
 80045a4:	080045eb 	.word	0x080045eb
 80045a8:	08004601 	.word	0x08004601
	          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80045ac:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	2b03      	cmp	r3, #3
 80045b4:	d1bc      	bne.n	8004530 <USBD_AUDIO_Setup+0x2c>
	            USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80045b6:	2202      	movs	r2, #2
 80045b8:	f10d 0106 	add.w	r1, sp, #6
 80045bc:	f000 fd9b 	bl	80050f6 <USBD_CtlSendData>
	  return USBD_OK;
 80045c0:	463d      	mov	r5, r7
	          break;
 80045c2:	e7ba      	b.n	800453a <USBD_AUDIO_Setup+0x36>
	          if (HIBYTE(req->wValue) == CS_DEVICE)
 80045c4:	8863      	ldrh	r3, [r4, #2]
 80045c6:	0a1b      	lsrs	r3, r3, #8
 80045c8:	2b21      	cmp	r3, #33	; 0x21
 80045ca:	d1b6      	bne.n	800453a <USBD_AUDIO_Setup+0x36>
	          	pbuf = (uint8_t *)USBD_AUDIO_GetAudioHeaderDesc(pdev->pConfDesc);
 80045cc:	f8d0 02cc 	ldr.w	r0, [r0, #716]	; 0x2cc
 80045d0:	f7ff ff79 	bl	80044c6 <USBD_AUDIO_GetAudioHeaderDesc>
	            if (pbuf != NULL)
 80045d4:	4601      	mov	r1, r0
 80045d6:	2800      	cmp	r0, #0
 80045d8:	d0aa      	beq.n	8004530 <USBD_AUDIO_Setup+0x2c>
	              len = MIN(USB_AUDIO_DESC_SIZE, req->wLength);
 80045da:	88e2      	ldrh	r2, [r4, #6]
	              USBD_CtlSendData(pdev, pbuf, len);
 80045dc:	2a09      	cmp	r2, #9
 80045de:	bf28      	it	cs
 80045e0:	2209      	movcs	r2, #9
 80045e2:	4630      	mov	r0, r6
 80045e4:	f000 fd87 	bl	80050f6 <USBD_CtlSendData>
 80045e8:	e7a7      	b.n	800453a <USBD_AUDIO_Setup+0x36>
	          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80045ea:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	2b03      	cmp	r3, #3
 80045f2:	d19d      	bne.n	8004530 <USBD_AUDIO_Setup+0x2c>
	            USBD_CtlSendData(pdev, (uint8_t *)&haudio->alt_setting, 1U);
 80045f4:	2201      	movs	r2, #1
 80045f6:	f501 7122 	add.w	r1, r1, #648	; 0x288
 80045fa:	f000 fd7c 	bl	80050f6 <USBD_CtlSendData>
	          break;
 80045fe:	e79c      	b.n	800453a <USBD_AUDIO_Setup+0x36>
	          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004600:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004604:	b2db      	uxtb	r3, r3
 8004606:	2b03      	cmp	r3, #3
 8004608:	d192      	bne.n	8004530 <USBD_AUDIO_Setup+0x2c>
	            if ((uint8_t)(req->wValue) <= USBD_MAX_NUM_INTERFACES)
 800460a:	78a3      	ldrb	r3, [r4, #2]
 800460c:	2b03      	cmp	r3, #3
 800460e:	d88f      	bhi.n	8004530 <USBD_AUDIO_Setup+0x2c>
	              haudio->alt_setting = (uint8_t)(req->wValue);
 8004610:	f8c1 3288 	str.w	r3, [r1, #648]	; 0x288
	              haudio->bit_depth = (haudio->alt_setting == 1) ? 32U : 24U;
 8004614:	2b01      	cmp	r3, #1
 8004616:	d003      	beq.n	8004620 <USBD_AUDIO_Setup+0x11c>
 8004618:	2318      	movs	r3, #24
 800461a:	f881 3284 	strb.w	r3, [r1, #644]	; 0x284
 800461e:	e78c      	b.n	800453a <USBD_AUDIO_Setup+0x36>
 8004620:	2320      	movs	r3, #32
 8004622:	e7fa      	b.n	800461a <USBD_AUDIO_Setup+0x116>

08004624 <USBD_AUDIO_DeInit>:
{
 8004624:	b510      	push	{r4, lr}
 8004626:	4604      	mov	r4, r0
  (void)USBD_LL_CloseEP(pdev, STREAMING_EP_NUM);
 8004628:	2101      	movs	r1, #1
 800462a:	f001 f809 	bl	8005640 <USBD_LL_CloseEP>
  pdev->ep_out[STREAMING_EP_NUM].is_used = 0U;
 800462e:	2300      	movs	r3, #0
 8004630:	f8a4 3178 	strh.w	r3, [r4, #376]	; 0x178
  pdev->ep_out[STREAMING_EP_NUM].bInterval = 0U;
 8004634:	f8a4 317a 	strh.w	r3, [r4, #378]	; 0x17a
  pdev->ep_in[FEEDBACK_EP_NUM].is_used = 0U;
 8004638:	8723      	strh	r3, [r4, #56]	; 0x38
  pdev->ep_in[FEEDBACK_EP_NUM].bInterval = 0U;
 800463a:	8763      	strh	r3, [r4, #58]	; 0x3a
  if (pdev->pClassData != NULL)
 800463c:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8004640:	b123      	cbz	r3, 800464c <USBD_AUDIO_DeInit+0x28>
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->DeInit(0U);
 8004642:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	2000      	movs	r0, #0
 800464a:	4798      	blx	r3
}
 800464c:	2000      	movs	r0, #0
 800464e:	bd10      	pop	{r4, pc}

08004650 <USBD_AUDIO_Init>:
{
 8004650:	b570      	push	{r4, r5, r6, lr}
 8004652:	4604      	mov	r4, r0
  pdev->pClassData = (void *)haudio;
 8004654:	4d1f      	ldr	r5, [pc, #124]	; (80046d4 <USBD_AUDIO_Init+0x84>)
 8004656:	f8c0 52bc 	str.w	r5, [r0, #700]	; 0x2bc
   pdev->ep_out[STREAMING_EP_NUM].bInterval = STREAMING_HS_BINTERVAL;
 800465a:	2601      	movs	r6, #1
 800465c:	f8a0 617a 	strh.w	r6, [r0, #378]	; 0x17a
  (void)USBD_LL_OpenEP(pdev, STREAMING_EP_ADDR, USBD_EP_TYPE_ISOC, USB_HS_MAX_PACKET_SIZE);
 8004660:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004664:	4632      	mov	r2, r6
 8004666:	4631      	mov	r1, r6
 8004668:	f000 ffdf 	bl	800562a <USBD_LL_OpenEP>
  (void)USBD_LL_OpenEP(pdev, FEEDBACK_EP_ADDR, USBD_EP_TYPE_ISOC, FEEDBACK_PACKET_SIZE);
 800466c:	2304      	movs	r3, #4
 800466e:	4632      	mov	r2, r6
 8004670:	2181      	movs	r1, #129	; 0x81
 8004672:	4620      	mov	r0, r4
 8004674:	f000 ffd9 	bl	800562a <USBD_LL_OpenEP>
  pdev->ep_out[STREAMING_EP_NUM].is_used = 1U;
 8004678:	f8a4 6178 	strh.w	r6, [r4, #376]	; 0x178
  pdev->ep_in[FEEDBACK_EP_NUM].is_used = 1U;
 800467c:	8726      	strh	r6, [r4, #56]	; 0x38
  USBD_LL_FlushEP(pdev, STREAMING_EP_ADDR);
 800467e:	4631      	mov	r1, r6
 8004680:	4620      	mov	r0, r4
 8004682:	f000 ffe5 	bl	8005650 <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev, FEEDBACK_EP_ADDR);
 8004686:	2181      	movs	r1, #129	; 0x81
 8004688:	4620      	mov	r0, r4
 800468a:	f000 ffe1 	bl	8005650 <USBD_LL_FlushEP>
  haudio->alt_setting = 0U;
 800468e:	2300      	movs	r3, #0
 8004690:	f8c5 3288 	str.w	r3, [r5, #648]	; 0x288
  haudio->sam_freq=48000;
 8004694:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8004698:	f8c5 2200 	str.w	r2, [r5, #512]	; 0x200
  haudio->feedback_base = 0x60000;
 800469c:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 80046a0:	f8c5 2204 	str.w	r2, [r5, #516]	; 0x204
  haudio->feedback_value = 0x60000;
 80046a4:	f8c5 2208 	str.w	r2, [r5, #520]	; 0x208
  haudio->feedback_base_mult = 1;
 80046a8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80046ac:	f8c5 2280 	str.w	r2, [r5, #640]	; 0x280
  haudio->state = AUDIO_STATE_STOPPED;
 80046b0:	f885 328c 	strb.w	r3, [r5, #652]	; 0x28c
  if (((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->Init() != 0U)
 80046b4:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4798      	blx	r3
 80046bc:	b940      	cbnz	r0, 80046d0 <USBD_AUDIO_Init+0x80>
  (void)USBD_LL_PrepareReceive(pdev, STREAMING_EP_ADDR, (uint8_t*)haudio->packet_buffer, USB_HS_MAX_PACKET_SIZE);
 80046be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046c2:	462a      	mov	r2, r5
 80046c4:	4631      	mov	r1, r6
 80046c6:	4620      	mov	r0, r4
 80046c8:	f000 ffea 	bl	80056a0 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 80046cc:	2000      	movs	r0, #0
}
 80046ce:	bd70      	pop	{r4, r5, r6, pc}
    return (uint8_t)USBD_FAIL;
 80046d0:	2003      	movs	r0, #3
 80046d2:	e7fc      	b.n	80046ce <USBD_AUDIO_Init+0x7e>
 80046d4:	24002a00 	.word	0x24002a00

080046d8 <USBD_AUDIO_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_AUDIO_RegisterInterface(USBD_HandleTypeDef *pdev,
                                     USBD_AUDIO_ItfTypeDef *fops)
{
  if (fops == NULL)
 80046d8:	b119      	cbz	r1, 80046e2 <USBD_AUDIO_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;
 80046da:	f8c0 12c0 	str.w	r1, [r0, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80046de:	2000      	movs	r0, #0
 80046e0:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 80046e2:	2003      	movs	r0, #3
}
 80046e4:	4770      	bx	lr

080046e6 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80046e6:	b198      	cbz	r0, 8004710 <USBD_Init+0x2a>
{
 80046e8:	b508      	push	{r3, lr}
 80046ea:	4603      	mov	r3, r0
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80046ec:	2000      	movs	r0, #0
 80046ee:	f8c3 02b8 	str.w	r0, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80046f2:	f8c3 02c0 	str.w	r0, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80046f6:	f8c3 02cc 	str.w	r0, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80046fa:	b109      	cbz	r1, 8004700 <USBD_Init+0x1a>
  {
    pdev->pDesc = pdesc;
 80046fc:	f8c3 12b4 	str.w	r1, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004700:	2101      	movs	r1, #1
 8004702:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  pdev->id = id;
 8004706:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004708:	4618      	mov	r0, r3
 800470a:	f000 ff27 	bl	800555c <USBD_LL_Init>

  return ret;
}
 800470e:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8004710:	2003      	movs	r0, #3
}
 8004712:	4770      	bx	lr

08004714 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004714:	b510      	push	{r4, lr}
 8004716:	b082      	sub	sp, #8
  uint16_t len = 0U;
 8004718:	2300      	movs	r3, #0
 800471a:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 800471e:	b161      	cbz	r1, 800473a <USBD_RegisterClass+0x26>
 8004720:	4604      	mov	r4, r0
#endif
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8004722:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_HS
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
 8004726:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8004728:	b14b      	cbz	r3, 800473e <USBD_RegisterClass+0x2a>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800472a:	f10d 0006 	add.w	r0, sp, #6
 800472e:	4798      	blx	r3
 8004730:	f8c4 02cc 	str.w	r0, [r4, #716]	; 0x2cc
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8004734:	2000      	movs	r0, #0
}
 8004736:	b002      	add	sp, #8
 8004738:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 800473a:	2003      	movs	r0, #3
 800473c:	e7fb      	b.n	8004736 <USBD_RegisterClass+0x22>
  return USBD_OK;
 800473e:	2000      	movs	r0, #0
 8004740:	e7f9      	b.n	8004736 <USBD_RegisterClass+0x22>

08004742 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004742:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004744:	f000 ff69 	bl	800561a <USBD_LL_Start>
}
 8004748:	bd08      	pop	{r3, pc}

0800474a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800474a:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 800474c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004750:	b113      	cbz	r3, 8004758 <USBD_SetClassConfig+0xe>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4798      	blx	r3
  }

  return ret;
}
 8004756:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004758:	2003      	movs	r0, #3
 800475a:	e7fc      	b.n	8004756 <USBD_SetClassConfig+0xc>

0800475c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800475c:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800475e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004762:	b10b      	cbz	r3, 8004768 <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	4798      	blx	r3
  }

  return USBD_OK;
}
 8004768:	2000      	movs	r0, #0
 800476a:	bd08      	pop	{r3, pc}

0800476c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800476c:	b538      	push	{r3, r4, r5, lr}
 800476e:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004770:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
 8004774:	4628      	mov	r0, r5
 8004776:	f000 f96b 	bl	8004a50 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800477a:	2301      	movs	r3, #1
 800477c:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004780:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0
 8004784:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004788:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
 800478c:	f001 031f 	and.w	r3, r1, #31
 8004790:	2b01      	cmp	r3, #1
 8004792:	d00d      	beq.n	80047b0 <USBD_LL_SetupStage+0x44>
 8004794:	2b02      	cmp	r3, #2
 8004796:	d010      	beq.n	80047ba <USBD_LL_SetupStage+0x4e>
 8004798:	b12b      	cbz	r3, 80047a6 <USBD_LL_SetupStage+0x3a>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800479a:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800479e:	4620      	mov	r0, r4
 80047a0:	f000 ff5e 	bl	8005660 <USBD_LL_StallEP>
      break;
 80047a4:	e003      	b.n	80047ae <USBD_LL_SetupStage+0x42>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80047a6:	4629      	mov	r1, r5
 80047a8:	4620      	mov	r0, r4
 80047aa:	f000 fb10 	bl	8004dce <USBD_StdDevReq>
  }

  return ret;
}
 80047ae:	bd38      	pop	{r3, r4, r5, pc}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80047b0:	4629      	mov	r1, r5
 80047b2:	4620      	mov	r0, r4
 80047b4:	f000 fb43 	bl	8004e3e <USBD_StdItfReq>
      break;
 80047b8:	e7f9      	b.n	80047ae <USBD_LL_SetupStage+0x42>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80047ba:	4629      	mov	r1, r5
 80047bc:	4620      	mov	r0, r4
 80047be:	f000 fb72 	bl	8004ea6 <USBD_StdEPReq>
      break;
 80047c2:	e7f4      	b.n	80047ae <USBD_LL_SetupStage+0x42>

080047c4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80047c4:	b538      	push	{r3, r4, r5, lr}
 80047c6:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80047c8:	460d      	mov	r5, r1
 80047ca:	bb41      	cbnz	r1, 800481e <USBD_LL_DataOutStage+0x5a>
 80047cc:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];
    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80047ce:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 80047d2:	2a03      	cmp	r2, #3
 80047d4:	d001      	beq.n	80047da <USBD_LL_DataOutStage+0x16>
		}
      }
    }
  }

  return USBD_OK;
 80047d6:	4608      	mov	r0, r1
}
 80047d8:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 80047da:	f8d0 115c 	ldr.w	r1, [r0, #348]	; 0x15c
 80047de:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
 80047e2:	4291      	cmp	r1, r2
 80047e4:	d809      	bhi.n	80047fa <USBD_LL_DataOutStage+0x36>
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80047e6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	2b03      	cmp	r3, #3
 80047ee:	d00f      	beq.n	8004810 <USBD_LL_DataOutStage+0x4c>
        (void)USBD_CtlSendStatus(pdev);
 80047f0:	4620      	mov	r0, r4
 80047f2:	f000 fcac 	bl	800514e <USBD_CtlSendStatus>
  return USBD_OK;
 80047f6:	4628      	mov	r0, r5
 80047f8:	e7ee      	b.n	80047d8 <USBD_LL_DataOutStage+0x14>
        pep->rem_length -= pep->maxpacket;
 80047fa:	1a89      	subs	r1, r1, r2
 80047fc:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004800:	428a      	cmp	r2, r1
 8004802:	bf28      	it	cs
 8004804:	460a      	movcs	r2, r1
 8004806:	4619      	mov	r1, r3
 8004808:	f000 fc99 	bl	800513e <USBD_CtlContinueRx>
  return USBD_OK;
 800480c:	4628      	mov	r0, r5
 800480e:	e7e3      	b.n	80047d8 <USBD_LL_DataOutStage+0x14>
          if (pdev->pClass->EP0_RxReady != NULL)
 8004810:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004814:	691b      	ldr	r3, [r3, #16]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d0ea      	beq.n	80047f0 <USBD_LL_DataOutStage+0x2c>
            pdev->pClass->EP0_RxReady(pdev);
 800481a:	4798      	blx	r3
 800481c:	e7e8      	b.n	80047f0 <USBD_LL_DataOutStage+0x2c>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800481e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004822:	b2db      	uxtb	r3, r3
 8004824:	2b03      	cmp	r3, #3
 8004826:	d001      	beq.n	800482c <USBD_LL_DataOutStage+0x68>
  return USBD_OK;
 8004828:	2000      	movs	r0, #0
 800482a:	e7d5      	b.n	80047d8 <USBD_LL_DataOutStage+0x14>
      if (pdev->pClass->DataOut != NULL)
 800482c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004830:	699b      	ldr	r3, [r3, #24]
 8004832:	b10b      	cbz	r3, 8004838 <USBD_LL_DataOutStage+0x74>
		ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8004834:	4798      	blx	r3
		if (ret != USBD_OK)
 8004836:	e7cf      	b.n	80047d8 <USBD_LL_DataOutStage+0x14>
  return USBD_OK;
 8004838:	2000      	movs	r0, #0
 800483a:	e7cd      	b.n	80047d8 <USBD_LL_DataOutStage+0x14>

0800483c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800483c:	b538      	push	{r3, r4, r5, lr}
 800483e:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004840:	460d      	mov	r5, r1
 8004842:	2900      	cmp	r1, #0
 8004844:	d14a      	bne.n	80048dc <USBD_LL_DataInStage+0xa0>
 8004846:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004848:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 800484c:	2a02      	cmp	r2, #2
 800484e:	d005      	beq.n	800485c <USBD_LL_DataInStage+0x20>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8004850:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8004854:	2b01      	cmp	r3, #1
 8004856:	d03c      	beq.n	80048d2 <USBD_LL_DataInStage+0x96>
        }
      }
    }
  }

  return USBD_OK;
 8004858:	4628      	mov	r0, r5
}
 800485a:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 800485c:	69c2      	ldr	r2, [r0, #28]
 800485e:	6a01      	ldr	r1, [r0, #32]
 8004860:	428a      	cmp	r2, r1
 8004862:	d80e      	bhi.n	8004882 <USBD_LL_DataInStage+0x46>
        if ((pep->maxpacket == pep->rem_length) &&
 8004864:	428a      	cmp	r2, r1
 8004866:	d018      	beq.n	800489a <USBD_LL_DataInStage+0x5e>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004868:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800486c:	b2db      	uxtb	r3, r3
 800486e:	2b03      	cmp	r3, #3
 8004870:	d027      	beq.n	80048c2 <USBD_LL_DataInStage+0x86>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004872:	2180      	movs	r1, #128	; 0x80
 8004874:	4620      	mov	r0, r4
 8004876:	f000 fef3 	bl	8005660 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800487a:	4620      	mov	r0, r4
 800487c:	f000 fc72 	bl	8005164 <USBD_CtlReceiveStatus>
 8004880:	e7e6      	b.n	8004850 <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 8004882:	1a52      	subs	r2, r2, r1
 8004884:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004886:	4619      	mov	r1, r3
 8004888:	f000 fc42 	bl	8005110 <USBD_CtlContinueSendData>
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800488c:	2300      	movs	r3, #0
 800488e:	461a      	mov	r2, r3
 8004890:	4619      	mov	r1, r3
 8004892:	4620      	mov	r0, r4
 8004894:	f000 ff04 	bl	80056a0 <USBD_LL_PrepareReceive>
 8004898:	e7da      	b.n	8004850 <USBD_LL_DataInStage+0x14>
            (pep->total_length >= pep->maxpacket) &&
 800489a:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 800489c:	4299      	cmp	r1, r3
 800489e:	d8e3      	bhi.n	8004868 <USBD_LL_DataInStage+0x2c>
            (pep->total_length < pdev->ep0_data_len))
 80048a0:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d2df      	bcs.n	8004868 <USBD_LL_DataInStage+0x2c>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80048a8:	2200      	movs	r2, #0
 80048aa:	4611      	mov	r1, r2
 80048ac:	f000 fc30 	bl	8005110 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80048b0:	2100      	movs	r1, #0
 80048b2:	f8c4 1298 	str.w	r1, [r4, #664]	; 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80048b6:	460b      	mov	r3, r1
 80048b8:	460a      	mov	r2, r1
 80048ba:	4620      	mov	r0, r4
 80048bc:	f000 fef0 	bl	80056a0 <USBD_LL_PrepareReceive>
 80048c0:	e7c6      	b.n	8004850 <USBD_LL_DataInStage+0x14>
            if (pdev->pClass->EP0_TxSent != NULL)
 80048c2:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d0d2      	beq.n	8004872 <USBD_LL_DataInStage+0x36>
              pdev->pClass->EP0_TxSent(pdev);
 80048cc:	4620      	mov	r0, r4
 80048ce:	4798      	blx	r3
 80048d0:	e7cf      	b.n	8004872 <USBD_LL_DataInStage+0x36>
      pdev->dev_test_mode = 0U;
 80048d2:	2300      	movs	r3, #0
 80048d4:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
  return USBD_OK;
 80048d8:	4628      	mov	r0, r5
 80048da:	e7be      	b.n	800485a <USBD_LL_DataInStage+0x1e>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80048dc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	2b03      	cmp	r3, #3
 80048e4:	d001      	beq.n	80048ea <USBD_LL_DataInStage+0xae>
  return USBD_OK;
 80048e6:	2000      	movs	r0, #0
 80048e8:	e7b7      	b.n	800485a <USBD_LL_DataInStage+0x1e>
      if (pdev->pClass->DataIn != NULL)
 80048ea:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80048ee:	695b      	ldr	r3, [r3, #20]
 80048f0:	b10b      	cbz	r3, 80048f6 <USBD_LL_DataInStage+0xba>
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80048f2:	4798      	blx	r3
        if (ret != USBD_OK)
 80048f4:	e7b1      	b.n	800485a <USBD_LL_DataInStage+0x1e>
  return USBD_OK;
 80048f6:	2000      	movs	r0, #0
 80048f8:	e7af      	b.n	800485a <USBD_LL_DataInStage+0x1e>

080048fa <USBD_LL_Reset>:
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80048fa:	2301      	movs	r3, #1
 80048fc:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004900:	2300      	movs	r3, #0
 8004902:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 8004906:	6043      	str	r3, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 8004908:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800490c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004910:	b1f3      	cbz	r3, 8004950 <USBD_LL_Reset+0x56>
{
 8004912:	b570      	push	{r4, r5, r6, lr}
 8004914:	4604      	mov	r4, r0
  {
    return USBD_FAIL;
  }

  if (pdev->pClassData != NULL)
 8004916:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 800491a:	b11a      	cbz	r2, 8004924 <USBD_LL_Reset+0x2a>
  {
    if (pdev->pClass->DeInit != NULL)
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	b10b      	cbz	r3, 8004924 <USBD_LL_Reset+0x2a>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004920:	2100      	movs	r1, #0
 8004922:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004924:	2340      	movs	r3, #64	; 0x40
 8004926:	2200      	movs	r2, #0
 8004928:	4611      	mov	r1, r2
 800492a:	4620      	mov	r0, r4
 800492c:	f000 fe7d 	bl	800562a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004930:	2601      	movs	r6, #1
 8004932:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004936:	2540      	movs	r5, #64	; 0x40
 8004938:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800493c:	462b      	mov	r3, r5
 800493e:	2200      	movs	r2, #0
 8004940:	2180      	movs	r1, #128	; 0x80
 8004942:	4620      	mov	r0, r4
 8004944:	f000 fe71 	bl	800562a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004948:	84a6      	strh	r6, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800494a:	6225      	str	r5, [r4, #32]

  return USBD_OK;
 800494c:	2000      	movs	r0, #0
}
 800494e:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 8004950:	2003      	movs	r0, #3
}
 8004952:	4770      	bx	lr

08004954 <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8004954:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8004956:	2000      	movs	r0, #0
 8004958:	4770      	bx	lr

0800495a <USBD_LL_Suspend>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 800495a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800495e:	b2db      	uxtb	r3, r3
 8004960:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8004964:	2304      	movs	r3, #4
 8004966:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 800496a:	2000      	movs	r0, #0
 800496c:	4770      	bx	lr

0800496e <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800496e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004972:	b2db      	uxtb	r3, r3
 8004974:	2b04      	cmp	r3, #4
 8004976:	d001      	beq.n	800497c <USBD_LL_Resume+0xe>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 8004978:	2000      	movs	r0, #0
 800497a:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 800497c:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 8004980:	b2db      	uxtb	r3, r3
 8004982:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
 8004986:	e7f7      	b.n	8004978 <USBD_LL_Resume+0xa>

08004988 <USBD_LL_SOF>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->pClass == NULL)
 8004988:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 800498c:	b162      	cbz	r2, 80049a8 <USBD_LL_SOF+0x20>
{
 800498e:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004990:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004994:	b2db      	uxtb	r3, r3
 8004996:	2b03      	cmp	r3, #3
 8004998:	d001      	beq.n	800499e <USBD_LL_SOF+0x16>
    {
      (void)pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
 800499a:	2000      	movs	r0, #0
}
 800499c:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 800499e:	69d3      	ldr	r3, [r2, #28]
 80049a0:	b123      	cbz	r3, 80049ac <USBD_LL_SOF+0x24>
      (void)pdev->pClass->SOF(pdev);
 80049a2:	4798      	blx	r3
  return USBD_OK;
 80049a4:	2000      	movs	r0, #0
 80049a6:	e7f9      	b.n	800499c <USBD_LL_SOF+0x14>
    return USBD_FAIL;
 80049a8:	2003      	movs	r0, #3
}
 80049aa:	4770      	bx	lr
  return USBD_OK;
 80049ac:	2000      	movs	r0, #0
 80049ae:	e7f5      	b.n	800499c <USBD_LL_SOF+0x14>

080049b0 <USBD_LL_IsoINIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
  if (pdev->pClass == NULL)
 80049b0:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 80049b4:	b162      	cbz	r2, 80049d0 <USBD_LL_IsoINIncomplete+0x20>
{
 80049b6:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80049b8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	2b03      	cmp	r3, #3
 80049c0:	d001      	beq.n	80049c6 <USBD_LL_IsoINIncomplete+0x16>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 80049c2:	2000      	movs	r0, #0
}
 80049c4:	bd08      	pop	{r3, pc}
    if (pdev->pClass->IsoINIncomplete != NULL)
 80049c6:	6a13      	ldr	r3, [r2, #32]
 80049c8:	b123      	cbz	r3, 80049d4 <USBD_LL_IsoINIncomplete+0x24>
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80049ca:	4798      	blx	r3
  return USBD_OK;
 80049cc:	2000      	movs	r0, #0
 80049ce:	e7f9      	b.n	80049c4 <USBD_LL_IsoINIncomplete+0x14>
    return USBD_FAIL;
 80049d0:	2003      	movs	r0, #3
}
 80049d2:	4770      	bx	lr
  return USBD_OK;
 80049d4:	2000      	movs	r0, #0
 80049d6:	e7f5      	b.n	80049c4 <USBD_LL_IsoINIncomplete+0x14>

080049d8 <USBD_LL_IsoOUTIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
  if (pdev->pClass == NULL)
 80049d8:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 80049dc:	b162      	cbz	r2, 80049f8 <USBD_LL_IsoOUTIncomplete+0x20>
{
 80049de:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80049e0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	2b03      	cmp	r3, #3
 80049e8:	d001      	beq.n	80049ee <USBD_LL_IsoOUTIncomplete+0x16>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 80049ea:	2000      	movs	r0, #0
}
 80049ec:	bd08      	pop	{r3, pc}
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80049ee:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80049f0:	b123      	cbz	r3, 80049fc <USBD_LL_IsoOUTIncomplete+0x24>
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80049f2:	4798      	blx	r3
  return USBD_OK;
 80049f4:	2000      	movs	r0, #0
 80049f6:	e7f9      	b.n	80049ec <USBD_LL_IsoOUTIncomplete+0x14>
    return USBD_FAIL;
 80049f8:	2003      	movs	r0, #3
}
 80049fa:	4770      	bx	lr
  return USBD_OK;
 80049fc:	2000      	movs	r0, #0
 80049fe:	e7f5      	b.n	80049ec <USBD_LL_IsoOUTIncomplete+0x14>

08004a00 <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 8004a00:	2000      	movs	r0, #0
 8004a02:	4770      	bx	lr

08004a04 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8004a04:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004a06:	2301      	movs	r3, #1
 8004a08:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8004a0c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004a10:	b113      	cbz	r3, 8004a18 <USBD_LL_DevDisconnected+0x14>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	7901      	ldrb	r1, [r0, #4]
 8004a16:	4798      	blx	r3
  }

  return USBD_OK;
}
 8004a18:	2000      	movs	r0, #0
 8004a1a:	bd08      	pop	{r3, pc}

08004a1c <USBD_GetNextDesc>:

USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;

  *ptr += pnext->bLength;
 8004a1c:	7803      	ldrb	r3, [r0, #0]
 8004a1e:	880a      	ldrh	r2, [r1, #0]
 8004a20:	4413      	add	r3, r2
 8004a22:	800b      	strh	r3, [r1, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8004a24:	7803      	ldrb	r3, [r0, #0]

  return (pnext);
}
 8004a26:	4418      	add	r0, r3
 8004a28:	4770      	bx	lr

08004a2a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8004a2a:	4603      	mov	r3, r0
  uint8_t  len = 0U;
 8004a2c:	2000      	movs	r0, #0
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 8004a2e:	781a      	ldrb	r2, [r3, #0]
 8004a30:	b11a      	cbz	r2, 8004a3a <USBD_GetLen+0x10>
  {
    len++;
 8004a32:	3001      	adds	r0, #1
 8004a34:	b2c0      	uxtb	r0, r0
    pbuff++;
 8004a36:	3301      	adds	r3, #1
 8004a38:	e7f9      	b.n	8004a2e <USBD_GetLen+0x4>
  }

  return len;
}
 8004a3a:	4770      	bx	lr

08004a3c <USBD_SetFeature>:
{
 8004a3c:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004a3e:	884b      	ldrh	r3, [r1, #2]
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d000      	beq.n	8004a46 <USBD_SetFeature+0xa>
}
 8004a44:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 8004a46:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8004a4a:	f000 fb80 	bl	800514e <USBD_CtlSendStatus>
}
 8004a4e:	e7f9      	b.n	8004a44 <USBD_SetFeature+0x8>

08004a50 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 8004a50:	780b      	ldrb	r3, [r1, #0]
 8004a52:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 8004a54:	784b      	ldrb	r3, [r1, #1]
 8004a56:	7043      	strb	r3, [r0, #1]
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
 8004a58:	788b      	ldrb	r3, [r1, #2]
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 8004a5a:	78ca      	ldrb	r2, [r1, #3]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8004a5c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 8004a60:	8043      	strh	r3, [r0, #2]
  _Byte1 = *(uint8_t *)_pbuff;
 8004a62:	790b      	ldrb	r3, [r1, #4]
  _Byte2 = *(uint8_t *)_pbuff;
 8004a64:	794a      	ldrb	r2, [r1, #5]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 8004a66:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 8004a6a:	8083      	strh	r3, [r0, #4]
  _Byte1 = *(uint8_t *)_pbuff;
 8004a6c:	798b      	ldrb	r3, [r1, #6]
  _Byte2 = *(uint8_t *)_pbuff;
 8004a6e:	79ca      	ldrb	r2, [r1, #7]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 8004a70:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 8004a74:	80c3      	strh	r3, [r0, #6]
}
 8004a76:	4770      	bx	lr

08004a78 <USBD_CtlError>:
{
 8004a78:	b510      	push	{r4, lr}
 8004a7a:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8004a7c:	2180      	movs	r1, #128	; 0x80
 8004a7e:	f000 fdef 	bl	8005660 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8004a82:	2100      	movs	r1, #0
 8004a84:	4620      	mov	r0, r4
 8004a86:	f000 fdeb 	bl	8005660 <USBD_LL_StallEP>
}
 8004a8a:	bd10      	pop	{r4, pc}

08004a8c <USBD_GetDescriptor>:
{
 8004a8c:	b530      	push	{r4, r5, lr}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	4604      	mov	r4, r0
 8004a92:	460d      	mov	r5, r1
  uint16_t len = 0U;
 8004a94:	2300      	movs	r3, #0
 8004a96:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8004a9a:	884a      	ldrh	r2, [r1, #2]
 8004a9c:	0a13      	lsrs	r3, r2, #8
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	2b06      	cmp	r3, #6
 8004aa2:	f200 80ab 	bhi.w	8004bfc <USBD_GetDescriptor+0x170>
 8004aa6:	e8df f003 	tbb	[pc, r3]
 8004aaa:	1f04      	.short	0x1f04
 8004aac:	8da9a933 	.word	0x8da9a933
 8004ab0:	9a          	.byte	0x9a
 8004ab1:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004ab2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f10d 0106 	add.w	r1, sp, #6
 8004abc:	7c00      	ldrb	r0, [r0, #16]
 8004abe:	4798      	blx	r3
  if (req->wLength != 0U)
 8004ac0:	88ea      	ldrh	r2, [r5, #6]
 8004ac2:	2a00      	cmp	r2, #0
 8004ac4:	f000 80a3 	beq.w	8004c0e <USBD_GetDescriptor+0x182>
    if (len != 0U)
 8004ac8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	f000 8099 	beq.w	8004c04 <USBD_GetDescriptor+0x178>
      len = MIN(len, req->wLength);
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	bf28      	it	cs
 8004ad6:	461a      	movcs	r2, r3
 8004ad8:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8004adc:	4601      	mov	r1, r0
 8004ade:	4620      	mov	r0, r4
 8004ae0:	f000 fb09 	bl	80050f6 <USBD_CtlSendData>
}
 8004ae4:	b003      	add	sp, #12
 8004ae6:	bd30      	pop	{r4, r5, pc}
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004ae8:	7c03      	ldrb	r3, [r0, #16]
 8004aea:	b943      	cbnz	r3, 8004afe <USBD_GetDescriptor+0x72>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8004aec:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af2:	f10d 0006 	add.w	r0, sp, #6
 8004af6:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004af8:	2302      	movs	r3, #2
 8004afa:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8004afc:	e7e0      	b.n	8004ac0 <USBD_GetDescriptor+0x34>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8004afe:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b04:	f10d 0006 	add.w	r0, sp, #6
 8004b08:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004b0a:	2302      	movs	r3, #2
 8004b0c:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8004b0e:	e7d7      	b.n	8004ac0 <USBD_GetDescriptor+0x34>
      switch ((uint8_t)(req->wValue))
 8004b10:	b2d2      	uxtb	r2, r2
 8004b12:	2a05      	cmp	r2, #5
 8004b14:	d852      	bhi.n	8004bbc <USBD_GetDescriptor+0x130>
 8004b16:	e8df f002 	tbb	[pc, r2]
 8004b1a:	1003      	.short	0x1003
 8004b1c:	44372a1d 	.word	0x44372a1d
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8004b20:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	b123      	cbz	r3, 8004b32 <USBD_GetDescriptor+0xa6>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8004b28:	f10d 0106 	add.w	r1, sp, #6
 8004b2c:	7c00      	ldrb	r0, [r0, #16]
 8004b2e:	4798      	blx	r3
  if (err != 0U)
 8004b30:	e7c6      	b.n	8004ac0 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8004b32:	4629      	mov	r1, r5
 8004b34:	f7ff ffa0 	bl	8004a78 <USBD_CtlError>
  if (err != 0U)
 8004b38:	e7d4      	b.n	8004ae4 <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8004b3a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	b123      	cbz	r3, 8004b4c <USBD_GetDescriptor+0xc0>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8004b42:	f10d 0106 	add.w	r1, sp, #6
 8004b46:	7c00      	ldrb	r0, [r0, #16]
 8004b48:	4798      	blx	r3
  if (err != 0U)
 8004b4a:	e7b9      	b.n	8004ac0 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8004b4c:	4629      	mov	r1, r5
 8004b4e:	f7ff ff93 	bl	8004a78 <USBD_CtlError>
  if (err != 0U)
 8004b52:	e7c7      	b.n	8004ae4 <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8004b54:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	b123      	cbz	r3, 8004b66 <USBD_GetDescriptor+0xda>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8004b5c:	f10d 0106 	add.w	r1, sp, #6
 8004b60:	7c00      	ldrb	r0, [r0, #16]
 8004b62:	4798      	blx	r3
  if (err != 0U)
 8004b64:	e7ac      	b.n	8004ac0 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8004b66:	4629      	mov	r1, r5
 8004b68:	f7ff ff86 	bl	8004a78 <USBD_CtlError>
  if (err != 0U)
 8004b6c:	e7ba      	b.n	8004ae4 <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8004b6e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004b72:	691b      	ldr	r3, [r3, #16]
 8004b74:	b123      	cbz	r3, 8004b80 <USBD_GetDescriptor+0xf4>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8004b76:	f10d 0106 	add.w	r1, sp, #6
 8004b7a:	7c00      	ldrb	r0, [r0, #16]
 8004b7c:	4798      	blx	r3
  if (err != 0U)
 8004b7e:	e79f      	b.n	8004ac0 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8004b80:	4629      	mov	r1, r5
 8004b82:	f7ff ff79 	bl	8004a78 <USBD_CtlError>
  if (err != 0U)
 8004b86:	e7ad      	b.n	8004ae4 <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8004b88:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004b8c:	695b      	ldr	r3, [r3, #20]
 8004b8e:	b123      	cbz	r3, 8004b9a <USBD_GetDescriptor+0x10e>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8004b90:	f10d 0106 	add.w	r1, sp, #6
 8004b94:	7c00      	ldrb	r0, [r0, #16]
 8004b96:	4798      	blx	r3
  if (err != 0U)
 8004b98:	e792      	b.n	8004ac0 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8004b9a:	4629      	mov	r1, r5
 8004b9c:	f7ff ff6c 	bl	8004a78 <USBD_CtlError>
  if (err != 0U)
 8004ba0:	e7a0      	b.n	8004ae4 <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8004ba2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004ba6:	699b      	ldr	r3, [r3, #24]
 8004ba8:	b123      	cbz	r3, 8004bb4 <USBD_GetDescriptor+0x128>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8004baa:	f10d 0106 	add.w	r1, sp, #6
 8004bae:	7c00      	ldrb	r0, [r0, #16]
 8004bb0:	4798      	blx	r3
  if (err != 0U)
 8004bb2:	e785      	b.n	8004ac0 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8004bb4:	4629      	mov	r1, r5
 8004bb6:	f7ff ff5f 	bl	8004a78 <USBD_CtlError>
  if (err != 0U)
 8004bba:	e793      	b.n	8004ae4 <USBD_GetDescriptor+0x58>
          USBD_CtlError(pdev, req);
 8004bbc:	4629      	mov	r1, r5
 8004bbe:	f7ff ff5b 	bl	8004a78 <USBD_CtlError>
  if (err != 0U)
 8004bc2:	e78f      	b.n	8004ae4 <USBD_GetDescriptor+0x58>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004bc4:	7c03      	ldrb	r3, [r0, #16]
 8004bc6:	b933      	cbnz	r3, 8004bd6 <USBD_GetDescriptor+0x14a>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8004bc8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bce:	f10d 0006 	add.w	r0, sp, #6
 8004bd2:	4798      	blx	r3
  if (err != 0U)
 8004bd4:	e774      	b.n	8004ac0 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 8004bd6:	4629      	mov	r1, r5
 8004bd8:	f7ff ff4e 	bl	8004a78 <USBD_CtlError>
  if (err != 0U)
 8004bdc:	e782      	b.n	8004ae4 <USBD_GetDescriptor+0x58>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004bde:	7c03      	ldrb	r3, [r0, #16]
 8004be0:	b943      	cbnz	r3, 8004bf4 <USBD_GetDescriptor+0x168>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8004be2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be8:	f10d 0006 	add.w	r0, sp, #6
 8004bec:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004bee:	2307      	movs	r3, #7
 8004bf0:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8004bf2:	e765      	b.n	8004ac0 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 8004bf4:	4629      	mov	r1, r5
 8004bf6:	f7ff ff3f 	bl	8004a78 <USBD_CtlError>
  if (err != 0U)
 8004bfa:	e773      	b.n	8004ae4 <USBD_GetDescriptor+0x58>
      USBD_CtlError(pdev, req);
 8004bfc:	4629      	mov	r1, r5
 8004bfe:	f7ff ff3b 	bl	8004a78 <USBD_CtlError>
    return;
 8004c02:	e76f      	b.n	8004ae4 <USBD_GetDescriptor+0x58>
      USBD_CtlError(pdev, req);
 8004c04:	4629      	mov	r1, r5
 8004c06:	4620      	mov	r0, r4
 8004c08:	f7ff ff36 	bl	8004a78 <USBD_CtlError>
 8004c0c:	e76a      	b.n	8004ae4 <USBD_GetDescriptor+0x58>
    (void)USBD_CtlSendStatus(pdev);
 8004c0e:	4620      	mov	r0, r4
 8004c10:	f000 fa9d 	bl	800514e <USBD_CtlSendStatus>
 8004c14:	e766      	b.n	8004ae4 <USBD_GetDescriptor+0x58>

08004c16 <USBD_SetAddress>:
{
 8004c16:	b538      	push	{r3, r4, r5, lr}
 8004c18:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8004c1a:	888b      	ldrh	r3, [r1, #4]
 8004c1c:	b9fb      	cbnz	r3, 8004c5e <USBD_SetAddress+0x48>
 8004c1e:	88cb      	ldrh	r3, [r1, #6]
 8004c20:	b9eb      	cbnz	r3, 8004c5e <USBD_SetAddress+0x48>
 8004c22:	884b      	ldrh	r3, [r1, #2]
 8004c24:	2b7f      	cmp	r3, #127	; 0x7f
 8004c26:	d81a      	bhi.n	8004c5e <USBD_SetAddress+0x48>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8004c28:	f003 057f 	and.w	r5, r3, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c2c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	2b03      	cmp	r3, #3
 8004c34:	d00c      	beq.n	8004c50 <USBD_SetAddress+0x3a>
      pdev->dev_address = dev_addr;
 8004c36:	f880 529e 	strb.w	r5, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8004c3a:	4629      	mov	r1, r5
 8004c3c:	f000 fd20 	bl	8005680 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8004c40:	4620      	mov	r0, r4
 8004c42:	f000 fa84 	bl	800514e <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8004c46:	b135      	cbz	r5, 8004c56 <USBD_SetAddress+0x40>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004c48:	2302      	movs	r3, #2
 8004c4a:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8004c4e:	e009      	b.n	8004c64 <USBD_SetAddress+0x4e>
      USBD_CtlError(pdev, req);
 8004c50:	f7ff ff12 	bl	8004a78 <USBD_CtlError>
 8004c54:	e006      	b.n	8004c64 <USBD_SetAddress+0x4e>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8004c56:	2301      	movs	r3, #1
 8004c58:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8004c5c:	e002      	b.n	8004c64 <USBD_SetAddress+0x4e>
    USBD_CtlError(pdev, req);
 8004c5e:	4620      	mov	r0, r4
 8004c60:	f7ff ff0a 	bl	8004a78 <USBD_CtlError>
}
 8004c64:	bd38      	pop	{r3, r4, r5, pc}
	...

08004c68 <USBD_SetConfig>:
{
 8004c68:	b570      	push	{r4, r5, r6, lr}
 8004c6a:	4604      	mov	r4, r0
 8004c6c:	460e      	mov	r6, r1
  cfgidx = (uint8_t)(req->wValue);
 8004c6e:	788d      	ldrb	r5, [r1, #2]
 8004c70:	4b2e      	ldr	r3, [pc, #184]	; (8004d2c <USBD_SetConfig+0xc4>)
 8004c72:	701d      	strb	r5, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8004c74:	2d01      	cmp	r5, #1
 8004c76:	d810      	bhi.n	8004c9a <USBD_SetConfig+0x32>
  switch (pdev->dev_state)
 8004c78:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	d00f      	beq.n	8004ca2 <USBD_SetConfig+0x3a>
 8004c82:	2b03      	cmp	r3, #3
 8004c84:	d023      	beq.n	8004cce <USBD_SetConfig+0x66>
      USBD_CtlError(pdev, req);
 8004c86:	f7ff fef7 	bl	8004a78 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8004c8a:	4b28      	ldr	r3, [pc, #160]	; (8004d2c <USBD_SetConfig+0xc4>)
 8004c8c:	7819      	ldrb	r1, [r3, #0]
 8004c8e:	4620      	mov	r0, r4
 8004c90:	f7ff fd64 	bl	800475c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8004c94:	2503      	movs	r5, #3
}
 8004c96:	4628      	mov	r0, r5
 8004c98:	bd70      	pop	{r4, r5, r6, pc}
    USBD_CtlError(pdev, req);
 8004c9a:	f7ff feed 	bl	8004a78 <USBD_CtlError>
    return USBD_FAIL;
 8004c9e:	2503      	movs	r5, #3
 8004ca0:	e7f9      	b.n	8004c96 <USBD_SetConfig+0x2e>
      if (cfgidx != 0U)
 8004ca2:	b18d      	cbz	r5, 8004cc8 <USBD_SetConfig+0x60>
        pdev->dev_config = cfgidx;
 8004ca4:	6045      	str	r5, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8004ca6:	4629      	mov	r1, r5
 8004ca8:	f7ff fd4f 	bl	800474a <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8004cac:	4605      	mov	r5, r0
 8004cae:	b120      	cbz	r0, 8004cba <USBD_SetConfig+0x52>
          USBD_CtlError(pdev, req);
 8004cb0:	4631      	mov	r1, r6
 8004cb2:	4620      	mov	r0, r4
 8004cb4:	f7ff fee0 	bl	8004a78 <USBD_CtlError>
 8004cb8:	e7ed      	b.n	8004c96 <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 8004cba:	4620      	mov	r0, r4
 8004cbc:	f000 fa47 	bl	800514e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8004cc6:	e7e6      	b.n	8004c96 <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 8004cc8:	f000 fa41 	bl	800514e <USBD_CtlSendStatus>
 8004ccc:	e7e3      	b.n	8004c96 <USBD_SetConfig+0x2e>
      if (cfgidx == 0U)
 8004cce:	b1cd      	cbz	r5, 8004d04 <USBD_SetConfig+0x9c>
      else if (cfgidx != pdev->dev_config)
 8004cd0:	6841      	ldr	r1, [r0, #4]
 8004cd2:	428d      	cmp	r5, r1
 8004cd4:	d025      	beq.n	8004d22 <USBD_SetConfig+0xba>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8004cd6:	b2c9      	uxtb	r1, r1
 8004cd8:	f7ff fd40 	bl	800475c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8004cdc:	4b13      	ldr	r3, [pc, #76]	; (8004d2c <USBD_SetConfig+0xc4>)
 8004cde:	7819      	ldrb	r1, [r3, #0]
 8004ce0:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8004ce2:	4620      	mov	r0, r4
 8004ce4:	f7ff fd31 	bl	800474a <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8004ce8:	4605      	mov	r5, r0
 8004cea:	b1b0      	cbz	r0, 8004d1a <USBD_SetConfig+0xb2>
          USBD_CtlError(pdev, req);
 8004cec:	4631      	mov	r1, r6
 8004cee:	4620      	mov	r0, r4
 8004cf0:	f7ff fec2 	bl	8004a78 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8004cf4:	7921      	ldrb	r1, [r4, #4]
 8004cf6:	4620      	mov	r0, r4
 8004cf8:	f7ff fd30 	bl	800475c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8004cfc:	2302      	movs	r3, #2
 8004cfe:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8004d02:	e7c8      	b.n	8004c96 <USBD_SetConfig+0x2e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004d04:	2302      	movs	r3, #2
 8004d06:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8004d0a:	6045      	str	r5, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8004d0c:	4629      	mov	r1, r5
 8004d0e:	f7ff fd25 	bl	800475c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8004d12:	4620      	mov	r0, r4
 8004d14:	f000 fa1b 	bl	800514e <USBD_CtlSendStatus>
 8004d18:	e7bd      	b.n	8004c96 <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 8004d1a:	4620      	mov	r0, r4
 8004d1c:	f000 fa17 	bl	800514e <USBD_CtlSendStatus>
 8004d20:	e7b9      	b.n	8004c96 <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 8004d22:	f000 fa14 	bl	800514e <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8004d26:	2500      	movs	r5, #0
 8004d28:	e7b5      	b.n	8004c96 <USBD_SetConfig+0x2e>
 8004d2a:	bf00      	nop
 8004d2c:	240001e4 	.word	0x240001e4

08004d30 <USBD_GetConfig>:
{
 8004d30:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 8004d32:	88cb      	ldrh	r3, [r1, #6]
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d10b      	bne.n	8004d50 <USBD_GetConfig+0x20>
    switch (pdev->dev_state)
 8004d38:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d909      	bls.n	8004d56 <USBD_GetConfig+0x26>
 8004d42:	2b03      	cmp	r3, #3
 8004d44:	d109      	bne.n	8004d5a <USBD_GetConfig+0x2a>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8004d46:	2201      	movs	r2, #1
 8004d48:	1d01      	adds	r1, r0, #4
 8004d4a:	f000 f9d4 	bl	80050f6 <USBD_CtlSendData>
        break;
 8004d4e:	e001      	b.n	8004d54 <USBD_GetConfig+0x24>
    USBD_CtlError(pdev, req);
 8004d50:	f7ff fe92 	bl	8004a78 <USBD_CtlError>
}
 8004d54:	bd08      	pop	{r3, pc}
    switch (pdev->dev_state)
 8004d56:	b25b      	sxtb	r3, r3
 8004d58:	b913      	cbnz	r3, 8004d60 <USBD_GetConfig+0x30>
        USBD_CtlError(pdev, req);
 8004d5a:	f7ff fe8d 	bl	8004a78 <USBD_CtlError>
}
 8004d5e:	e7f9      	b.n	8004d54 <USBD_GetConfig+0x24>
        pdev->dev_default_config = 0U;
 8004d60:	4601      	mov	r1, r0
 8004d62:	2300      	movs	r3, #0
 8004d64:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8004d68:	2201      	movs	r2, #1
 8004d6a:	f000 f9c4 	bl	80050f6 <USBD_CtlSendData>
        break;
 8004d6e:	e7f1      	b.n	8004d54 <USBD_GetConfig+0x24>

08004d70 <USBD_GetStatus>:
{
 8004d70:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 8004d72:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004d76:	3b01      	subs	r3, #1
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d812      	bhi.n	8004da2 <USBD_GetStatus+0x32>
      if (req->wLength != 0x2U)
 8004d7c:	88cb      	ldrh	r3, [r1, #6]
 8004d7e:	2b02      	cmp	r3, #2
 8004d80:	d10c      	bne.n	8004d9c <USBD_GetStatus+0x2c>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8004d82:	2301      	movs	r3, #1
 8004d84:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 8004d86:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8004d8a:	b10b      	cbz	r3, 8004d90 <USBD_GetStatus+0x20>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	60c3      	str	r3, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8004d90:	2202      	movs	r2, #2
 8004d92:	f100 010c 	add.w	r1, r0, #12
 8004d96:	f000 f9ae 	bl	80050f6 <USBD_CtlSendData>
}
 8004d9a:	bd08      	pop	{r3, pc}
        USBD_CtlError(pdev, req);
 8004d9c:	f7ff fe6c 	bl	8004a78 <USBD_CtlError>
        break;
 8004da0:	e7fb      	b.n	8004d9a <USBD_GetStatus+0x2a>
      USBD_CtlError(pdev, req);
 8004da2:	f7ff fe69 	bl	8004a78 <USBD_CtlError>
}
 8004da6:	e7f8      	b.n	8004d9a <USBD_GetStatus+0x2a>

08004da8 <USBD_ClrFeature>:
{
 8004da8:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 8004daa:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004dae:	3b01      	subs	r3, #1
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	d809      	bhi.n	8004dc8 <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004db4:	884b      	ldrh	r3, [r1, #2]
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d000      	beq.n	8004dbc <USBD_ClrFeature+0x14>
}
 8004dba:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8004dc2:	f000 f9c4 	bl	800514e <USBD_CtlSendStatus>
 8004dc6:	e7f8      	b.n	8004dba <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 8004dc8:	f7ff fe56 	bl	8004a78 <USBD_CtlError>
}
 8004dcc:	e7f5      	b.n	8004dba <USBD_ClrFeature+0x12>

08004dce <USBD_StdDevReq>:
{
 8004dce:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004dd0:	780c      	ldrb	r4, [r1, #0]
 8004dd2:	f004 0460 	and.w	r4, r4, #96	; 0x60
 8004dd6:	2c20      	cmp	r4, #32
 8004dd8:	d006      	beq.n	8004de8 <USBD_StdDevReq+0x1a>
 8004dda:	2c40      	cmp	r4, #64	; 0x40
 8004ddc:	d004      	beq.n	8004de8 <USBD_StdDevReq+0x1a>
 8004dde:	b154      	cbz	r4, 8004df6 <USBD_StdDevReq+0x28>
      USBD_CtlError(pdev, req);
 8004de0:	f7ff fe4a 	bl	8004a78 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004de4:	2400      	movs	r4, #0
      break;
 8004de6:	e004      	b.n	8004df2 <USBD_StdDevReq+0x24>
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004de8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	4798      	blx	r3
 8004df0:	4604      	mov	r4, r0
}
 8004df2:	4620      	mov	r0, r4
 8004df4:	bd38      	pop	{r3, r4, r5, pc}
      switch (req->bRequest)
 8004df6:	784d      	ldrb	r5, [r1, #1]
 8004df8:	2d09      	cmp	r5, #9
 8004dfa:	d81d      	bhi.n	8004e38 <USBD_StdDevReq+0x6a>
 8004dfc:	e8df f005 	tbb	[pc, r5]
 8004e00:	161c1912 	.word	0x161c1912
 8004e04:	1c05081c 	.word	0x1c05081c
 8004e08:	0b0f      	.short	0x0b0f
          USBD_GetDescriptor(pdev, req);
 8004e0a:	f7ff fe3f 	bl	8004a8c <USBD_GetDescriptor>
          break;
 8004e0e:	e7f0      	b.n	8004df2 <USBD_StdDevReq+0x24>
          USBD_SetAddress(pdev, req);
 8004e10:	f7ff ff01 	bl	8004c16 <USBD_SetAddress>
          break;
 8004e14:	e7ed      	b.n	8004df2 <USBD_StdDevReq+0x24>
          ret = USBD_SetConfig(pdev, req);
 8004e16:	f7ff ff27 	bl	8004c68 <USBD_SetConfig>
 8004e1a:	4604      	mov	r4, r0
          break;
 8004e1c:	e7e9      	b.n	8004df2 <USBD_StdDevReq+0x24>
          USBD_GetConfig(pdev, req);
 8004e1e:	f7ff ff87 	bl	8004d30 <USBD_GetConfig>
          break;
 8004e22:	e7e6      	b.n	8004df2 <USBD_StdDevReq+0x24>
          USBD_GetStatus(pdev, req);
 8004e24:	f7ff ffa4 	bl	8004d70 <USBD_GetStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8004e28:	462c      	mov	r4, r5
          break;
 8004e2a:	e7e2      	b.n	8004df2 <USBD_StdDevReq+0x24>
          USBD_SetFeature(pdev, req);
 8004e2c:	f7ff fe06 	bl	8004a3c <USBD_SetFeature>
          break;
 8004e30:	e7df      	b.n	8004df2 <USBD_StdDevReq+0x24>
          USBD_ClrFeature(pdev, req);
 8004e32:	f7ff ffb9 	bl	8004da8 <USBD_ClrFeature>
          break;
 8004e36:	e7dc      	b.n	8004df2 <USBD_StdDevReq+0x24>
          USBD_CtlError(pdev, req);
 8004e38:	f7ff fe1e 	bl	8004a78 <USBD_CtlError>
          break;
 8004e3c:	e7d9      	b.n	8004df2 <USBD_StdDevReq+0x24>

08004e3e <USBD_StdItfReq>:
{
 8004e3e:	b570      	push	{r4, r5, r6, lr}
 8004e40:	4605      	mov	r5, r0
 8004e42:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004e44:	780b      	ldrb	r3, [r1, #0]
 8004e46:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004e4a:	2b20      	cmp	r3, #32
 8004e4c:	d007      	beq.n	8004e5e <USBD_StdItfReq+0x20>
 8004e4e:	2b40      	cmp	r3, #64	; 0x40
 8004e50:	d005      	beq.n	8004e5e <USBD_StdItfReq+0x20>
 8004e52:	b123      	cbz	r3, 8004e5e <USBD_StdItfReq+0x20>
      USBD_CtlError(pdev, req);
 8004e54:	f7ff fe10 	bl	8004a78 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004e58:	2600      	movs	r6, #0
}
 8004e5a:	4630      	mov	r0, r6
 8004e5c:	bd70      	pop	{r4, r5, r6, pc}
      switch (pdev->dev_state)
 8004e5e:	f895 329c 	ldrb.w	r3, [r5, #668]	; 0x29c
 8004e62:	3b01      	subs	r3, #1
 8004e64:	2b02      	cmp	r3, #2
 8004e66:	d818      	bhi.n	8004e9a <USBD_StdItfReq+0x5c>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004e68:	7923      	ldrb	r3, [r4, #4]
 8004e6a:	2b03      	cmp	r3, #3
 8004e6c:	d80f      	bhi.n	8004e8e <USBD_StdItfReq+0x50>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004e6e:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	4621      	mov	r1, r4
 8004e76:	4628      	mov	r0, r5
 8004e78:	4798      	blx	r3
 8004e7a:	4606      	mov	r6, r0
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8004e7c:	88e3      	ldrh	r3, [r4, #6]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1eb      	bne.n	8004e5a <USBD_StdItfReq+0x1c>
 8004e82:	2800      	cmp	r0, #0
 8004e84:	d1e9      	bne.n	8004e5a <USBD_StdItfReq+0x1c>
              (void)USBD_CtlSendStatus(pdev);
 8004e86:	4628      	mov	r0, r5
 8004e88:	f000 f961 	bl	800514e <USBD_CtlSendStatus>
 8004e8c:	e7e5      	b.n	8004e5a <USBD_StdItfReq+0x1c>
            USBD_CtlError(pdev, req);
 8004e8e:	4621      	mov	r1, r4
 8004e90:	4628      	mov	r0, r5
 8004e92:	f7ff fdf1 	bl	8004a78 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004e96:	2600      	movs	r6, #0
 8004e98:	e7df      	b.n	8004e5a <USBD_StdItfReq+0x1c>
          USBD_CtlError(pdev, req);
 8004e9a:	4621      	mov	r1, r4
 8004e9c:	4628      	mov	r0, r5
 8004e9e:	f7ff fdeb 	bl	8004a78 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004ea2:	2600      	movs	r6, #0
          break;
 8004ea4:	e7d9      	b.n	8004e5a <USBD_StdItfReq+0x1c>

08004ea6 <USBD_StdEPReq>:
{
 8004ea6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ea8:	4606      	mov	r6, r0
 8004eaa:	460d      	mov	r5, r1
  ep_addr = LOBYTE(req->wIndex);
 8004eac:	888b      	ldrh	r3, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004eae:	780c      	ldrb	r4, [r1, #0]
 8004eb0:	f004 0460 	and.w	r4, r4, #96	; 0x60
 8004eb4:	2c20      	cmp	r4, #32
 8004eb6:	d008      	beq.n	8004eca <USBD_StdEPReq+0x24>
 8004eb8:	b2d9      	uxtb	r1, r3
 8004eba:	2c40      	cmp	r4, #64	; 0x40
 8004ebc:	d005      	beq.n	8004eca <USBD_StdEPReq+0x24>
 8004ebe:	b16c      	cbz	r4, 8004edc <USBD_StdEPReq+0x36>
      USBD_CtlError(pdev, req);
 8004ec0:	4629      	mov	r1, r5
 8004ec2:	f7ff fdd9 	bl	8004a78 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004ec6:	2400      	movs	r4, #0
      break;
 8004ec8:	e006      	b.n	8004ed8 <USBD_StdEPReq+0x32>
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004eca:	f8d6 32b8 	ldr.w	r3, [r6, #696]	; 0x2b8
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	4629      	mov	r1, r5
 8004ed2:	4630      	mov	r0, r6
 8004ed4:	4798      	blx	r3
 8004ed6:	4604      	mov	r4, r0
}
 8004ed8:	4620      	mov	r0, r4
 8004eda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      switch (req->bRequest)
 8004edc:	786f      	ldrb	r7, [r5, #1]
 8004ede:	2f01      	cmp	r7, #1
 8004ee0:	d038      	beq.n	8004f54 <USBD_StdEPReq+0xae>
 8004ee2:	2f03      	cmp	r7, #3
 8004ee4:	d005      	beq.n	8004ef2 <USBD_StdEPReq+0x4c>
 8004ee6:	2f00      	cmp	r7, #0
 8004ee8:	d066      	beq.n	8004fb8 <USBD_StdEPReq+0x112>
          USBD_CtlError(pdev, req);
 8004eea:	4629      	mov	r1, r5
 8004eec:	f7ff fdc4 	bl	8004a78 <USBD_CtlError>
          break;
 8004ef0:	e7f2      	b.n	8004ed8 <USBD_StdEPReq+0x32>
          switch (pdev->dev_state)
 8004ef2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	d005      	beq.n	8004f08 <USBD_StdEPReq+0x62>
 8004efc:	2b03      	cmp	r3, #3
 8004efe:	d016      	beq.n	8004f2e <USBD_StdEPReq+0x88>
              USBD_CtlError(pdev, req);
 8004f00:	4629      	mov	r1, r5
 8004f02:	f7ff fdb9 	bl	8004a78 <USBD_CtlError>
              break;
 8004f06:	e7e7      	b.n	8004ed8 <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004f08:	f1b1 0380 	subs.w	r3, r1, #128	; 0x80
 8004f0c:	bf18      	it	ne
 8004f0e:	2301      	movne	r3, #1
 8004f10:	2900      	cmp	r1, #0
 8004f12:	bf08      	it	eq
 8004f14:	2300      	moveq	r3, #0
 8004f16:	b133      	cbz	r3, 8004f26 <USBD_StdEPReq+0x80>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8004f18:	f000 fba2 	bl	8005660 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8004f1c:	2180      	movs	r1, #128	; 0x80
 8004f1e:	4630      	mov	r0, r6
 8004f20:	f000 fb9e 	bl	8005660 <USBD_LL_StallEP>
 8004f24:	e7d8      	b.n	8004ed8 <USBD_StdEPReq+0x32>
                USBD_CtlError(pdev, req);
 8004f26:	4629      	mov	r1, r5
 8004f28:	f7ff fda6 	bl	8004a78 <USBD_CtlError>
 8004f2c:	e7d4      	b.n	8004ed8 <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004f2e:	886b      	ldrh	r3, [r5, #2]
 8004f30:	b94b      	cbnz	r3, 8004f46 <USBD_StdEPReq+0xa0>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004f32:	f1b1 0380 	subs.w	r3, r1, #128	; 0x80
 8004f36:	bf18      	it	ne
 8004f38:	2301      	movne	r3, #1
 8004f3a:	2900      	cmp	r1, #0
 8004f3c:	bf08      	it	eq
 8004f3e:	2300      	moveq	r3, #0
 8004f40:	b10b      	cbz	r3, 8004f46 <USBD_StdEPReq+0xa0>
 8004f42:	88eb      	ldrh	r3, [r5, #6]
 8004f44:	b11b      	cbz	r3, 8004f4e <USBD_StdEPReq+0xa8>
              (void)USBD_CtlSendStatus(pdev);
 8004f46:	4630      	mov	r0, r6
 8004f48:	f000 f901 	bl	800514e <USBD_CtlSendStatus>
              break;
 8004f4c:	e7c4      	b.n	8004ed8 <USBD_StdEPReq+0x32>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8004f4e:	f000 fb87 	bl	8005660 <USBD_LL_StallEP>
 8004f52:	e7f8      	b.n	8004f46 <USBD_StdEPReq+0xa0>
          switch (pdev->dev_state)
 8004f54:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d005      	beq.n	8004f6a <USBD_StdEPReq+0xc4>
 8004f5e:	2b03      	cmp	r3, #3
 8004f60:	d016      	beq.n	8004f90 <USBD_StdEPReq+0xea>
              USBD_CtlError(pdev, req);
 8004f62:	4629      	mov	r1, r5
 8004f64:	f7ff fd88 	bl	8004a78 <USBD_CtlError>
              break;
 8004f68:	e7b6      	b.n	8004ed8 <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004f6a:	f1b1 0380 	subs.w	r3, r1, #128	; 0x80
 8004f6e:	bf18      	it	ne
 8004f70:	2301      	movne	r3, #1
 8004f72:	2900      	cmp	r1, #0
 8004f74:	bf08      	it	eq
 8004f76:	2300      	moveq	r3, #0
 8004f78:	b133      	cbz	r3, 8004f88 <USBD_StdEPReq+0xe2>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8004f7a:	f000 fb71 	bl	8005660 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8004f7e:	2180      	movs	r1, #128	; 0x80
 8004f80:	4630      	mov	r0, r6
 8004f82:	f000 fb6d 	bl	8005660 <USBD_LL_StallEP>
 8004f86:	e7a7      	b.n	8004ed8 <USBD_StdEPReq+0x32>
                USBD_CtlError(pdev, req);
 8004f88:	4629      	mov	r1, r5
 8004f8a:	f7ff fd75 	bl	8004a78 <USBD_CtlError>
 8004f8e:	e7a3      	b.n	8004ed8 <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004f90:	886b      	ldrh	r3, [r5, #2]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d1a0      	bne.n	8004ed8 <USBD_StdEPReq+0x32>
                if ((ep_addr & 0x7FU) != 0x00U)
 8004f96:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 8004f9a:	d10a      	bne.n	8004fb2 <USBD_StdEPReq+0x10c>
                (void)USBD_CtlSendStatus(pdev);
 8004f9c:	4630      	mov	r0, r6
 8004f9e:	f000 f8d6 	bl	800514e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004fa2:	f8d6 32b8 	ldr.w	r3, [r6, #696]	; 0x2b8
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	4629      	mov	r1, r5
 8004faa:	4630      	mov	r0, r6
 8004fac:	4798      	blx	r3
 8004fae:	4604      	mov	r4, r0
 8004fb0:	e792      	b.n	8004ed8 <USBD_StdEPReq+0x32>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8004fb2:	f000 fb5d 	bl	8005670 <USBD_LL_ClearStallEP>
 8004fb6:	e7f1      	b.n	8004f9c <USBD_StdEPReq+0xf6>
          switch (pdev->dev_state)
 8004fb8:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8004fbc:	b2d2      	uxtb	r2, r2
 8004fbe:	2a02      	cmp	r2, #2
 8004fc0:	d006      	beq.n	8004fd0 <USBD_StdEPReq+0x12a>
 8004fc2:	2a03      	cmp	r2, #3
 8004fc4:	d02e      	beq.n	8005024 <USBD_StdEPReq+0x17e>
              USBD_CtlError(pdev, req);
 8004fc6:	4629      	mov	r1, r5
 8004fc8:	f7ff fd56 	bl	8004a78 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004fcc:	463c      	mov	r4, r7
              break;
 8004fce:	e783      	b.n	8004ed8 <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004fd0:	f1b1 0280 	subs.w	r2, r1, #128	; 0x80
 8004fd4:	bf18      	it	ne
 8004fd6:	2201      	movne	r2, #1
 8004fd8:	2900      	cmp	r1, #0
 8004fda:	bf08      	it	eq
 8004fdc:	2200      	moveq	r2, #0
 8004fde:	b99a      	cbnz	r2, 8005008 <USBD_StdEPReq+0x162>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004fe0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004fe4:	d115      	bne.n	8005012 <USBD_StdEPReq+0x16c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004fe6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004fea:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8004fee:	0089      	lsls	r1, r1, #2
 8004ff0:	f501 71a8 	add.w	r1, r1, #336	; 0x150
 8004ff4:	4401      	add	r1, r0
 8004ff6:	3104      	adds	r1, #4
              pep->status = 0x0000U;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8004ffc:	2202      	movs	r2, #2
 8004ffe:	4630      	mov	r0, r6
 8005000:	f000 f879 	bl	80050f6 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8005004:	463c      	mov	r4, r7
              break;
 8005006:	e767      	b.n	8004ed8 <USBD_StdEPReq+0x32>
                USBD_CtlError(pdev, req);
 8005008:	4629      	mov	r1, r5
 800500a:	f7ff fd35 	bl	8004a78 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800500e:	463c      	mov	r4, r7
                break;
 8005010:	e762      	b.n	8004ed8 <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005012:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8005016:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800501a:	0089      	lsls	r1, r1, #2
 800501c:	3110      	adds	r1, #16
 800501e:	4401      	add	r1, r0
 8005020:	3104      	adds	r1, #4
 8005022:	e7e9      	b.n	8004ff8 <USBD_StdEPReq+0x152>
              if ((ep_addr & 0x80U) == 0x80U)
 8005024:	b25b      	sxtb	r3, r3
 8005026:	2b00      	cmp	r3, #0
 8005028:	db24      	blt.n	8005074 <USBD_StdEPReq+0x1ce>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800502a:	f001 020f 	and.w	r2, r1, #15
 800502e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005032:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8005036:	f8b2 2164 	ldrh.w	r2, [r2, #356]	; 0x164
 800503a:	b34a      	cbz	r2, 8005090 <USBD_StdEPReq+0x1ea>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800503c:	2b00      	cmp	r3, #0
 800503e:	db2c      	blt.n	800509a <USBD_StdEPReq+0x1f4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005040:	f001 037f 	and.w	r3, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005044:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005048:	009c      	lsls	r4, r3, #2
 800504a:	f504 74a8 	add.w	r4, r4, #336	; 0x150
 800504e:	4434      	add	r4, r6
 8005050:	3404      	adds	r4, #4
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005052:	2980      	cmp	r1, #128	; 0x80
 8005054:	bf14      	ite	ne
 8005056:	2300      	movne	r3, #0
 8005058:	2301      	moveq	r3, #1
 800505a:	2900      	cmp	r1, #0
 800505c:	bf08      	it	eq
 800505e:	2301      	moveq	r3, #1
 8005060:	b323      	cbz	r3, 80050ac <USBD_StdEPReq+0x206>
                pep->status = 0x0000U;
 8005062:	2300      	movs	r3, #0
 8005064:	6023      	str	r3, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005066:	2202      	movs	r2, #2
 8005068:	4621      	mov	r1, r4
 800506a:	4630      	mov	r0, r6
 800506c:	f000 f843 	bl	80050f6 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8005070:	463c      	mov	r4, r7
              break;
 8005072:	e731      	b.n	8004ed8 <USBD_StdEPReq+0x32>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005074:	f001 020f 	and.w	r2, r1, #15
 8005078:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800507c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8005080:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8005082:	2a00      	cmp	r2, #0
 8005084:	d1da      	bne.n	800503c <USBD_StdEPReq+0x196>
                  USBD_CtlError(pdev, req);
 8005086:	4629      	mov	r1, r5
 8005088:	f7ff fcf6 	bl	8004a78 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800508c:	463c      	mov	r4, r7
                  break;
 800508e:	e723      	b.n	8004ed8 <USBD_StdEPReq+0x32>
                  USBD_CtlError(pdev, req);
 8005090:	4629      	mov	r1, r5
 8005092:	f7ff fcf1 	bl	8004a78 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8005096:	463c      	mov	r4, r7
                  break;
 8005098:	e71e      	b.n	8004ed8 <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800509a:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800509e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80050a2:	009c      	lsls	r4, r3, #2
 80050a4:	3410      	adds	r4, #16
 80050a6:	4434      	add	r4, r6
 80050a8:	3404      	adds	r4, #4
 80050aa:	e7d2      	b.n	8005052 <USBD_StdEPReq+0x1ac>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80050ac:	4630      	mov	r0, r6
 80050ae:	f000 fa8d 	bl	80055cc <USBD_LL_IsStallEP>
 80050b2:	b110      	cbz	r0, 80050ba <USBD_StdEPReq+0x214>
                pep->status = 0x0001U;
 80050b4:	2301      	movs	r3, #1
 80050b6:	6023      	str	r3, [r4, #0]
 80050b8:	e7d5      	b.n	8005066 <USBD_StdEPReq+0x1c0>
                pep->status = 0x0000U;
 80050ba:	2300      	movs	r3, #0
 80050bc:	6023      	str	r3, [r4, #0]
 80050be:	e7d2      	b.n	8005066 <USBD_StdEPReq+0x1c0>

080050c0 <USBD_GetString>:
  if (desc == NULL)
 80050c0:	b1c0      	cbz	r0, 80050f4 <USBD_GetString+0x34>
{
 80050c2:	b570      	push	{r4, r5, r6, lr}
 80050c4:	460d      	mov	r5, r1
 80050c6:	4616      	mov	r6, r2
 80050c8:	4604      	mov	r4, r0
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80050ca:	f7ff fcae 	bl	8004a2a <USBD_GetLen>
 80050ce:	3001      	adds	r0, #1
 80050d0:	0040      	lsls	r0, r0, #1
 80050d2:	8030      	strh	r0, [r6, #0]
  unicode[idx] = *(uint8_t *)len;
 80050d4:	7028      	strb	r0, [r5, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80050d6:	2303      	movs	r3, #3
 80050d8:	706b      	strb	r3, [r5, #1]
  idx++;
 80050da:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 80050dc:	7822      	ldrb	r2, [r4, #0]
 80050de:	b142      	cbz	r2, 80050f2 <USBD_GetString+0x32>
    unicode[idx] = *pdesc;
 80050e0:	54ea      	strb	r2, [r5, r3]
    pdesc++;
 80050e2:	3401      	adds	r4, #1
    idx++;
 80050e4:	1c5a      	adds	r2, r3, #1
 80050e6:	b2d2      	uxtb	r2, r2
    unicode[idx] = 0U;
 80050e8:	2100      	movs	r1, #0
 80050ea:	54a9      	strb	r1, [r5, r2]
    idx++;
 80050ec:	3302      	adds	r3, #2
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	e7f4      	b.n	80050dc <USBD_GetString+0x1c>
}
 80050f2:	bd70      	pop	{r4, r5, r6, pc}
 80050f4:	4770      	bx	lr

080050f6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80050f6:	b510      	push	{r4, lr}
 80050f8:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80050fa:	2202      	movs	r2, #2
 80050fc:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005100:	6183      	str	r3, [r0, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8005102:	61c3      	str	r3, [r0, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005104:	460a      	mov	r2, r1
 8005106:	2100      	movs	r1, #0
 8005108:	f000 fac2 	bl	8005690 <USBD_LL_Transmit>

  return USBD_OK;
}
 800510c:	2000      	movs	r0, #0
 800510e:	bd10      	pop	{r4, pc}

08005110 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005110:	b508      	push	{r3, lr}
 8005112:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005114:	460a      	mov	r2, r1
 8005116:	2100      	movs	r1, #0
 8005118:	f000 faba 	bl	8005690 <USBD_LL_Transmit>

  return USBD_OK;
}
 800511c:	2000      	movs	r0, #0
 800511e:	bd08      	pop	{r3, pc}

08005120 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8005120:	b510      	push	{r4, lr}
 8005122:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005124:	2203      	movs	r2, #3
 8005126:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800512a:	f8c0 3158 	str.w	r3, [r0, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800512e:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005132:	460a      	mov	r2, r1
 8005134:	2100      	movs	r1, #0
 8005136:	f000 fab3 	bl	80056a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800513a:	2000      	movs	r0, #0
 800513c:	bd10      	pop	{r4, pc}

0800513e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800513e:	b508      	push	{r3, lr}
 8005140:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005142:	460a      	mov	r2, r1
 8005144:	2100      	movs	r1, #0
 8005146:	f000 faab 	bl	80056a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800514a:	2000      	movs	r0, #0
 800514c:	bd08      	pop	{r3, pc}

0800514e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800514e:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005150:	2204      	movs	r2, #4
 8005152:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005156:	2300      	movs	r3, #0
 8005158:	461a      	mov	r2, r3
 800515a:	4619      	mov	r1, r3
 800515c:	f000 fa98 	bl	8005690 <USBD_LL_Transmit>

  return USBD_OK;
}
 8005160:	2000      	movs	r0, #0
 8005162:	bd08      	pop	{r3, pc}

08005164 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005164:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005166:	2205      	movs	r2, #5
 8005168:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800516c:	2300      	movs	r3, #0
 800516e:	461a      	mov	r2, r3
 8005170:	4619      	mov	r1, r3
 8005172:	f000 fa95 	bl	80056a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005176:	2000      	movs	r0, #0
 8005178:	bd08      	pop	{r3, pc}
	...

0800517c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800517c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800517e:	2201      	movs	r2, #1
 8005180:	4910      	ldr	r1, [pc, #64]	; (80051c4 <MX_USB_DEVICE_Init+0x48>)
 8005182:	4811      	ldr	r0, [pc, #68]	; (80051c8 <MX_USB_DEVICE_Init+0x4c>)
 8005184:	f7ff faaf 	bl	80046e6 <USBD_Init>
 8005188:	b980      	cbnz	r0, 80051ac <MX_USB_DEVICE_Init+0x30>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_AUDIO) != USBD_OK)
 800518a:	4910      	ldr	r1, [pc, #64]	; (80051cc <MX_USB_DEVICE_Init+0x50>)
 800518c:	480e      	ldr	r0, [pc, #56]	; (80051c8 <MX_USB_DEVICE_Init+0x4c>)
 800518e:	f7ff fac1 	bl	8004714 <USBD_RegisterClass>
 8005192:	b970      	cbnz	r0, 80051b2 <MX_USB_DEVICE_Init+0x36>
  {
    Error_Handler();
  }
  if (USBD_AUDIO_RegisterInterface(&hUsbDeviceHS, &USBD_AUDIO_fops_HS) != USBD_OK)
 8005194:	490e      	ldr	r1, [pc, #56]	; (80051d0 <MX_USB_DEVICE_Init+0x54>)
 8005196:	480c      	ldr	r0, [pc, #48]	; (80051c8 <MX_USB_DEVICE_Init+0x4c>)
 8005198:	f7ff fa9e 	bl	80046d8 <USBD_AUDIO_RegisterInterface>
 800519c:	b960      	cbnz	r0, 80051b8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800519e:	480a      	ldr	r0, [pc, #40]	; (80051c8 <MX_USB_DEVICE_Init+0x4c>)
 80051a0:	f7ff facf 	bl	8004742 <USBD_Start>
 80051a4:	b958      	cbnz	r0, 80051be <MX_USB_DEVICE_Init+0x42>
  {
    Error_Handler();
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80051a6:	f7fd fa5f 	bl	8002668 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80051aa:	bd08      	pop	{r3, pc}
    Error_Handler();
 80051ac:	f7fc f9b6 	bl	800151c <Error_Handler>
 80051b0:	e7eb      	b.n	800518a <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 80051b2:	f7fc f9b3 	bl	800151c <Error_Handler>
 80051b6:	e7ed      	b.n	8005194 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 80051b8:	f7fc f9b0 	bl	800151c <Error_Handler>
 80051bc:	e7ef      	b.n	800519e <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 80051be:	f7fc f9ad 	bl	800151c <Error_Handler>
 80051c2:	e7f0      	b.n	80051a6 <MX_USB_DEVICE_Init+0x2a>
 80051c4:	24000134 	.word	0x24000134
 80051c8:	24003040 	.word	0x24003040
 80051cc:	24000018 	.word	0x24000018
 80051d0:	24000128 	.word	0x24000128

080051d4 <AUDIO_Init_HS>:
  UNUSED(AudioFreq);
  UNUSED(Volume);
  UNUSED(options);
  return (USBD_OK);
  /* USER CODE END 9 */
}
 80051d4:	2000      	movs	r0, #0
 80051d6:	4770      	bx	lr

080051d8 <AUDIO_DeInit_HS>:
{
  /* USER CODE BEGIN 10 */
  UNUSED(options);
  return (USBD_OK);
  /* USER CODE END 10 */
}
 80051d8:	2000      	movs	r0, #0
 80051da:	4770      	bx	lr

080051dc <AUDIO_AudioCmd_HS>:
  * @param  size: Number of data to be sent (in bytes)
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_AudioCmd_HS(uint8_t* pbuf, uint32_t size, uint8_t cmd)
{
 80051dc:	b508      	push	{r3, lr}
  switch (cmd)
 80051de:	2a01      	cmp	r2, #1
 80051e0:	d00f      	beq.n	8005202 <AUDIO_AudioCmd_HS+0x26>
 80051e2:	2a02      	cmp	r2, #2
 80051e4:	d018      	beq.n	8005218 <AUDIO_AudioCmd_HS+0x3c>
 80051e6:	b10a      	cbz	r2, 80051ec <AUDIO_AudioCmd_HS+0x10>
  }

  return USBD_OK;
  return (USBD_OK);
  /* USER CODE END 11 */
}
 80051e8:	2000      	movs	r0, #0
 80051ea:	bd08      	pop	{r3, pc}
		sai_wrpos = 0;
 80051ec:	2300      	movs	r3, #0
 80051ee:	4a0c      	ldr	r2, [pc, #48]	; (8005220 <AUDIO_AudioCmd_HS+0x44>)
 80051f0:	6013      	str	r3, [r2, #0]
		sai_laps_difference = 0;
 80051f2:	4a0c      	ldr	r2, [pc, #48]	; (8005224 <AUDIO_AudioCmd_HS+0x48>)
 80051f4:	6013      	str	r3, [r2, #0]
		sai_instance_dma_configure(SAI1);
 80051f6:	480c      	ldr	r0, [pc, #48]	; (8005228 <AUDIO_AudioCmd_HS+0x4c>)
 80051f8:	f7fb fefa 	bl	8000ff0 <sai_instance_dma_configure>
		sai_enable();
 80051fc:	f7fb fea6 	bl	8000f4c <sai_enable>
		break;
 8005200:	e7f2      	b.n	80051e8 <AUDIO_AudioCmd_HS+0xc>
		sai_wrpos = 0;
 8005202:	2300      	movs	r3, #0
 8005204:	4a06      	ldr	r2, [pc, #24]	; (8005220 <AUDIO_AudioCmd_HS+0x44>)
 8005206:	6013      	str	r3, [r2, #0]
		sai_laps_difference = 0;
 8005208:	4a06      	ldr	r2, [pc, #24]	; (8005224 <AUDIO_AudioCmd_HS+0x48>)
 800520a:	6013      	str	r3, [r2, #0]
		sai_instance_dma_stop(SAI1);
 800520c:	4806      	ldr	r0, [pc, #24]	; (8005228 <AUDIO_AudioCmd_HS+0x4c>)
 800520e:	f7fb ffc5 	bl	800119c <sai_instance_dma_stop>
		sai_disable();
 8005212:	f7fb fea9 	bl	8000f68 <sai_disable>
		break;
 8005216:	e7e7      	b.n	80051e8 <AUDIO_AudioCmd_HS+0xc>
		i2sclock_select(*(uint32_t*)pbuf);
 8005218:	6800      	ldr	r0, [r0, #0]
 800521a:	f7fb fc81 	bl	8000b20 <i2sclock_select>
		break;
 800521e:	e7e3      	b.n	80051e8 <AUDIO_AudioCmd_HS+0xc>
 8005220:	240001d4 	.word	0x240001d4
 8005224:	240001cc 	.word	0x240001cc
 8005228:	40015800 	.word	0x40015800

0800522c <USBD_HS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800522c:	2312      	movs	r3, #18
 800522e:	800b      	strh	r3, [r1, #0]
  return USBD_HS_DeviceDesc;
}
 8005230:	4800      	ldr	r0, [pc, #0]	; (8005234 <USBD_HS_DeviceDescriptor+0x8>)
 8005232:	4770      	bx	lr
 8005234:	24000150 	.word	0x24000150

08005238 <USBD_HS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005238:	2304      	movs	r3, #4
 800523a:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 800523c:	4800      	ldr	r0, [pc, #0]	; (8005240 <USBD_HS_LangIDStrDescriptor+0x8>)
 800523e:	4770      	bx	lr
 8005240:	24000164 	.word	0x24000164

08005244 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8005244:	2300      	movs	r3, #0
 8005246:	4293      	cmp	r3, r2
 8005248:	d217      	bcs.n	800527a <IntToUnicode+0x36>
{
 800524a:	b430      	push	{r4, r5}
 800524c:	e00b      	b.n	8005266 <IntToUnicode+0x22>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800524e:	3437      	adds	r4, #55	; 0x37
 8005250:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    }

    value = value << 4;
 8005254:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 8005256:	005c      	lsls	r4, r3, #1
 8005258:	3401      	adds	r4, #1
 800525a:	2500      	movs	r5, #0
 800525c:	550d      	strb	r5, [r1, r4]
  for (idx = 0; idx < len; idx++)
 800525e:	3301      	adds	r3, #1
 8005260:	b2db      	uxtb	r3, r3
 8005262:	4293      	cmp	r3, r2
 8005264:	d207      	bcs.n	8005276 <IntToUnicode+0x32>
    if (((value >> 28)) < 0xA)
 8005266:	0f04      	lsrs	r4, r0, #28
 8005268:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
 800526c:	d2ef      	bcs.n	800524e <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 800526e:	3430      	adds	r4, #48	; 0x30
 8005270:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
 8005274:	e7ee      	b.n	8005254 <IntToUnicode+0x10>
  }
}
 8005276:	bc30      	pop	{r4, r5}
 8005278:	4770      	bx	lr
 800527a:	4770      	bx	lr

0800527c <Get_SerialNum>:
{
 800527c:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800527e:	4b0a      	ldr	r3, [pc, #40]	; (80052a8 <Get_SerialNum+0x2c>)
 8005280:	6818      	ldr	r0, [r3, #0]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005282:	3304      	adds	r3, #4
 8005284:	681c      	ldr	r4, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005286:	3304      	adds	r3, #4
 8005288:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 800528a:	18c0      	adds	r0, r0, r3
 800528c:	d100      	bne.n	8005290 <Get_SerialNum+0x14>
}
 800528e:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005290:	4d06      	ldr	r5, [pc, #24]	; (80052ac <Get_SerialNum+0x30>)
 8005292:	2208      	movs	r2, #8
 8005294:	1ca9      	adds	r1, r5, #2
 8005296:	f7ff ffd5 	bl	8005244 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800529a:	2204      	movs	r2, #4
 800529c:	f105 0112 	add.w	r1, r5, #18
 80052a0:	4620      	mov	r0, r4
 80052a2:	f7ff ffcf 	bl	8005244 <IntToUnicode>
}
 80052a6:	e7f2      	b.n	800528e <Get_SerialNum+0x12>
 80052a8:	1ff1e800 	.word	0x1ff1e800
 80052ac:	24000168 	.word	0x24000168

080052b0 <USBD_HS_SerialStrDescriptor>:
{
 80052b0:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 80052b2:	231a      	movs	r3, #26
 80052b4:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 80052b6:	f7ff ffe1 	bl	800527c <Get_SerialNum>
}
 80052ba:	4801      	ldr	r0, [pc, #4]	; (80052c0 <USBD_HS_SerialStrDescriptor+0x10>)
 80052bc:	bd08      	pop	{r3, pc}
 80052be:	bf00      	nop
 80052c0:	24000168 	.word	0x24000168

080052c4 <USBD_HS_ProductStrDescriptor>:
{
 80052c4:	b508      	push	{r3, lr}
 80052c6:	460a      	mov	r2, r1
  if(speed == 0)
 80052c8:	b928      	cbnz	r0, 80052d6 <USBD_HS_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80052ca:	4905      	ldr	r1, [pc, #20]	; (80052e0 <USBD_HS_ProductStrDescriptor+0x1c>)
 80052cc:	4805      	ldr	r0, [pc, #20]	; (80052e4 <USBD_HS_ProductStrDescriptor+0x20>)
 80052ce:	f7ff fef7 	bl	80050c0 <USBD_GetString>
}
 80052d2:	4803      	ldr	r0, [pc, #12]	; (80052e0 <USBD_HS_ProductStrDescriptor+0x1c>)
 80052d4:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80052d6:	4902      	ldr	r1, [pc, #8]	; (80052e0 <USBD_HS_ProductStrDescriptor+0x1c>)
 80052d8:	4802      	ldr	r0, [pc, #8]	; (80052e4 <USBD_HS_ProductStrDescriptor+0x20>)
 80052da:	f7ff fef1 	bl	80050c0 <USBD_GetString>
 80052de:	e7f8      	b.n	80052d2 <USBD_HS_ProductStrDescriptor+0xe>
 80052e0:	24003310 	.word	0x24003310
 80052e4:	08005b4c 	.word	0x08005b4c

080052e8 <USBD_HS_ManufacturerStrDescriptor>:
{
 80052e8:	b510      	push	{r4, lr}
 80052ea:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80052ec:	4c03      	ldr	r4, [pc, #12]	; (80052fc <USBD_HS_ManufacturerStrDescriptor+0x14>)
 80052ee:	4621      	mov	r1, r4
 80052f0:	4803      	ldr	r0, [pc, #12]	; (8005300 <USBD_HS_ManufacturerStrDescriptor+0x18>)
 80052f2:	f7ff fee5 	bl	80050c0 <USBD_GetString>
}
 80052f6:	4620      	mov	r0, r4
 80052f8:	bd10      	pop	{r4, pc}
 80052fa:	bf00      	nop
 80052fc:	24003310 	.word	0x24003310
 8005300:	08005b64 	.word	0x08005b64

08005304 <USBD_HS_ConfigStrDescriptor>:
{
 8005304:	b508      	push	{r3, lr}
 8005306:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 8005308:	b928      	cbnz	r0, 8005316 <USBD_HS_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800530a:	4905      	ldr	r1, [pc, #20]	; (8005320 <USBD_HS_ConfigStrDescriptor+0x1c>)
 800530c:	4805      	ldr	r0, [pc, #20]	; (8005324 <USBD_HS_ConfigStrDescriptor+0x20>)
 800530e:	f7ff fed7 	bl	80050c0 <USBD_GetString>
}
 8005312:	4803      	ldr	r0, [pc, #12]	; (8005320 <USBD_HS_ConfigStrDescriptor+0x1c>)
 8005314:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8005316:	4902      	ldr	r1, [pc, #8]	; (8005320 <USBD_HS_ConfigStrDescriptor+0x1c>)
 8005318:	4802      	ldr	r0, [pc, #8]	; (8005324 <USBD_HS_ConfigStrDescriptor+0x20>)
 800531a:	f7ff fed1 	bl	80050c0 <USBD_GetString>
 800531e:	e7f8      	b.n	8005312 <USBD_HS_ConfigStrDescriptor+0xe>
 8005320:	24003310 	.word	0x24003310
 8005324:	08005b6c 	.word	0x08005b6c

08005328 <USBD_HS_InterfaceStrDescriptor>:
{
 8005328:	b508      	push	{r3, lr}
 800532a:	460a      	mov	r2, r1
  if(speed == 0)
 800532c:	b928      	cbnz	r0, 800533a <USBD_HS_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800532e:	4905      	ldr	r1, [pc, #20]	; (8005344 <USBD_HS_InterfaceStrDescriptor+0x1c>)
 8005330:	4805      	ldr	r0, [pc, #20]	; (8005348 <USBD_HS_InterfaceStrDescriptor+0x20>)
 8005332:	f7ff fec5 	bl	80050c0 <USBD_GetString>
}
 8005336:	4803      	ldr	r0, [pc, #12]	; (8005344 <USBD_HS_InterfaceStrDescriptor+0x1c>)
 8005338:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800533a:	4902      	ldr	r1, [pc, #8]	; (8005344 <USBD_HS_InterfaceStrDescriptor+0x1c>)
 800533c:	4802      	ldr	r0, [pc, #8]	; (8005348 <USBD_HS_InterfaceStrDescriptor+0x20>)
 800533e:	f7ff febf 	bl	80050c0 <USBD_GetString>
 8005342:	e7f8      	b.n	8005336 <USBD_HS_InterfaceStrDescriptor+0xe>
 8005344:	24003310 	.word	0x24003310
 8005348:	08005b7c 	.word	0x08005b7c

0800534c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800534c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800534e:	b0bb      	sub	sp, #236	; 0xec
 8005350:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005352:	2100      	movs	r1, #0
 8005354:	9135      	str	r1, [sp, #212]	; 0xd4
 8005356:	9136      	str	r1, [sp, #216]	; 0xd8
 8005358:	9137      	str	r1, [sp, #220]	; 0xdc
 800535a:	9138      	str	r1, [sp, #224]	; 0xe0
 800535c:	9139      	str	r1, [sp, #228]	; 0xe4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800535e:	22bc      	movs	r2, #188	; 0xbc
 8005360:	a806      	add	r0, sp, #24
 8005362:	f000 f9d7 	bl	8005714 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8005366:	6822      	ldr	r2, [r4, #0]
 8005368:	4b3e      	ldr	r3, [pc, #248]	; (8005464 <HAL_PCD_MspInit+0x118>)
 800536a:	429a      	cmp	r2, r3
 800536c:	d001      	beq.n	8005372 <HAL_PCD_MspInit+0x26>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800536e:	b03b      	add	sp, #236	; 0xec
 8005370:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8005372:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005376:	9306      	str	r3, [sp, #24]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8005378:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 800537c:	9327      	str	r3, [sp, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800537e:	a806      	add	r0, sp, #24
 8005380:	f7fd fba2 	bl	8002ac8 <HAL_RCCEx_PeriphCLKConfig>
 8005384:	2800      	cmp	r0, #0
 8005386:	d169      	bne.n	800545c <HAL_PCD_MspInit+0x110>
    HAL_PWREx_EnableUSBVoltageDetector();
 8005388:	f7fd f96e 	bl	8002668 <HAL_PWREx_EnableUSBVoltageDetector>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800538c:	4c36      	ldr	r4, [pc, #216]	; (8005468 <HAL_PCD_MspInit+0x11c>)
 800538e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8005392:	f043 0304 	orr.w	r3, r3, #4
 8005396:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800539a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800539e:	f003 0304 	and.w	r3, r3, #4
 80053a2:	9301      	str	r3, [sp, #4]
 80053a4:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053a6:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80053aa:	f043 0301 	orr.w	r3, r3, #1
 80053ae:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80053b2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80053b6:	f003 0301 	and.w	r3, r3, #1
 80053ba:	9302      	str	r3, [sp, #8]
 80053bc:	9b02      	ldr	r3, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80053be:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80053c2:	f043 0302 	orr.w	r3, r3, #2
 80053c6:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80053ca:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80053ce:	f003 0302 	and.w	r3, r3, #2
 80053d2:	9303      	str	r3, [sp, #12]
 80053d4:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 80053d6:	230d      	movs	r3, #13
 80053d8:	9335      	str	r3, [sp, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053da:	2502      	movs	r5, #2
 80053dc:	9536      	str	r5, [sp, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053de:	2600      	movs	r6, #0
 80053e0:	9637      	str	r6, [sp, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80053e2:	9538      	str	r5, [sp, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 80053e4:	270a      	movs	r7, #10
 80053e6:	9739      	str	r7, [sp, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80053e8:	a935      	add	r1, sp, #212	; 0xd4
 80053ea:	4820      	ldr	r0, [pc, #128]	; (800546c <HAL_PCD_MspInit+0x120>)
 80053ec:	f7fc fa32 	bl	8001854 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80053f0:	2328      	movs	r3, #40	; 0x28
 80053f2:	9335      	str	r3, [sp, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053f4:	9536      	str	r5, [sp, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053f6:	9637      	str	r6, [sp, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80053f8:	9538      	str	r5, [sp, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 80053fa:	9739      	str	r7, [sp, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053fc:	a935      	add	r1, sp, #212	; 0xd4
 80053fe:	481c      	ldr	r0, [pc, #112]	; (8005470 <HAL_PCD_MspInit+0x124>)
 8005400:	f7fc fa28 	bl	8001854 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8005404:	f643 4323 	movw	r3, #15395	; 0x3c23
 8005408:	9335      	str	r3, [sp, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800540a:	9536      	str	r5, [sp, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800540c:	9637      	str	r6, [sp, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800540e:	9538      	str	r5, [sp, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8005410:	9739      	str	r7, [sp, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005412:	a935      	add	r1, sp, #212	; 0xd4
 8005414:	4817      	ldr	r0, [pc, #92]	; (8005474 <HAL_PCD_MspInit+0x128>)
 8005416:	f7fc fa1d 	bl	8001854 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800541a:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 800541e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005422:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 8005426:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 800542a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800542e:	9304      	str	r3, [sp, #16]
 8005430:	9b04      	ldr	r3, [sp, #16]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 8005432:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8005436:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800543a:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 800543e:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8005442:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005446:	9305      	str	r3, [sp, #20]
 8005448:	9b05      	ldr	r3, [sp, #20]
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800544a:	4632      	mov	r2, r6
 800544c:	4631      	mov	r1, r6
 800544e:	204d      	movs	r0, #77	; 0x4d
 8005450:	f7fc f9aa 	bl	80017a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8005454:	204d      	movs	r0, #77	; 0x4d
 8005456:	f7fc f9d9 	bl	800180c <HAL_NVIC_EnableIRQ>
}
 800545a:	e788      	b.n	800536e <HAL_PCD_MspInit+0x22>
      Error_Handler();
 800545c:	f7fc f85e 	bl	800151c <Error_Handler>
 8005460:	e792      	b.n	8005388 <HAL_PCD_MspInit+0x3c>
 8005462:	bf00      	nop
 8005464:	40040000 	.word	0x40040000
 8005468:	58024400 	.word	0x58024400
 800546c:	58020800 	.word	0x58020800
 8005470:	58020000 	.word	0x58020000
 8005474:	58020400 	.word	0x58020400

08005478 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005478:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800547a:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 800547e:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8005482:	f7ff f973 	bl	800476c <USBD_LL_SetupStage>
}
 8005486:	bd08      	pop	{r3, pc}

08005488 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005488:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800548a:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 800548e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8005492:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005496:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800549a:	f7ff f993 	bl	80047c4 <USBD_LL_DataOutStage>
}
 800549e:	bd08      	pop	{r3, pc}

080054a0 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80054a0:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80054a2:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 80054a6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80054aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80054ac:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80054b0:	f7ff f9c4 	bl	800483c <USBD_LL_DataInStage>
}
 80054b4:	bd08      	pop	{r3, pc}

080054b6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80054b6:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80054b8:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80054bc:	f7ff fa64 	bl	8004988 <USBD_LL_SOF>
}
 80054c0:	bd08      	pop	{r3, pc}

080054c2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80054c2:	b510      	push	{r4, lr}
 80054c4:	4604      	mov	r4, r0
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80054c6:	68c3      	ldr	r3, [r0, #12]
 80054c8:	b13b      	cbz	r3, 80054da <HAL_PCD_ResetCallback+0x18>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80054ca:	2b02      	cmp	r3, #2
 80054cc:	d101      	bne.n	80054d2 <HAL_PCD_ResetCallback+0x10>
  {
    speed = USBD_SPEED_FULL;
 80054ce:	2101      	movs	r1, #1
 80054d0:	e004      	b.n	80054dc <HAL_PCD_ResetCallback+0x1a>
  }
  else
  {
    Error_Handler();
 80054d2:	f7fc f823 	bl	800151c <Error_Handler>
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80054d6:	2101      	movs	r1, #1
 80054d8:	e000      	b.n	80054dc <HAL_PCD_ResetCallback+0x1a>
    speed = USBD_SPEED_HIGH;
 80054da:	2100      	movs	r1, #0
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80054dc:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 80054e0:	f7ff fa38 	bl	8004954 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80054e4:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 80054e8:	f7ff fa07 	bl	80048fa <USBD_LL_Reset>
}
 80054ec:	bd10      	pop	{r4, pc}
	...

080054f0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80054f0:	b510      	push	{r4, lr}
 80054f2:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80054f4:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80054f8:	f7ff fa2f 	bl	800495a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80054fc:	6822      	ldr	r2, [r4, #0]
 80054fe:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8005502:	f043 0301 	orr.w	r3, r3, #1
 8005506:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800550a:	6a23      	ldr	r3, [r4, #32]
 800550c:	b123      	cbz	r3, 8005518 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800550e:	4a03      	ldr	r2, [pc, #12]	; (800551c <HAL_PCD_SuspendCallback+0x2c>)
 8005510:	6913      	ldr	r3, [r2, #16]
 8005512:	f043 0306 	orr.w	r3, r3, #6
 8005516:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8005518:	bd10      	pop	{r4, pc}
 800551a:	bf00      	nop
 800551c:	e000ed00 	.word	0xe000ed00

08005520 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005520:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8005522:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8005526:	f7ff fa22 	bl	800496e <USBD_LL_Resume>
}
 800552a:	bd08      	pop	{r3, pc}

0800552c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800552c:	b508      	push	{r3, lr}
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800552e:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8005532:	f7ff fa51 	bl	80049d8 <USBD_LL_IsoOUTIncomplete>
}
 8005536:	bd08      	pop	{r3, pc}

08005538 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005538:	b508      	push	{r3, lr}
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800553a:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800553e:	f7ff fa37 	bl	80049b0 <USBD_LL_IsoINIncomplete>
}
 8005542:	bd08      	pop	{r3, pc}

08005544 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005544:	b508      	push	{r3, lr}
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8005546:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800554a:	f7ff fa59 	bl	8004a00 <USBD_LL_DevConnected>
}
 800554e:	bd08      	pop	{r3, pc}

08005550 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005550:	b508      	push	{r3, lr}
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8005552:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8005556:	f7ff fa55 	bl	8004a04 <USBD_LL_DevDisconnected>
}
 800555a:	bd08      	pop	{r3, pc}

0800555c <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800555c:	7803      	ldrb	r3, [r0, #0]
 800555e:	2b01      	cmp	r3, #1
 8005560:	d001      	beq.n	8005566 <USBD_LL_Init+0xa>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x100);
  }
  return USBD_OK;
}
 8005562:	2000      	movs	r0, #0
 8005564:	4770      	bx	lr
{
 8005566:	b510      	push	{r4, lr}
  hpcd_USB_OTG_HS.pData = pdev;
 8005568:	4b16      	ldr	r3, [pc, #88]	; (80055c4 <USBD_LL_Init+0x68>)
 800556a:	f8c3 0404 	str.w	r0, [r3, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_HS;
 800556e:	f8c0 32c4 	str.w	r3, [r0, #708]	; 0x2c4
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8005572:	4a15      	ldr	r2, [pc, #84]	; (80055c8 <USBD_LL_Init+0x6c>)
 8005574:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8005576:	2209      	movs	r2, #9
 8005578:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 800557a:	2200      	movs	r2, #0
 800557c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = ENABLE;
 800557e:	2101      	movs	r1, #1
 8005580:	6119      	str	r1, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 8005582:	6199      	str	r1, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = ENABLE;
 8005584:	61d9      	str	r1, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8005586:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8005588:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800558a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800558c:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800558e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8005590:	4618      	mov	r0, r3
 8005592:	f7fc fabe 	bl	8001b12 <HAL_PCD_Init>
 8005596:	b990      	cbnz	r0, 80055be <USBD_LL_Init+0x62>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8005598:	4c0a      	ldr	r4, [pc, #40]	; (80055c4 <USBD_LL_Init+0x68>)
 800559a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800559e:	4620      	mov	r0, r4
 80055a0:	f7fd f848 	bl	8002634 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 80055a4:	2280      	movs	r2, #128	; 0x80
 80055a6:	2100      	movs	r1, #0
 80055a8:	4620      	mov	r0, r4
 80055aa:	f7fd f81f 	bl	80025ec <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x100);
 80055ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80055b2:	2101      	movs	r1, #1
 80055b4:	4620      	mov	r0, r4
 80055b6:	f7fd f819 	bl	80025ec <HAL_PCDEx_SetTxFiFo>
}
 80055ba:	2000      	movs	r0, #0
 80055bc:	bd10      	pop	{r4, pc}
    Error_Handler( );
 80055be:	f7fb ffad 	bl	800151c <Error_Handler>
 80055c2:	e7e9      	b.n	8005598 <USBD_LL_Init+0x3c>
 80055c4:	24003510 	.word	0x24003510
 80055c8:	40040000 	.word	0x40040000

080055cc <USBD_LL_IsStallEP>:
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80055cc:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4

  if((ep_addr & 0x80) == 0x80)
 80055d0:	f011 0f80 	tst.w	r1, #128	; 0x80
 80055d4:	d108      	bne.n	80055e8 <USBD_LL_IsStallEP+0x1c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80055d6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80055da:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80055de:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80055e2:	f891 01fe 	ldrb.w	r0, [r1, #510]	; 0x1fe
  }
}
 80055e6:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80055e8:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80055ec:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80055f0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80055f4:	f891 003e 	ldrb.w	r0, [r1, #62]	; 0x3e
 80055f8:	4770      	bx	lr

080055fa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80055fa:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80055fc:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8005600:	f7fc ff26 	bl	8002450 <HAL_PCD_EP_GetRxCount>
}
 8005604:	bd08      	pop	{r3, pc}

08005606 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8005606:	2803      	cmp	r0, #3
 8005608:	d805      	bhi.n	8005616 <USBD_Get_USB_Status+0x10>
 800560a:	e8df f000 	tbb	[pc, r0]
 800560e:	0405      	.short	0x0405
 8005610:	0502      	.short	0x0502
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8005612:	2001      	movs	r0, #1
    break;
 8005614:	4770      	bx	lr
      usb_status = USBD_FAIL;
 8005616:	2003      	movs	r0, #3
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8005618:	4770      	bx	lr

0800561a <USBD_LL_Start>:
{
 800561a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 800561c:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8005620:	f7fc fb11 	bl	8001c46 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005624:	f7ff ffef 	bl	8005606 <USBD_Get_USB_Status>
}
 8005628:	bd08      	pop	{r3, pc}

0800562a <USBD_LL_OpenEP>:
{
 800562a:	b510      	push	{r4, lr}
 800562c:	4614      	mov	r4, r2
 800562e:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8005630:	4623      	mov	r3, r4
 8005632:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8005636:	f7fc fe55 	bl	80022e4 <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800563a:	f7ff ffe4 	bl	8005606 <USBD_Get_USB_Status>
}
 800563e:	bd10      	pop	{r4, pc}

08005640 <USBD_LL_CloseEP>:
{
 8005640:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8005642:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8005646:	f7fc fe9b 	bl	8002380 <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800564a:	f7ff ffdc 	bl	8005606 <USBD_Get_USB_Status>
}
 800564e:	bd08      	pop	{r3, pc}

08005650 <USBD_LL_FlushEP>:
{
 8005650:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8005652:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8005656:	f7fc ffae 	bl	80025b6 <HAL_PCD_EP_Flush>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800565a:	f7ff ffd4 	bl	8005606 <USBD_Get_USB_Status>
}
 800565e:	bd08      	pop	{r3, pc}

08005660 <USBD_LL_StallEP>:
{
 8005660:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8005662:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8005666:	f7fc ff27 	bl	80024b8 <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800566a:	f7ff ffcc 	bl	8005606 <USBD_Get_USB_Status>
}
 800566e:	bd08      	pop	{r3, pc}

08005670 <USBD_LL_ClearStallEP>:
{
 8005670:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8005672:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8005676:	f7fc ff63 	bl	8002540 <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800567a:	f7ff ffc4 	bl	8005606 <USBD_Get_USB_Status>
}
 800567e:	bd08      	pop	{r3, pc}

08005680 <USBD_LL_SetUSBAddress>:
{
 8005680:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8005682:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8005686:	f7fc fe19 	bl	80022bc <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800568a:	f7ff ffbc 	bl	8005606 <USBD_Get_USB_Status>
}
 800568e:	bd08      	pop	{r3, pc}

08005690 <USBD_LL_Transmit>:
{
 8005690:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8005692:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8005696:	f7fc fee4 	bl	8002462 <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800569a:	f7ff ffb4 	bl	8005606 <USBD_Get_USB_Status>
}
 800569e:	bd08      	pop	{r3, pc}

080056a0 <USBD_LL_PrepareReceive>:
{
 80056a0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80056a2:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80056a6:	f7fc fea4 	bl	80023f2 <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80056aa:	f7ff ffac 	bl	8005606 <USBD_Get_USB_Status>
}
 80056ae:	bd08      	pop	{r3, pc}

080056b0 <__libc_init_array>:
 80056b0:	b570      	push	{r4, r5, r6, lr}
 80056b2:	4d0d      	ldr	r5, [pc, #52]	; (80056e8 <__libc_init_array+0x38>)
 80056b4:	4c0d      	ldr	r4, [pc, #52]	; (80056ec <__libc_init_array+0x3c>)
 80056b6:	1b64      	subs	r4, r4, r5
 80056b8:	10a4      	asrs	r4, r4, #2
 80056ba:	2600      	movs	r6, #0
 80056bc:	42a6      	cmp	r6, r4
 80056be:	d109      	bne.n	80056d4 <__libc_init_array+0x24>
 80056c0:	4d0b      	ldr	r5, [pc, #44]	; (80056f0 <__libc_init_array+0x40>)
 80056c2:	4c0c      	ldr	r4, [pc, #48]	; (80056f4 <__libc_init_array+0x44>)
 80056c4:	f000 f82e 	bl	8005724 <_init>
 80056c8:	1b64      	subs	r4, r4, r5
 80056ca:	10a4      	asrs	r4, r4, #2
 80056cc:	2600      	movs	r6, #0
 80056ce:	42a6      	cmp	r6, r4
 80056d0:	d105      	bne.n	80056de <__libc_init_array+0x2e>
 80056d2:	bd70      	pop	{r4, r5, r6, pc}
 80056d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80056d8:	4798      	blx	r3
 80056da:	3601      	adds	r6, #1
 80056dc:	e7ee      	b.n	80056bc <__libc_init_array+0xc>
 80056de:	f855 3b04 	ldr.w	r3, [r5], #4
 80056e2:	4798      	blx	r3
 80056e4:	3601      	adds	r6, #1
 80056e6:	e7f2      	b.n	80056ce <__libc_init_array+0x1e>
 80056e8:	08005b8c 	.word	0x08005b8c
 80056ec:	08005b8c 	.word	0x08005b8c
 80056f0:	08005b8c 	.word	0x08005b8c
 80056f4:	08005b90 	.word	0x08005b90

080056f8 <memcpy>:
 80056f8:	440a      	add	r2, r1
 80056fa:	4291      	cmp	r1, r2
 80056fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8005700:	d100      	bne.n	8005704 <memcpy+0xc>
 8005702:	4770      	bx	lr
 8005704:	b510      	push	{r4, lr}
 8005706:	f811 4b01 	ldrb.w	r4, [r1], #1
 800570a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800570e:	4291      	cmp	r1, r2
 8005710:	d1f9      	bne.n	8005706 <memcpy+0xe>
 8005712:	bd10      	pop	{r4, pc}

08005714 <memset>:
 8005714:	4402      	add	r2, r0
 8005716:	4603      	mov	r3, r0
 8005718:	4293      	cmp	r3, r2
 800571a:	d100      	bne.n	800571e <memset+0xa>
 800571c:	4770      	bx	lr
 800571e:	f803 1b01 	strb.w	r1, [r3], #1
 8005722:	e7f9      	b.n	8005718 <memset+0x4>

08005724 <_init>:
 8005724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005726:	bf00      	nop
 8005728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800572a:	bc08      	pop	{r3}
 800572c:	469e      	mov	lr, r3
 800572e:	4770      	bx	lr

08005730 <_fini>:
 8005730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005732:	bf00      	nop
 8005734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005736:	bc08      	pop	{r3}
 8005738:	469e      	mov	lr, r3
 800573a:	4770      	bx	lr
